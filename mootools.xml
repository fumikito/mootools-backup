<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/4.9.8" created="2018-11-11 13:38" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>高橋文樹.com</title>
	<link>https://takahashifumiki.com</link>
	<description>小説家高橋文樹が自ら情報を発信するブログです。小説・Web制作などの話があります。</description>
	<pubDate>Sun, 11 Nov 2018 13:38:51 +0000</pubDate>
	<language>ja</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>https://takahashifumiki.com</wp:base_site_url>
	<wp:base_blog_url>https://takahashifumiki.com</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login><![CDATA[takahashi_fumiki]]></wp:author_login><wp:author_email><![CDATA[info@takahashifumiki.com]]></wp:author_email><wp:author_display_name><![CDATA[高橋文樹]]></wp:author_display_name><wp:author_first_name><![CDATA[高橋]]></wp:author_first_name><wp:author_last_name><![CDATA[文樹]]></wp:author_last_name></wp:author>

	<wp:category>
		<wp:term_id>47</wp:term_id>
		<wp:category_nicename><![CDATA[mootools]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[MooTools]]></wp:cat_name>
<wp:category_description><![CDATA[MooToolsはJavascriptフレームワークです。とても洗練された、鼻持ちならないエリートのようなフレームワークです。
今のところ、日本語リファレンスがないので、翻訳してみました。]]></wp:category_description>
	</wp:category>

	<generator>https://wordpress.org/?v=4.9.8</generator>

<image>
	<url>https://takahashifumiki.com/wp-content/uploads/2018/01/cropped-faviconx512-1-32x32.png</url>
	<title>高橋文樹.com</title>
	<link>https://takahashifumiki.com</link>
	<width>32</width>
	<height>32</height>
</image> 
<site xmlns="com-wordpress:feed-additions:1">28121865</site>
	<item>
		<title>Core</title>
		<link>https://takahashifumiki.com/web/mootools/152/</link>
		<pubDate>Wed, 22 Oct 2008 15:53:30 +0000</pubDate>
		<dc:creator><![CDATA[takahashi_fumiki]]></dc:creator>
		<guid isPermaLink="false">https://takahashifumiki.com/?p=152</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="main" class="l-border r-border span-15">
<h1 id="Core"><a href="#Core">Core</a></h1>
<p class="description">Coreには<a href="http://mootools.net">MooTools</a>でとてもよく使われる関数がたくさん入っています。
<a href="/docs/Native/Hash">連想配列</a>と<a href="/docs/Native/Array">配列</a>の基本的なメソッドもいくつか含まれています。
<h2 id="chk"><a href="#chk">関数: $chk</a></h2>
<p class="description">値が存在する、または0かどうかを調べます。0を許可したいときに役立ちます。</p>

<h3>構文:</h3>
<pre class="javascript">$chk<span class="br0">(</span><span class="kw1">item</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>item - (<em>いろいろ</em>) 調べたい要素。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>真偽値</em>) もし渡されたオブジェクトが存在するか、0ならば、trueを返します。そうでなければ、falseを返します。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">function</span> myFunction<span class="br0">(</span>arg<span class="br0">)</span><span class="br0">{</span>
    <span class="kw1">if</span><span class="br0">(</span>$chk<span class="br0">(</span>arg<span class="br0">)</span><span class="br0">)</span> <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'The object exists or is 0.'</span><span class="br0">)</span>;
    <span class="kw1">else</span> <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'オブジェクトはnull、undefined、false、""のどれかです'</span><span class="br0">)</span>;

<span class="br0">}</span></pre>
<h2 id="clear"><a href="#clear">関数: $clear</a></h2>
<p class="description">タイムアウトやインターバルを消去します。<a href="/docs/Native/Function/#関数:delay">関数:delay</a>や<a href="/docs/Native/Function/#関数:periodical">関数:periodical</a>と一緒に使うと役立ちます。</p>

<h3>構文:</h3>
<pre class="javascript">$clear<span class="br0">(</span>timer<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>timer - (<em>数</em>) クリアしたいsetInterval (periodical)やsetTimeout (delay)を定義しているもの。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>null</em>)nullを返します。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myTimer = myFunction.<span class="me1">delay</span><span class="br0">(</span><span class="nu0">5000</span><span class="br0">)</span>; <span class="co1">//5秒待ってからmyFunctionを実行</span>

myTimer = $clear<span class="br0">(</span>myTimer<span class="br0">)</span>; <span class="co1">//myFunctionをキャンセル</span></pre>
<h3>関連情報:</h3>
<ul>
	<li><a href="/docs/Native/Function/#関数:delay">関数:delay</a></li>
	<li><a href="/docs/Native/Function/#関数:periodical">関数:periodical</a></li>
</ul>
<h2 id="defined"><a href="#defined">関数: $defined</a></h2>
<p class="description">値が定義されているかどうかをチェックします。</p>

<h3>構文:</h3>
<pre class="javascript">$defined<span class="br0">(</span>obj<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>obj - (<em>いろいろ</em>) 調査したいオブジェクト。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>真偽値</em>) 渡されたオブジェクトがnullかundefinedならtrueを、その他はflaseを返します。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">function</span> myFunction<span class="br0">(</span>arg<span class="br0">)</span><span class="br0">{</span>
    <span class="kw1">if</span><span class="br0">(</span>$defined<span class="br0">(</span>arg<span class="br0">)</span><span class="br0">)</span> <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'オブジェクトは定義されています。'</span><span class="br0">)</span>;
    <span class="kw1">else</span> <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'オブジェクトはnullかundefinedです。'</span><span class="br0">)</span>;

<span class="br0">}</span></pre>
<h2 id="arguments"><a href="#arguments">関数: $arguments</a></h2>
<p class="description">渡されたインデックス(i)に応じて対応する引数を返す関数を作成します。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> argument = $arguments<span class="br0">(</span>i<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>i - (<em>数</em>) 戻り値としてほしい引数のインデックス。</li>
</ol>
<h2>戻り値:</h2>
<ul>
	<li>(<em>関数</em>) 渡された引数の中から特定の引数を返す関数。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> secondArgument = $arguments<span class="br0">(</span><span class="nu0">1</span><span class="br0">)</span>;
<span class="kw3">alert</span><span class="br0">(</span>secondArgument<span class="br0">(</span><span class="st0">'a'</span>,<span class="st0">'b'</span>,<span class="st0">'c'</span><span class="br0">)</span><span class="br0">)</span>; <span class="co1">//"b"をアラート。</span></pre>
<h2 id="empty"><a href="#empty">関数: $empty</a></h2>
<p class="description">空の関数、それだけです。典型的な例としては、クラスのイベントメソッドにおけるプレイスホルダーがあります。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> emptyFn = $empty;</pre>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myFunc = $empty;</pre>
<h2 id="lambda"><a href="#lambda">関数: $lambda</a></h2>
<p class="description">渡された引数を返すということ以外はなにもしない関数を作ります。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> returnTrue = $lambda<span class="br0">(value</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>value - (<em>いろいろ</em>) 戻り値として関数に設定したい値。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>関数</em>) 設定した値を返す関数。</li>
</ul>
<h3>例:</h3>
<pre class="javascript">myLink.<span class="me1">addEvent</span><span class="br0">(</span><span class="st0">'click'</span>, $lambda<span class="br0">(</span><span class="kw2">false</span><span class="br0">)</span><span class="br0">)</span>; <span class="co1">//リンクをクリックできないようにします。</span></pre>
<h2 id="extend"><a href="#extend">関数: $extend</a></h2>
<p class="description">渡された一番目のオブジェクトに、二番目のオブジェクトのプロパティをすべて上書きします。</p>

<h3>構文:</h3>
<pre class="javascript">$extend<span class="br0">(</span>original, extended<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>original  - (<em>オブジェクト</em>) 拡張したいオブジェクト。</li>
	<li>extension - (<em>オブジェクト</em>) オリジナルにコピーしたいプロパティを持つオブジェクト。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) 渡された一番目のオブジェクトを拡張したもの。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> firstObj = <span class="br0">{</span>
    <span class="st0">'name'</span>: <span class="st0">'John'</span>,
    <span class="st0">'lastName'</span>: <span class="st0">'Doe'</span>

<span class="br0">}</span>;
<span class="kw2">var</span> secondObj = <span class="br0">{</span>
    <span class="st0">'age'</span>: <span class="st0">'20'</span>,
    <span class="st0">'sex'</span>: <span class="st0">'male'</span>,
    <span class="st0">'lastName'</span>: <span class="st0">'Dorian'</span>

<span class="br0">}</span>;
$extend<span class="br0">(</span>firstObj, secondObj<span class="br0">)</span>;
<span class="co1">//firstObjはこうなりました: {'name': 'John', 'lastName': 'Dorian', 'age': '20', 'sex': 'male'};</span></pre>
<h2 id="merge"><a href="#merge">関数: $merge</a></h2>
<p class="description">オブジェクトを幾つでも合体することができ、元のオブジェクトを参照することなく再帰的に結合します。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> merged = $merge<span class="br0">(</span>obj1, obj2<span class="br0">[</span>, obj3<span class="br0">[</span>, ...<span class="br0">]</span><span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>(<em>オブジェクト</em>) オブジェクトを幾つでも。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) 渡されたオブジェクトをすべて結合してできたオブジェクト。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> obj1 = <span class="br0">{</span>a: <span class="nu0">0</span>, b: <span class="nu0">1</span><span class="br0">}</span>;
<span class="kw2">var</span> obj2 = <span class="br0">{</span>c: <span class="nu0">2</span>, d: <span class="nu0">3</span><span class="br0">}</span>;

<span class="kw2">var</span> obj3 = <span class="br0">{</span>a: <span class="nu0">4</span>, d: <span class="nu0">5</span><span class="br0">}</span>;
<span class="kw2">var</span> merged = $merge<span class="br0">(</span>obj1, obj2, obj3<span class="br0">)</span>; <span class="co1">//戻り値：{a: 4, b: 1, c: 2, d: 5}(obj1、obj2とobj3はそのままです)</span>

<span class="kw2">var</span> nestedObj1 = <span class="br0">{</span>a: <span class="br0">{</span>b: <span class="nu0">1</span>, c: <span class="nu0">1</span><span class="br0">}</span><span class="br0">}</span>;
<span class="kw2">var</span> nestedObj2 = <span class="br0">{</span>a: <span class="br0">{</span>b: <span class="nu0">2</span><span class="br0">}</span><span class="br0">}</span>;

<span class="kw2">var</span> nested = $merge<span class="br0">(</span>nestedObj1, nestedObj2<span class="br0">)</span>; <span class="co1">//戻り値: {a: {b: 2, c: 1}}</span></pre>
<h2 id="each"><a href="#each">関数: $each</a></h2>
<p class="description">反復可能なものに対して反復処理を行います。しかし、組み込み関数のgetElementsByTagNameで呼び出されたものや、関数の引数、オブジェクトには使えません。</p>

<h3>構文:</h3>
<pre class="javascript">$each<span class="br0">(</span>iterable, fn<span class="br0">[</span>, bind<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>iterable - (<em>オブジェクト</em> または <em>配列</em>) 反復処理の可能なオブジェクトや配列。</li>
	<li>fn       - (<em>関数</em>) それぞれの要素に対して実行したい関数。</li>
	<li>bind     - (<em>オブジェクト</em>, オプション) 関数内でThisとして使いたいオブジェクト。もっと詳しく知りたければ、<a href="/docs/Native/Function/#関数:bind">関数:bind</a>を参照のこと。</li>
</ol>
<h3>引数: fn</h3>
<h4>構文:</h4>
<pre class="javascript">fn<span class="br0">(</span><span class="kw1">item</span>, index, object<span class="br0">)</span></pre>
<h4>引数:</h4>
<ol>
	<li>item   - (<em>いろいろ</em>) 配列内の現在のアイテム。</li>
	<li>index  - (<em>数</em>) 配列内の現在のアイテムのインデックス。オブジェクトの場合、インデックスではなく、アイテムのキーが渡される。</li>
	<li>object - (<em>いろいろ</em>) 実際の配列・オブジェクト。</li>
</ol>
<h3>例:</h3>
<h4>配列の例:</h4>
<pre class="javascript">$each<span class="br0">(</span><span class="br0">[</span><span class="st0">'Sun'</span>,<span class="st0">'Mon'</span>,<span class="st0">'Tue'</span><span class="br0">]</span>, <span class="kw2">function</span><span class="br0">(</span>day, index<span class="br0">)</span><span class="br0">{</span>

    <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'name:'</span> + day + <span class="st0">', index: '</span> + index<span class="br0">)</span>;
<span class="br0">}</span><span class="br0">)</span>; <span class="co1">//"name: Sun, index: 0", "name: Mon, index: 1"...とアラート。</span></pre>
<h4>オブジェクトの例:</h4>
<pre class="javascript"><span class="co1">//"The first day of the week is Sunday", "The second day of the week is Monday"...とアラート:</span>
$each<span class="br0">(</span><span class="br0">{</span>first: <span class="st0">"Sunday"</span>, second: <span class="st0">"Monday"</span>, third: <span class="st0">"Tuesday"</span><span class="br0">}</span>, <span class="kw2">function</span><span class="br0">(</span>value, key<span class="br0">)</span><span class="br0">{</span>

    <span class="kw3">alert</span><span class="br0">(</span><span class="st0">"The "</span> + key + <span class="st0">" day of the week is "</span> + value<span class="br0">)</span>;
<span class="br0">}</span><span class="br0">)</span>;</pre>
<h2 id="pick"><a href="#pick">関数: $pick</a></h2>
<p class="description">渡された引数の中で一番初めの定義済み変数か、nullを返します。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> picked = $pick<span class="br0">(</span>var1<span class="br0">[</span>, var2<span class="br0">[</span>, var3<span class="br0">[</span>, ...<span class="br0">]</span><span class="br0">]</span><span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ul>
	<li>(<em>いろいろ</em>) 変数を幾つでも。</li>
</ul>
<h3>戻り値:</h3>
<ul>
	<li>(<em>いろいろ</em>) 定義されている最初の変数。</li>
	<li>(<em>null</em>) 渡された変数がすべてnullかundefinedならば、nullを返す。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">function</span> say<span class="br0">(</span>infoMessage, errorMessage<span class="br0">)</span><span class="br0">{</span>

    <span class="kw3">alert</span><span class="br0">(</span>$pick<span class="br0">(</span>errorMessage, infoMessage, <span class="st0">'There was no message supplied.'</span><span class="br0">)</span><span class="br0">)</span>;
<span class="br0">}</span>
say<span class="br0">(</span><span class="br0">)</span>; <span class="co1">//"There was no message supplied."をアラート。</span>

say<span class="br0">(</span><span class="st0">"This is an info message."</span><span class="br0">)</span>; <span class="co1">//"This is an info message."をアラート。</span>
say<span class="br0">(</span><span class="st0">"This message will be ignored."</span>, <span class="st0">"This is the error message."</span><span class="br0">)</span>; <span class="co1">//"This is the error message."をアラート。</span></pre>
<h2 id="random"><a href="#random">関数: $random</a></h2>
<p class="description">渡された2つの引数の間に収まる整数をランダムで返します。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> random = $random<span class="br0">(</span>min, max<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>min - (<em>数</em>) 最小値(自身を含む)</li>
	<li>max - (<em>数</em>) 最大値(自身を含む)</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>数</em>) minとmaxの間のランダムな数</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw3">alert</span><span class="br0">(</span>$random<span class="br0">(</span><span class="nu0">5</span>, <span class="nu0">20</span><span class="br0">)</span><span class="br0">)</span>; <span class="co1">//5と20の間のランダムな数をアラート。</span></pre>
<h2 id="splat"><a href="#splat">関数: $splat</a></h2>
<p class="description">渡された引数が定義済みであり、なおかつ配列でなければ、配列に変換します。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> splatted = $splat<span class="br0">(</span>obj<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>obj - (<em>いろいろ</em>) あらゆるタイプの変数。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>array</em>) 渡された変数が配列ならば、その配列を返します。それ以外の場合、渡された変数だけを値として持つ配列を返します。</li>
</ul>
<h3>例:</h3>
<pre class="javascript">$splat<span class="br0">(</span><span class="st0">'hello'</span><span class="br0">)</span>; <span class="co1">//['hello']を返します。</span>
$splat<span class="br0">(</span><span class="br0">[</span><span class="st0">'a'</span>, <span class="st0">'b'</span>, <span class="st0">'c'</span><span class="br0">]</span><span class="br0">)</span>; <span class="co1">//['a', 'b', 'c']を返します。</span></pre>
<h2 id="time"><a href="#time">関数: $time</a></h2>
<p class="description">現在時をタイムスタンプで返します。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> time = $time<span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(<em>数</em>) - The current timestamp.</li>
</ul>
<h2 id="try"><a href="#try">関数: $try</a></h2>
<p class="description">複数の関数を実行します。始めに実行できた関数の戻り値を返し、それ以降の関数は実行しません。一つも成功しなければ、nullを返します。</p>

<h3>構文:</h3>
<pre class="javascript">$try<span class="br0">(</span>fn<span class="br0">[</span>, fn, fn, fn, ...<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ul>
	<li>fn   - (<em>関数</em>) 実行したい関数。</li>
</ul>
<h3>戻り値:</h3>
<ul>
	<li>(<em>いろいろ</em>) 呼び出された関数の戻り値</li>
	<li>(<em>null</em>) <code>すべての関数が失敗したらnullを返す。</code></li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> result = $try<span class="br0">(</span><span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
    <span class="kw1">return</span> some.<span class="me1">made</span>.<span class="me1">up</span>.<span class="me1">object</span>;

<span class="br0">}</span>, <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
    <span class="kw1">return</span> jibberish.<span class="me1">that</span>.<span class="me1">doesnt</span>.<span class="me1">exists</span>;

<span class="br0">}</span>, <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
    <span class="kw1">return</span> <span class="kw2">false</span>;
<span class="br0">}</span><span class="br0">)</span>;

<span class="co1">//結果はfalse</span>

<span class="kw2">var</span> failure, success;

$try<span class="br0">(</span><span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
    some.<span class="me1">made</span>.<span class="me1">up</span>.<span class="me1">object</span> = <span class="st0">'something'</span>;
    success = <span class="kw2">true</span>;

<span class="br0">}</span>, <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
    failure = <span class="kw2">true</span>;
<span class="br0">}</span><span class="br0">)</span>;

<span class="kw1">if</span> <span class="br0">(</span>success<span class="br0">)</span> <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'yey!'</span><span class="br0">)</span>;</pre>
<h2 id="type"><a href="#type">関数: $type</a></h2>
<p class="description">渡された要素に一致するオブジェクトのタイプを返す。</p>

<h3>構文:</h3>
<pre class="javascript">$type<span class="br0">(</span>obj<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>obj - (<em>オブジェクト</em>) 調べたいオブジェクト。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>'element'    - (<em>文字列</em>) DOM要素ノードの場合。</li>
	<li>'textnode'   - (<em>文字列</em>) DOMテキストノードの場合。</li>
	<li>'whitespace' - (<em>文字列</em>) DOMホワイトスペースノードの場合。</li>
	<li>'arguments'  - (<em>文字列</em>) 引数オブジェクトの場合。</li>
	<li>'array'      - (<em>文字列</em>) 配列の場合。</li>
	<li>'object'     - (<em>文字列</em>) オブジェクトの場合。</li>
	<li>'string'     - (<em>文字列</em>) 文字列の場合。</li>
	<li>'number'     - (<em>文字列</em>) 数の場合。</li>
	<li>'date'       - (<em>文字列</em>) 日付の場合。</li>
	<li>'boolean'    - (<em>文字列</em>) 真偽値の場合。</li>
	<li>'function'   - (<em>文字列</em>) 関数の場合。</li>
	<li>'regexp'     - (<em>文字列</em>) 正規表現の場合。</li>
	<li>'class'      - (<em>文字列</em>) クラス(new Classで作られたものや、他のクラスの拡張)の場合。</li>
	<li>'collection' - (<em>文字列</em>) ネイティブのHTMLコレクションの場合。例えば、childNodes、getElementsByTagName, など。</li>
	<li>'window'     - (<em>文字列</em>) windowオブジェクトの場合。</li>
	<li>'document'   - (<em>文字列</em>) documentオブジェクトの場合。</li>
	<li>false        - (<em>真偽値</em>) undefined、null、NaN、あるいは、上記のどれでもない場合。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myString = <span class="st0">'hello'</span>;
$type<span class="br0">(</span>myString<span class="br0">)</span>; <span class="co1">//戻り値："string".</span></pre>
</div>
<div id="menu" class="span-2 last">
<h4 class="menu-item"><a href="#Core">Core</a></h4>
<div class="menu-item"><a href="#chk">chk</a></div>
<div class="menu-item"><a href="#clear">clear</a></div>
<div class="menu-item"><a href="#defined">defined</a></div>
<div class="menu-item"><a href="#arguments">arguments</a></div>
<div class="menu-item"><a href="#empty">empty</a></div>
<div class="menu-item"><a href="#lambda">lambda</a></div>
<div class="menu-item"><a href="#extend">extend</a></div>
<div class="menu-item"><a href="#merge">merge</a></div>
<div class="menu-item"><a href="#each">each</a></div>
<div class="menu-item"><a href="#pick">pick</a></div>
<div class="menu-item"><a href="#random">random</a></div>
<div class="menu-item"><a href="#splat">splat</a></div>
<div class="menu-item"><a href="#time">time</a></div>
<div class="menu-item"><a href="#try">try</a></div>
<div class="menu-item"><a href="#type">type</a></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>152</wp:post_id>
		<wp:post_date><![CDATA[2008-10-23 00:53:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-10-22 15:53:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[core]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="core"><![CDATA[Core]]></category>
		<category domain="category" nicename="mootools"><![CDATA[MooTools]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Browser</title>
		<link>https://takahashifumiki.com/web/mootools/163/</link>
		<pubDate>Wed, 22 Oct 2008 15:55:39 +0000</pubDate>
		<dc:creator><![CDATA[takahashi_fumiki]]></dc:creator>
		<guid isPermaLink="false">https://takahashifumiki.com/?p=163</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="main" class="l-border r-border span-15">
<h1 id="Browser"><a href="#Browser">Hash: Browser</a></h1>
<p class="description">ブラウザとプラットフォームを判定するために、幾つかのブラウザのプロパティがBrowserオブジェクトに設定されています。</p>

<h3>機能別:</h3>
<ul>
	<li>Browser.Features.xpath - (真偽値) ブラウザがXPathを用いたDOMクエリをサポートしていればtrue。</li>
	<li>Browser.Features.xhr - (<em>真偽値</em>) ブラウザがネイティブでXMLHTTPオブジェクトをサポートしていればtrue。</li>
</ul>
<h3>ブラウザ・エンジン別:</h3>
<ul>
	<li>Browser.Engine.trident - (<em>真偽値</em>) 現在のブラウザがtridentエンジンをサポートしていればtrue（例：Internet Explorer）</li>
	<li>Browser.Engine.gecko - (<em>真偽値</em>) 現在のブラウザがgeckoエンジンをサポートしてればtrue（例：FirefoxなどのMozillaブラウザ）。</li>
	<li>Browser.Engine.webkit - (<em>真偽値</em>) 現在のブラウザがwebkitエンジンをサポートしていればtrue（例：Safari、Google Chrome、Konqueror）。</li>
	<li>Browser.Engine.presto - (<em>真偽値</em>) 現在のブラウザがprestoエンジンをサポートしていればtrue（例：Opera 9）。</li>
	<li>Browser.Engine.name - (<em>文字列</em>) ブラウザ・エンジンの名前。</li>
	<li>Browser.Engine.version - (<em>数</em>) ブラウザ・エンジンのバージョン（例：950）</li>
	<li>Browser.Plugins.Flash.version - (<em>数</em>) インストールされているflashプラグインのメジャーバージョン。</li>
	<li>Browser.Plugins.Flash.build - (<em>数</em>) インストールされているflashプラグインの詳細バージョン。</li>
</ul>
<h3>プラットフォーム別:</h3>
<ul>
	<li>Browser.Platform.mac - (<em>真偽値</em>) プラットフォームがMacならtrue。</li>
	<li>Browser.Platform.win - (<em>真偽値</em>) プラットフォームがWindowsならtrue。</li>
	<li>Browser.Platform.linux - (<em>真偽値</em>) プラットフォームがLinuxならtrue。</li>
	<li>Browser.Platform.ipod - (<em>真偽値</em>) プラットフォームがiPod touch、iPhoneならtrue。</li>
	<li>Browser.Platform.other - (<em>真偽値</em>) プラットフォームが上記のどれでもなければtrue。</li>
	<li>Browser.Platform.name - (<em>文字列</em>) プラットフォームの名前。</li>
</ul>
<h3>注意:</h3>
<ul>
	<li>ブラウザ・エンジンの判定は、そのエンジンに特異的な要素から判定しています。</li>
</ul>
</div>
<div id="menu" class="span-2 last">
<h4 class="menu-item"><a href="#Browser">Browser</a></h4>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>163</wp:post_id>
		<wp:post_date><![CDATA[2008-10-23 00:55:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-10-22 15:55:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[browser]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="core"><![CDATA[Core]]></category>
		<category domain="category" nicename="mootools"><![CDATA[MooTools]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Array</title>
		<link>https://takahashifumiki.com/web/mootools/178/</link>
		<pubDate>Thu, 23 Oct 2008 08:30:11 +0000</pubDate>
		<dc:creator><![CDATA[takahashi_fumiki]]></dc:creator>
		<guid isPermaLink="false">https://takahashifumiki.com/?p=178</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="main" class="l-border r-border span-15">
<h1 id="Array"><a href="#Array">Native: Array</a></h1>
<p class="description">一連の配列メソッドです。</p>

<h3>参考情報:</h3>
<ul>
	<li><a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array">MDC array</a></li>
</ul>
<h2 id="Array:each"><a href="#Array:each">Arrayメソッド: each</a></h2>
<p class="description">配列の各要素に対して関数を呼び出します。</p>

<h3>構文:</h3>
<pre class="javascript">myarray.<span class="me1">each</span><span class="br0">(</span>fn<span class="br0">[</span>, bind<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>fn   - (関数) 配列の各要素に対して実行される関数。この関数にはその要素自身と配列内でのインデックスが渡されます。</li>
	<li>bind - (オブジェクト, オプション) 関数内において'this'として参照したいオブジェクト。詳しくは<a href="/docs/Native/Function/#Function:bind">関数:bind</a>を参照のこと。</li>
</ol>
<h4>引数: fn</h4>
<h5>構文</h5>
<pre class="javascript">fn<span class="br0">(</span><span class="kw1">item</span>, index, array<span class="br0">)</span></pre>
<h5>引数:</h5>
<ol>
	<li>item   - (<em>いろいろ</em>) 配列内における現在の要素。</li>
	<li>index  - (<em>数</em>) 配列内における現在の要素のインデックス。</li>
	<li>array - (<em>配列</em>) 実際の配列.</li>
</ol>
<h3>例:</h3>
<pre class="javascript"><span class="co1">//"0 = apple", "1 = banana", という具合にアラート:</span>
<span class="br0">[</span><span class="st0">'apple'</span>, <span class="st0">'banana'</span>, <span class="st0">'lemon'</span><span class="br0">]</span>.<span class="me1">each</span><span class="br0">(array</span><span class="br0">(</span><span class="kw1">item</span>, index<span class="br0">)</span><span class="br0">{</span>

    <span class="kw3">alert</span><span class="br0">(</span>index + <span class="st0">" = "</span> + <span class="kw1">item</span><span class="br0">)</span>;
<span class="br0">}</span><span class="br0">)</span>; <span class="co1">//オプションの第2引数であるbindは使用していません。</span></pre>
<h3>参考情報:</h3>
<ul>
	<li><a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:forEach">MDC 配列:forEach</a></li>
</ul>
<h3>注意点:</h3>
<ul>
	<li>このメソッドは<a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:forEach">MDC 配列:forEach</a>をネイティブにサポートしていないブラウザでだけ利用可能です。</li>
</ul>
<h2 id="Array:every"><a href="#Array:every">Arrayメソッド: every</a></h2>
<p class="description">配列のすべての要素が提供されたテスト関数の条件を満たしていれば、trueを返します。
このメソッドは<a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:every">配列:every</a> をネイティブにサポートしていないブラウザでだけ有効になります。
<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> allPassed = myarray.<span class="me1">every</span><span class="br0">(</span>fn<span class="br0">[</span>, bind<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>fn   - (関数) 各要素をテストするための関数。</li>
	<li>bind - (オブジェクト, オプション) 関数内で'this'として指定したいオブジェクト。より詳しくは<a href="/docs/Native/Function/#Function:bind">関数:bind</a>を参照のこと。</li>
</ol>
<h4>引数: fn</h4>
<h5>構文:</h5>
<pre class="javascript">fn<span class="br0">(</span><span class="kw1">item</span>, index, array<span class="br0">)</span></pre>
<h5>引数:</h5>
<ol>
	<li>item   - (<em>いろいろ</em>) 配列内における現在の要素。</li>
	<li>index  - (<em>数</em>) 配列内における現在の要素のインデックス。</li>
	<li>array - (<em>配列</em>) 実際の配列.</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>真偽値</em>) 配列内のすべての要素が与えられたテスト関数の条件を満たすならばtrue。それ以外はfalseを返す。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> areAllBigEnough = <span class="br0">[</span><span class="nu0">10</span>, <span class="nu0">4</span>, <span class="nu0">25</span>, <span class="nu0">100</span><span class="br0">]</span>.<span class="me1">every</span><span class="br0">(function</span><span class="br0">(</span><span class="kw1">item</span>, index<span class="br0">)</span><span class="br0">{</span>

    <span class="kw1">return</span> <span class="kw1">item</span> &gt; <span class="nu0">20</span>;
<span class="br0">}</span><span class="br0">)</span>; <span class="co1">//areAllBigEnough = false</span></pre>
<h3>参考情報:</h3>
<ul>
	<li><a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:every">MDC 配列:every</a></li>
</ul>
<h2 id="Array:filter"><a href="#Array:filter">Arrayメソッド: filter</a></h2>
<p class="description">ある配列の要素に対してフィルター関数を適用し、trueを返した要素からなる新しい配列を作成します。
このメソッドは<a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:filter">配列:filter</a>をネイティブにサポートしないブラウザでだけ有効です。
<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> filteredarray = myarray.<span class="me1">filter</span><span class="br0">(</span>fn<span class="br0">[</span>, bind<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>fn   - (<em>関数</em>) 配列の各要素をテストする関数。この関数には要素それ自身と要素の配列内におけるインデックスが渡されます。</li>
	<li>bind - (<em>オブジェクト</em>, オプション) 関数内で'this'として参照したいオブジェクト。詳しくは<a href="/docs/Native/Function/#Function:bind">関数:bind</a>を参照のこと。</li>
</ol>
<h4>引数: fn</h4>
<h5>構文:</h5>
<pre class="javascript">fn<span class="br0">(</span><span class="kw1">item</span>, index, array<span class="br0">)</span></pre>
<h5>引数:</h5>
<ol>
	<li>item   - (<em>いろいろ</em>) 配列における現在の要素。</li>
	<li>index  - (<em>数</em>) 現在の要素の配列内でのインデックス。</li>
	<li>array- (<em>配列</em>) 実際の配列.</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>配列</em>) 新たにフィルタリングされた配列。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> biggerThanTwenty = <span class="br0">[</span><span class="nu0">10</span>, <span class="nu0">3</span>, <span class="nu0">25</span>, <span class="nu0">100</span><span class="br0">]</span>.<span class="me1">filter</span><span class="br0">(array</span><span class="br0">(</span><span class="kw1">item</span>, index<span class="br0">)</span><span class="br0">{</span>

    <span class="kw1">return</span> <span class="kw1">item</span> &gt; <span class="nu0">20</span>;
<span class="br0">}</span><span class="br0">)</span>; <span class="co1">//biggerThanTwenty = [25, 100]</span></pre>
<h3>参考情報:</h3>
<ul>
	<li><a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:filter">MDC 配列:filter</a></li>
</ul>
<h2 id="Array:clean"><a href="#Array:clean">Arrayメソッド: clean</a></h2>
<p class="description">ある配列から、定義済みの要素 (nullやundefinedではない)のみからなる新しい配列を作成します。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> cleanedarray= myarray.<span class="me1">clean</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(配列) フィルタリングされた新しい配列.</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myarray = <span class="br0">[</span><span class="kw2">null</span>, <span class="nu0">1</span>, <span class="nu0">0</span>, <span class="kw2">true</span>, <span class="kw2">false</span>, <span class="st0">"foo"</span>, undefined, <span class="st0">""</span><span class="br0">]</span>;
myarray.<span class="me1">clean</span><span class="br0">(</span><span class="br0">)</span> <span class="co1">// 戻り値: [1, 0, true, false, "foo", ""]</span></pre>
<h2 id="Array:indexOf"><a href="#Array:indexOf">Arrayメソッド: indexOf</a></h2>
<p class="description">特定の値に等しい要素がその配列内で一番はじめに出現するインデックスを返し、見つからなかった場合は-1を返します。
このメソッドは<a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:indexOf">配列:indexOf</a>をネイティブにサポートしないブラウザでのみ有効です。
<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> index = myarray.<span class="me1">indexOf</span><span class="br0">(</span><span class="kw1">item</span><span class="br0">[</span>, from<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(<em>数</em>) 特定の値に等しい、配列内で一番はじめの要素のインデックス。見つからなかったら-1を返します。</li>
</ul>
<h3>引数:</h3>
<ol>
	<li>item - (<em>オブジェクト</em>) 配列内で検索される要素。</li>
	<li>from - (<em>数</em>, オプション: 初期値0) 検索を開始する配列のインデックス。</li>
</ol>
<h3>例:</h3>
<pre class="javascript"><span class="br0">[</span><span class="st0">'apple'</span>, <span class="st0">'lemon'</span>, <span class="st0">'banana'</span><span class="br0">]</span>.<span class="me1">indexOf</span><span class="br0">(</span><span class="st0">'lemon'</span><span class="br0">)</span>; <span class="co1">//戻り値 1</span>

<span class="br0">[</span><span class="st0">'apple'</span>, <span class="st0">'lemon'</span><span class="br0">]</span>.<span class="me1">indexOf</span><span class="br0">(</span><span class="st0">'banana'</span><span class="br0">)</span>; <span class="co1">//戻り値 -1</span></pre>
<h3>参考情報:</h3>
<ul>
	<li><a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:indexOf">MDC 配列:indexOf</a></li>
</ul>
<h2 id="Array:map"><a href="#Array:map">Arrayメソッド: map</a></h2>
<p class="description">配列内のすべての要素に対して渡された関数を実行し、その戻り値からなる新しい配列を作成します。
このメソッドは<a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:map">配列:map</a>をネイティブにサポートしていないブラウザでのみ有効です。
<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> mappedarray = myarray.<span class="me1">map</span><span class="br0">(</span>fn<span class="br0">[</span>, bind<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>fn   - (<em>関数</em>) 新しい配列へ要素を提供するために現在の配列の要素に対して実行するための関数。</li>
	<li>bind - (<em>オブジェクト</em>, オプション) 関数内で'this'として参照したいオブジェクト。詳しくは<a href="/docs/Native/Function/#Function:bind">関数:bind</a>を参照のこと。</li>
</ol>
<h4>引数: fn</h4>
<h5>構文:</h5>
<pre class="javascript">fn<span class="br0">(</span><span class="kw1">item</span>, index, array<span class="br0">)</span></pre>
<h5>引数:</h5>
<ol>
	<li>item   - (<em>いろいろ</em>) 配列内の現在の要素。</li>
	<li>index  - (<em>数</em>) 現在の要素の配列内のインデックス。</li>
	<li>array - (<em>配列</em>) 実際の配列。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(配列) マッピングされた新しい配列。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> timesTwo = <span class="br0">[</span><span class="nu0">1</span>, <span class="nu0">2</span>, <span class="nu0">3</span><span class="br0">]</span>.<span class="me1">map</span><span class="br0">(array</span><span class="br0">(</span><span class="kw1">item</span>, index<span class="br0">)</span><span class="br0">{</span>

    <span class="kw1">return</span> <span class="kw1">item</span> * <span class="nu0">2</span>;
<span class="br0">}</span><span class="br0">)</span>; <span class="co1">//timesTwo = [2, 4, 6];</span></pre>
<h3>参考情報:</h3>
<ul>
	<li><a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:map">MDC 配列:map</a></li>
</ul>
<h2 id="Array:some"><a href="#Array:some">Arrayメソッド: some</a></h2>
<p class="description">配列内の少なくとも一つの要素が、テスト関数の条件を満たすとき、trueを返します。
このメソッドは<a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:some">配列:some</a>をネイティブにサポートしないブラウザに対してのみ提供されます。
<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> somePassed = myarray.<span class="me1">some</span><span class="br0">(</span>fn<span class="br0">[</span>, bind<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(<em>真偽値</em>) 配列内の要素のうち、少なくとも一つがテスト関数の求める要件を満たせばtrue。それ以外はfalseを返す。</li>
</ul>
<h3>引数:</h3>
<ol>
	<li>fn   - (<em>関数</em>) 各要素に対してテストを行う関数。この関数には要素それ自身と配列内でのインデックスが渡されます。</li>
	<li>bind - (<em>オブジェクト</em>, オプション) 関数内で'this'として参照したいオブジェクト。詳細は<a href="/docs/Native/Function/#Function:bind">関数:bind</a>を参照のこと。</li>
</ol>
<h4>引数: fn</h4>
<h5>構文:</h5>
<pre class="javascript">fn<span class="br0">(</span><span class="kw1">item</span>, index, array<span class="br0">)</span></pre>
<h5>引数:</h5>
<ol>
	<li>item   - (<em>いろいろ</em>) 配列内における現在の要素。</li>
	<li>index  - (<em>数</em>) 現在の要素の配列内におけるインデックス。</li>
	<li>array - (<em>配列</em>) 実際の配列。</li>
</ol>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> isAnyBigEnough = <span class="br0">[</span><span class="nu0">10</span>, <span class="nu0">4</span>, <span class="nu0">25</span>, <span class="nu0">100</span><span class="br0">]</span>.<span class="me1">some</span><span class="br0">(array</span><span class="br0">(</span><span class="kw1">item</span>, index<span class="br0">)</span><span class="br0">{</span>

    <span class="kw1">return</span> <span class="kw1">item</span> &gt; <span class="nu0">20</span>;
<span class="br0">}</span><span class="br0">)</span>; <span class="co1">//isAnyBigEnough = true</span></pre>
<h3>参考情報:</h3>
<ul>
	<li><a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:some">MDC 配列:some</a></li>
</ul>
<h2 id="Array:associate"><a href="#Array:associate">Arrayメソッド: associate</a></h2>
<p class="description">配列を元に、渡されたキーワードと配列の現在の要素をキー-値のペアにしたオブジェクトを作成します。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> associated = myarray.<span class="me1">associate</span><span class="br0">(</span>obj<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>obj - (<em>配列</em>) この要素が新たに生成されるオブジェクトのキーになります。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) あらたに作成されたオブジェクト.</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> animals = <span class="br0">[</span><span class="st0">'Cow'</span>, <span class="st0">'Pig'</span>, <span class="st0">'Dog'</span>, <span class="st0">'Cat'</span><span class="br0">]</span>;

<span class="kw2">var</span> sounds = <span class="br0">[</span><span class="st0">'Moo'</span>, <span class="st0">'Oink'</span>, <span class="st0">'Woof'</span>, <span class="st0">'Miao'</span><span class="br0">]</span>;
sounds.<span class="me1">associate</span><span class="br0">(</span>animals<span class="br0">)</span>;

<span class="co1">//戻り値： {'Cow': 'Moo', 'Pig': 'Oink', 'Dog': 'Woof', 'Cat': 'Miao'}</span></pre>
<h2 id="Array:link"><a href="#Array:link">Arrayメソッド: link</a></h2>
<p class="description">値を割り当てるためのキー-関数ペアを持つオブジェクトを受け取ります。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> result = array.<span class="me1">link</span><span class="br0">(array</span>, object<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>object - (<em>オブジェクト</em>)  キー-関数のペアを持つオブジェクトで、異なるキーを持つ値を結びつけるテンプレートとなります。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(オブジェクト) 新たに紐づけられたオブジェクト.</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> el = document.<span class="me1">createElement</span><span class="br0">(</span><span class="st0">'div'</span><span class="br0">)</span>;
<span class="kw2">var</span> arr2 = <span class="br0">[</span><span class="nu0">100</span>, <span class="st0">'Hello'</span>, <span class="br0">{</span>foo: <span class="st0">'bar'</span><span class="br0">}</span>, el, <span class="kw2">false</span><span class="br0">]</span>;
arr2.<span class="me1">link</span><span class="br0">(</span><span class="br0">{</span>myNumber: Number.<span class="me1">type</span>, myElement: Element.<span class="me1">type</span>, myobject: object.<span class="me1">type</span>, mystring: string.<span class="me1">type</span>, myboolean: $defined<span class="br0">}</span><span class="br0">)</span>;

<span class="co1">//戻り値： {myNumber: 100, myElement: el, myobject</span><span class="co1">: {foo: 'bar'}, mystring</span><span class="co1">: 'Hello', myboolean</span><span class="co1">: false}</span></pre>
<h2 id="Array:contains"><a href="#Array:contains">Arrayメソッド: contains</a></h2>
<p class="description">配列が任意の要素を含んでいるかテストします。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> inarray = myarray.<span class="me1">contains</span><span class="br0">(</span><span class="kw1">item</span><span class="br0">[</span>, from<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>item - (<em>オブジェクト</em>) 配列内で検索したい要素。</li>
	<li>from - (<em>数</em>, オプション: 初期値0) 配列内で検索を始める位置。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>真偽値</em>) 配列が特定の要素を含んでいたらtrue。それ以外はfalseを返します。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="br0">[</span><span class="st0">"a"</span>,<span class="st0">"b"</span>,<span class="st0">"c"</span><span class="br0">]</span>.<span class="me1">contains</span><span class="br0">(</span><span class="st0">"a"</span><span class="br0">)</span>; <span class="co1">//trueを返す</span>

<span class="br0">[</span><span class="st0">"a"</span>,<span class="st0">"b"</span>,<span class="st0">"c"</span><span class="br0">]</span>.<span class="me1">contains</span><span class="br0">(</span><span class="st0">"d"</span><span class="br0">)</span>; <span class="co1">//falseを返す</span></pre>
<h3>参考情報:</h3>
<ul>
	<li><a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:indexOf">MDC 配列:indexOf</a></li>
</ul>
<h2 id="Array:extend"><a href="#Array:extend">Arrayメソッド: extend</a></h2>
<p class="description">配列にもう一つの配列の要素をすべて含めて拡張します。</p>

<h3>構文:</h3>
<pre class="javascript">myarray.<span class="me1">extend</span><span class="br0">(array</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>array - (配列) この配列に対して、その要素を含めたい配列。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(配列) 拡張されたこの配列。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> animals = <span class="br0">[</span><span class="st0">'Cow'</span>, <span class="st0">'Pig'</span>, <span class="st0">'Dog'</span><span class="br0">]</span>;
animals.<span class="me1">extend</span><span class="br0">(</span><span class="br0">[</span><span class="st0">'Cat'</span>, <span class="st0">'Dog'</span><span class="br0">]</span><span class="br0">)</span>; <span class="co1">//animals = ['Cow', 'Pig', 'Dog', 'Cat', 'Dog'];</span></pre>
<h2 id="Array:getLast"><a href="#Array:getLast">Arrayメソッド: getLast</a></h2>
<p class="description">配列から最後の要素を取得して返します。</p>

<h3>構文:</h3>
<pre class="javascript">myarray.<span class="me1">getLast</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(<em>いろいろ</em>) この配列の最後の要素。</li>
	<li>(<em>null</em>) この配列が空っぽならばnullを返します。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="br0">[</span><span class="st0">'Cow'</span>, <span class="st0">'Pig'</span>, <span class="st0">'Dog'</span>, <span class="st0">'Cat'</span><span class="br0">]</span>.<span class="me1">getLast</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//戻り値： 'Cat'</span></pre>
<h2 id="Array:getRandom"><a href="#Array:getRandom">Arrayメソッド: getRandom</a></h2>
<p class="description">配列からランダムな要素を返します。</p>

<h3>構文:</h3>
<pre class="javascript">myarray.<span class="me1">getRandom</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(いろいろ) 配列からランダムに取り出された要素。この配列が空ならば、nullを返します。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="br0">[</span><span class="st0">'Cow'</span>, <span class="st0">'Pig'</span>, <span class="st0">'Dog'</span>, <span class="st0">'Cat'</span><span class="br0">]</span>.<span class="me1">getRandom</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//要素の中から任意のものを返します。</span></pre>
<h2 id="Array:include"><a href="#Array:include">Arrayメソッド: include</a></h2>
<p class="description">配列に要素を渡し、配列内に同じ要素が存在しなければ追加します。（オブジェクトのタイプを重視します）</p>

<h3>構文:</h3>
<pre class="javascript">myarray.<span class="me1">include</span><span class="br0">(</span><span class="kw1">item</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>item - (<em>オブジェクト</em>) 配列に追加したい要素。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>配列</em>) 新しい要素が追加された配列。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="br0">[</span><span class="st0">'Cow'</span>, <span class="st0">'Pig'</span>, <span class="st0">'Dog'</span><span class="br0">]</span>.<span class="me1">include</span><span class="br0">(</span><span class="st0">'Cat'</span><span class="br0">)</span>; <span class="co1">//戻り値： ['Cow', 'Pig', 'Dog', 'Cat']</span>

<span class="br0">[</span><span class="st0">'Cow'</span>, <span class="st0">'Pig'</span>, <span class="st0">'Dog'</span><span class="br0">]</span>.<span class="me1">include</span><span class="br0">(</span><span class="st0">'Dog'</span><span class="br0">)</span>; <span class="co1">//戻り値： ['Cow', 'Pig', 'Dog']</span></pre>
<h2 id="Array:combine"><a href="#Array:combine">Arrayメソッド: combine</a></h2>
<p class="description">ある配列に別の配列の要素を追加します。オブジェクトの型を重視し、重複は許可しません。</p>

<h3>構文:</h3>
<pre class="javascript">myarray.<span class="me1">combine</span><span class="br0">(function</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>array- (配列) 元の配列に追加したい要素を持つ配列。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(配列) 新しい要素を追加された配列。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> animals = <span class="br0">[</span><span class="st0">'Cow'</span>, <span class="st0">'Pig'</span>, <span class="st0">'Dog'</span><span class="br0">]</span>;
animals.<span class="me1">combine</span><span class="br0">(</span><span class="br0">[</span><span class="st0">'Cat'</span>, <span class="st0">'Dog'</span><span class="br0">]</span><span class="br0">)</span>; <span class="co1">//animals = ['Cow', 'Pig', 'Dog', 'Cat'];</span></pre>
<h2 id="Array:erase"><a href="#Array:erase">Arrayメソッド: erase</a></h2>
<p class="description">配列から該当する要素を削除します。</p>

<h3>構文:</h3>
<pre class="javascript">myarray.<span class="me1">erase</span><span class="br0">(</span><span class="kw1">item</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>item - (オブジェクト) 配列内で検索したい要素。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(配列) 該当する要素を取り除かれた配列。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="br0">[</span><span class="st0">'Cow'</span>, <span class="st0">'Pig'</span>, <span class="st0">'Dog'</span>, <span class="st0">'Cat'</span>, <span class="st0">'Dog'</span><span class="br0">]</span>.<span class="me1">erase</span><span class="br0">(</span><span class="st0">'Dog'</span><span class="br0">)</span> <span class="co1">//returns ['Cow', 'Pig', 'Cat']</span>

<span class="br0">[</span><span class="st0">'Cow'</span>, <span class="st0">'Pig'</span>, <span class="st0">'Dog'</span><span class="br0">]</span>.<span class="me1">erase</span><span class="br0">(</span><span class="st0">'Cat'</span><span class="br0">)</span> <span class="co1">//戻り値： ['Cow', 'Pig', 'Dog']</span></pre>
<h2 id="Array:empty"><a href="#Array:empty">Arrayメソッド: empty</a></h2>
<p class="description">配列を空っぽにします。</p>

<h3>構文:</h3>
<pre class="javascript">myarray.<span class="me1">empty</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(配列) 空になった配列</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myarray= <span class="br0">[</span><span class="st0">'old'</span>, <span class="st0">'data'</span><span class="br0">]</span>;
myarray.<span class="me1">empty</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//</span>myarray<span class="co1">は []になりました。</span></pre>
<h2 id="Array:flatten"><a href="#Array:flatten">Arrayメソッド: flatten</a></h2>
<p class="description">複数の階層構造を持つ配列を平坦な配列に変換します。</p>

<h3>構文:</h3>
<pre class="javascript">myarray.<span class="me1">flatten</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(<em>配列</em>) 新しい平坦な配列.</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myarray = <span class="br0">[</span><span class="nu0">1</span>,<span class="nu0">2</span>,<span class="nu0">3</span>,<span class="br0">[</span><span class="nu0">4</span>,<span class="nu0">5</span>, <span class="br0">[</span><span class="nu0">6</span>,<span class="nu0">7</span><span class="br0">]</span><span class="br0">]</span>, <span class="br0">[</span><span class="br0">[</span><span class="br0">[</span><span class="nu0">8</span><span class="br0">]</span><span class="br0">]</span><span class="br0">]</span><span class="br0">]</span>;

<span class="kw2">var</span> newarray = myarray.<span class="me1">flatten</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//newarray</span><span class="co1">jは[1,2,3,4,5,6,7,8]になりました。</span></pre>
<h2 id="Array:hexToRgb"><a href="#Array:hexToRgb">Arrayメソッド: hexToRgb</a></h2>
<p class="description">16進数のカラー値をRGBに変換します。渡される配列は次のような16進数カラーフォーマットでなければなりません。
['FF','FF','FF']
<h3>構文:</h3>
<pre class="javascript">myarray.<span class="me1">hexToRgb</span><span class="br0">(</span><span class="br0">[array</span><span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>array - (真偽値, オプション) trueが渡された場合、文字列 (eg. "rgb(255,51,0)")の代わりに配列(eg. [255, 51, 0])が出力されます。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(文字列) RGBのカラー値を示す文字列。</li>
	<li>(配列) もし配列フラグがセットされていたら、配列が代わりに返されます。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="br0">[</span><span class="st0">'11'</span>,<span class="st0">'22'</span>,<span class="st0">'33'</span><span class="br0">]</span>.<span class="me1">hexToRgb</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//戻り値: "rgb(17,34,51)"</span>

<span class="br0">[</span><span class="st0">'11'</span>,<span class="st0">'22'</span>,<span class="st0">'33'</span><span class="br0">]</span>.<span class="me1">hexToRgb</span><span class="br0">(</span><span class="kw2">true</span><span class="br0">)</span>; <span class="co1">//戻り値: [17, 34, 51]</span></pre>
<h3>参考情報:</h3>
<ul>
	<li><a href="/docs/Native/String/#hexToRgb">文字列:hexToRgb</a></li>
</ul>
<h2 id="Array:rgbToHex"><a href="#Array:rgbToHex">Arrayメソッド: rgbToHex</a></h2>
<p class="description">RGBカラーの値を16進数に変換します。渡される配列は次のようなRGBカラー形式の配列でなくてはなりません。
[255,255,255]または [255,255,255,1]
<h3>構文:</h3>
<pre class="javascript">myarray.<span class="me1">rgbToHex</span><span class="br0">(</span><span class="br0">[array</span><span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>array - (真偽値, オプション) trueが渡された場合、文字列(eg. "#ff3300")の代わりに配列 (eg. ['ff','33','00'])を返します。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>文字列</em>) 16進数でカラー値を表現する文字列。RGB配列の４番目のAが0にセットされていた場合は、transparent文字列を返します。</li>
	<li>(<em>配列</em>) 配列フラグがtrueならば、配列が代わりに返されます。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="br0">[</span><span class="nu0">17</span>,<span class="nu0">34</span>,<span class="nu0">51</span><span class="br0">]</span>.<span class="me1">rgbToHex</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//戻り値： "#112233"</span>

<span class="br0">[</span><span class="nu0">17</span>,<span class="nu0">34</span>,<span class="nu0">51</span><span class="br0">]</span>.<span class="me1">rgbToHex</span><span class="br0">(</span><span class="kw2">true</span><span class="br0">)</span>; <span class="co1">//戻り値： ['11','22','33']</span>
<span class="br0">[</span><span class="nu0">17</span>,<span class="nu0">34</span>,<span class="nu0">51</span>,<span class="nu0">0</span><span class="br0">]</span>.<span class="me1">rgbToHex</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//戻り値： "transparent"</span></pre>
<h3>参考情報:</h3>
<ul>
	<li><a href="/docs/Native/String/#rgbToHex">文字列:rgbToHex</a></li>
</ul>
<h1 id="Utility"><a href="#Utility">役に立つ関数</a></h1>
<h2 id="A" class="description"><a href="#A">関数: $A</a></h2>
<p class="description">配列のコピーを作成します。DOMノードコレクション、arguementsオブジェクトといった反復処理が可能なオブジェクトに配列のプロトタイプを適用したい場合に役立ちます。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> copiedArray = $A<span class="br0">(</span>iterable<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>iterable - (<em>配列</em>) コピーする反復可能な要素。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>配列</em>) 新たにコピーされた配列</li>
</ul>
<h3>例:</h3>
<h4>引数に配列を適用する:</h4>
<pre class="javascript">function myfunction<span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
    $A<span class="br0">(</span>arguments<span class="br0">)</span>.<span class="me1">each</span><span class="br0">(function</span><span class="br0">(</span>argument, index<span class="br0">)</span><span class="br0">{</span>

        <span class="kw3">alert</span><span class="br0">(</span>argument<span class="br0">)</span>;
    <span class="br0">}</span><span class="br0">)</span>;
<span class="br0">}</span>;
myfunction<span class="br0">(</span><span class="st0">"One"</span>, <span class="st0">"Two"</span>, <span class="st0">"Three"</span><span class="br0">)</span>; <span class="co1">//"One"、"Two"、"Three"の順にアラート。</span></pre>
<h4>配列をコピーする:</h4>
<pre class="javascript"><span class="kw2">var</span> anArray = <span class="br0">[</span><span class="nu0">0</span>, <span class="nu0">1</span>, <span class="nu0">2</span>, <span class="nu0">3</span>, <span class="nu0">4</span><span class="br0">]</span>;

<span class="kw2">var</span> copiedArray = $A<span class="br0">(</span>anArray<span class="br0">)</span>; <span class="co1">//戻り値： [0, 1, 2, 3, 4].</span></pre>
</div>
<div id="menu" class="span-2 last">
<h4 class="menu-item"><a href="#Array">Array</a></h4>
<div class="menu-item"><a href="#Array:each">each</a></div>
<div class="menu-item"><a href="#Array:every">every</a></div>
<div class="menu-item"><a href="#Array:filter">filter</a></div>
<div class="menu-item"><a href="#Array:clean">clean</a></div>
<div class="menu-item"><a href="#Array:indexOf">indexOf</a></div>
<div class="menu-item"><a href="#Array:map">map</a></div>
<div class="menu-item"><a href="#Array:some">some</a></div>
<div class="menu-item"><a href="#Array:associate">associate</a></div>
<div class="menu-item"><a href="#Array:link">link</a></div>
<div class="menu-item"><a href="#Array:contains">contains</a></div>
<div class="menu-item"><a href="#Array:extend">extend</a></div>
<div class="menu-item"><a href="#Array:getLast">getLast</a></div>
<div class="menu-item"><a href="#Array:getRandom">getRandom</a></div>
<div class="menu-item"><a href="#Array:include">include</a></div>
<div class="menu-item"><a href="#Array:combine">combine</a></div>
<div class="menu-item"><a href="#Array:erase">erase</a></div>
<div class="menu-item"><a href="#Array:empty">empty</a></div>
<div class="menu-item"><a href="#Array:flatten">flatten</a></div>
<div class="menu-item"><a href="#Array:hexToRgb">hexToRgb</a></div>
<div class="menu-item"><a href="#Array:rgbToHex">rgbToHex</a></div>
<h4 class="menu-item"><a href="#Utility">Utility</a></h4>
<div class="menu-item"><a href="#A">A</a></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>178</wp:post_id>
		<wp:post_date><![CDATA[2008-10-23 17:30:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-10-23 08:30:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[array]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mootools"><![CDATA[MooTools]]></category>
		<category domain="category" nicename="native"><![CDATA[Native]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Function</title>
		<link>https://takahashifumiki.com/web/mootools/183/</link>
		<pubDate>Fri, 24 Oct 2008 06:04:11 +0000</pubDate>
		<dc:creator><![CDATA[takahashi_fumiki]]></dc:creator>
		<guid isPermaLink="false">https://takahashifumiki.com/?p=183</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="main" class="l-border r-border span-15">
<h1 id="Function"><a href="http://mootools.net/docs/Native/Function#Function">Native: Function</a></h1>
<p class="description">関数のメソッドです。</p>

<h3>参考情報:</h3>
<ul>
	<li><a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Function">MDC Function</a></li>
</ul>
<h2 id="Function:create"><a href="http://mootools.net/docs/Native/Function#Function:create">Functionメソッド: create</a></h2>
<p class="description">他のすべての関数のプロパティで利用される関数クロージャを作るためのベース関数です。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> createdFunction = myFunction.<span class="me1">create</span><span class="br0">(</span><span class="br0">[</span>options<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>[options] - (<em>オブジェクト</em>, オプション) 関数を作成する際に利用するオプション。オプションがなければ、funcionのコピーが作られます。</li>
</ol>
<h4 id="Function:create:options">オプション:</h4>
<ul>
	<li>bind       - (<em>オブジェクト</em>: 初期値＝この関数) 関数内の"this"が参照するオブジェクト。</li>
	<li>event      - (<em>いろいろ</em>: 初期値＝false) trueがセットされていれば、その関数はイベントリスナーとしてふるまい、第1引数にイベントを受け取ります。クラス名がセットされていれば、関数はそのクラスの新しいインスタンスを第1引数として受け取ります（イベントは引数のコンストラクタとして渡されます）。</li>
	<li>arguments  - (<em>いろいろ</em>: 初期値＝標準のarguments) 単一の引数か引数の配列が関数の引数として渡されます。eventとargumentsの両方がオプションに設定されていると、eventが第1引数となり、argumentsがそれに続きます。</li>
	<li>delay      - (<em>数</em>: 初期値＝delayなし) セットすると、戻り値としての関数は設定した時間（ミリ秒単位）だけ遅れて実行され、呼び出されたときにタイマーハンドルを戻り値として返します。</li>
	<li>periodical - (<em>数</em>: 初期値＝定期実行なし) セットすると、戻り値としての関数は設定された間隔（ミリ病単位）で定期的に実行され、呼び出されたときにタイマーハンドルを返します。</li>
	<li>attempt    - (<em>真偽値</em>: 初期値＝false) trueがセットされていれば、戻り値としての関数は、実行してエラーが起きた場合にnullを返します。</li>
</ul>
<h3>戻り値:</h3>
<ul>
	<li>(<em>関数</em>) 渡されたオプションに応じて作成された関数。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myFunction = <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
    <span class="kw3">alert</span><span class="br0">(</span><span class="st0">"I'm a function. :D"</span><span class="br0">)</span>;
<span class="br0">}</span>;

<span class="kw2">var</span> mySimpleFunction = myFunction.<span class="me1">create</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//単なるコピーです</span>

<span class="kw2">var</span> myAdvancedFunction = myFunction.<span class="me1">create</span><span class="br0">(</span><span class="br0">{</span> <span class="co1">//この関数は呼び出されると、attemptの条件にしたがいます</span>
    arguments: <span class="br0">[</span><span class="nu0">0</span>,<span class="nu0">1</span>,<span class="nu0">2</span>,<span class="nu0">3</span><span class="br0">]</span>,
    attempt: <span class="kw2">true</span>,
    delay: <span class="nu0">1000</span>,
    bind: myElement
<span class="br0">}</span><span class="br0">)</span>;</pre>
<h2 id="Function:pass"><a href="http://mootools.net/docs/Native/Function#Function:pass">Functionメソッド: pass</a></h2>
<p class="description">引数とバインドを持ったクロージャを返します。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> newFunction = myFunction.<span class="me1">pass</span><span class="br0">(</span><span class="br0">[</span>args<span class="br0">[</span>, bind<span class="br0">]</span><span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>args - (<em>いろいろ</em>, オプション) 関数に渡される引数（複数の引数を渡したい場合は、配列にすること）</li>
	<li>bind - (<em>オブジェクト</em>, オプション) 関数内で'this'として参照したいオブジェクト。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>関数</em>) 呼び出された時に引数が渡されている関数。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myFunction = <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
    <span class="kw2">var</span> result = <span class="st0">'Passed: '</span>;
    <span class="kw1">for</span> <span class="br0">(</span><span class="kw2">var</span> i = <span class="nu0">0</span>, l = arguments.<span class="me1">length</span>; i &lt; l; i++<span class="br0">)</span><span class="br0">{</span>
        result += <span class="br0">(</span>arguments<span class="br0">[</span>i<span class="br0">]</span> + <span class="st0">' '</span><span class="br0">)</span>;
    <span class="br0">}</span>
    <span class="kw1">return</span> result;
<span class="br0">}</span>
<span class="kw2">var</span> myHello = myFunction.<span class="me1">pass</span><span class="br0">(</span><span class="st0">'hello'</span><span class="br0">)</span>;
<span class="kw2">var</span> myItems = myFunction.<span class="me1">pass</span><span class="br0">(</span><span class="br0">[</span><span class="st0">'peach'</span>, <span class="st0">'apple'</span>, <span class="st0">'orange'</span><span class="br0">]</span><span class="br0">)</span>;

<span class="co1">//これ以降、関数が実行できます:</span>
<span class="kw3">alert</span><span class="br0">(</span>myHello<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>; <span class="co1">//myFunctionには"heloo"が渡されます</span>
<span class="kw3">alert</span><span class="br0">(</span>myItems<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>; <span class="co1">//myFunctionに要素の配列が渡されます</span></pre>
<h2 id="Function:attempt"><a href="http://mootools.net/docs/Native/Function#Function:attempt">Functionメソッド: attempt</a></h2>
<p class="description">関数の実行を試みます。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> result = myFunction.<span class="me1">attempt</span><span class="br0">(</span><span class="br0">[</span>args<span class="br0">[</span>, bind<span class="br0">]</span><span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>args - (<em>いろいろ</em>, オプション) 関数に渡される引数（複数の引数を渡したい場合は配列にすること）。</li>
	<li>bind - (<em>オブジェクト</em>, オプション) 関数内で'this'として参照したいオブジェクト。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>いろいろ</em>) 成功時は関数の戻り値、例外が発生すればnull。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myObject = <span class="br0">{</span>
    <span class="st0">'cow'</span>: <span class="st0">'moo!'</span>
<span class="br0">}</span>;

<span class="kw2">var</span> myFunction = <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
    <span class="kw1">for</span> <span class="br0">(</span><span class="kw2">var</span> i = <span class="nu0">0</span>; i &lt; arguments.<span class="me1">length</span>; i++<span class="br0">)</span><span class="br0">{</span>
        <span class="kw1">if</span><span class="br0">(</span>!<span class="kw1">this</span><span class="br0">[</span>arguments<span class="br0">[</span>i<span class="br0">]</span><span class="br0">]</span><span class="br0">)</span> <span class="kw1">throw</span><span class="br0">(</span><span class="st0">'doh!'</span><span class="br0">)</span>;
    <span class="br0">}</span>
<span class="br0">}</span>;
<span class="kw2">var</span> result = myFunction.<span class="me1">attempt</span><span class="br0">(</span><span class="br0">[</span><span class="st0">'pig'</span>, <span class="st0">'cow'</span><span class="br0">]</span>, myObject<span class="br0">)</span>; <span class="co1">//戻り値： null</span></pre>
<h2 id="Function:bind"><a href="http://mootools.net/docs/Native/Function#Function:bind">Functionメソッド: bind</a></h2>
<p class="description">ターゲットとなる関数内でのthisのスコープを変更して、任意のパラメータにバインドします。</p>

<h3>構文:</h3>
<pre class="javascript">myFunction.<span class="me1">bind</span><span class="br0">(</span><span class="br0">[</span>bind<span class="br0">[</span>, args<span class="br0">[</span>, evt<span class="br0">]</span><span class="br0">]</span><span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>bind - (<em>オブジェクト</em>, オプション) 関数内で'this'として参照したいオブジェクト。</li>
	<li>args - (<em>いろいろ</em>, オプション) 関数に渡される引数（複数の引数を渡したい場合は配列にすること）</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>関数</em>) バインドされた関数。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">function</span> myFunction<span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
    <span class="co1">//ここでの'this'はwindowを参照していて、要素ではありません。</span>
    <span class="co1">//操作したい要素に対してこの関数をバインドしなくてはなりません。</span>
    <span class="kw1">this</span>.<span class="me1">setStyle</span><span class="br0">(</span><span class="st0">'color'</span>, <span class="st0">'red'</span><span class="br0">)</span>;
<span class="br0">}</span>;
<span class="kw2">var</span> myBoundFunction = myFunction.<span class="me1">bind</span><span class="br0">(</span>myElement<span class="br0">)</span>;
myBoundFunction<span class="br0">(</span><span class="br0">)</span>; <span class="co1">//これでmyElementのテキストを赤くできます。</span></pre>
<h2 id="Function:bindWithEvent"><a href="http://mootools.net/docs/Native/Function#Function:bindWithEvent">Functionメソッド: bindWithEvent</a></h2>
<p class="description">ターゲットとなる関数内の'this'のスコープを変更し、任意のパラメータにバインドします。これはまた、イベントに「空間」を作ります。これにより、<a href="http://mootools.net/docs/Element/Element.Event/#Element:addEvent">Element:addEvent</a>とあわせて関数と引数を使うことができるようになります。</p>

<h3>構文:</h3>
<pre class="javascript">myFunction.<span class="me1">bindWithEvent</span><span class="br0">(</span><span class="br0">[</span>bind<span class="br0">[</span>, args<span class="br0">[</span>, evt<span class="br0">]</span><span class="br0">]</span><span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>bind - (<em>オブジェクト</em>, オプション) 関数内で'this'として参照したいオブジェクト。</li>
	<li>args - (<em>いろいろ</em>, オプション) 関数に渡したい引数（複数の引数を渡すときは配列にすること）</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>関数</em>) バインドされた関数。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">function</span> myFunction<span class="br0">(</span>e, add<span class="br0">)</span><span class="br0">{</span>
    <span class="co1">//ここでは'this'が要素ではなく、windowを参照していることに注意してください。</span>
    <span class="co1">//変更したい要素をこの関数にバインドする必要があります。</span>
    <span class="kw1">this</span>.<span class="me1">setStyle</span><span class="br0">(</span><span class="st0">'top'</span>, e.<span class="me1">client</span>.<span class="me1">x</span> + add<span class="br0">)</span>;
<span class="br0">}</span>;
$<span class="br0">(</span>myElement<span class="br0">)</span>.<span class="me1">addEvent</span><span class="br0">(</span><span class="st0">'click'</span>, myFunction.<span class="me1">bindWithEvent</span><span class="br0">(</span>myElement, <span class="nu0">100</span><span class="br0">)</span><span class="br0">)</span>;
<span class="co1">//myElementをクリックすると、マウスカーソルの位置から100ピクセル横に移動します。</span></pre>
<h2 id="Function:delay"><a href="http://mootools.net/docs/Native/Function#Function:delay">Functionメソッド: delay</a></h2>
<p class="description">指定した時間だけ関数の実行を送らせます。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> timeoutID = myFunction.<span class="me1">delay</span><span class="br0">(</span><span class="br0">[</span>delay<span class="br0">[</span>, bind<span class="br0">[</span>, args<span class="br0">]</span><span class="br0">]</span><span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>delay - (<em>数</em>, オプション) 遅らせる時間（ミリ秒単位）。</li>
	<li>bind  - (<em>オブジェクト</em>, オプション) 関数内で'this'として参照したいオブジェクト。</li>
	<li>args  - (<em>いろいろ</em>, オプション) 関数に渡される引数（複数の引数を渡す場合は配列にすること）</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>数</em>) JavaScriptのタイマーID（delayを消去するため）</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myFunction = <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span> <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'moo! Element id is: '</span> + <span class="kw1">this</span>.<span class="me1">id</span><span class="br0">)</span>; <span class="br0">}</span>;
<span class="co1">//50ミリ秒待ってから、myElementがバインドされたmyFunctionを実行します。</span>
myFunction.<span class="me1">delay</span><span class="br0">(</span><span class="nu0">50</span>, myElement<span class="br0">)</span>; <span class="co1">//'moo! Element id is: ...'をアラート</span>

<span class="co1">//1秒待ってからアラートする無名関数</span>
<span class="br0">(</span><span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span> <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'one second later...'</span><span class="br0">)</span>; <span class="br0">}</span><span class="br0">)</span>.<span class="me1">delay</span><span class="br0">(</span><span class="nu0">1000</span><span class="br0">)</span>;</pre>
<h3>参考情報:</h3>
<ul>
	<li> <a href="http://mootools.net/docs/Core/Core/#clear">$clear</a>, <a href="http://developer.mozilla.org/en/docs/DOM:window.setTimeout">MDC setTimeout</a></li>
</ul>
<h2 id="Function:periodical"><a href="http://mootools.net/docs/Native/Function#Function:periodical">Functionメソッド: periodical</a></h2>
<p class="description">指定した間隔を空けて定期的に関数を実行します。定期実行は<a href="http://mootools.net/docs/Core/Core/#clear">$clear</a>関数を利用することで停止できます。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> intervalID = myFunction.<span class="me1">periodical</span><span class="br0">(</span><span class="br0">[</span>period<span class="br0">[</span>, bind<span class="br0">[</span>, args<span class="br0">]</span><span class="br0">]</span><span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>period - (<em>数</em>, オプション) 実行の間隔。</li>
	<li>bind   - (<em>オブジェクト</em>, オプション) 関数内で'this'として参照したいオブジェクト。</li>
	<li>args   - (<em>いろいろ</em>, オプション) 関数に渡される引数（複数の引数が渡される場合は配列にすること）</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>数</em>) インターバルID（定期実行を停止するため）</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> Site = <span class="br0">{</span> counter: <span class="nu0">0</span> <span class="br0">}</span>;
<span class="kw2">var</span> addCount = <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span> <span class="kw1">this</span>.<span class="me1">counter</span>++; <span class="br0">}</span>;
addCount.<span class="me1">periodical</span><span class="br0">(</span><span class="nu0">1000</span>, Site<span class="br0">)</span>; <span class="co1">//Siteに秒数を付け加えます。</span></pre>
<h3>参考情報:</h3>
<ul>
	<li> <a href="http://mootools.net/docs/Core/Core/#clear">$clear</a>, <a href="http://developer.mozilla.org/en/docs/DOM:window.setInterval">MDC setInterval</a></li>
</ul>
<h2 id="Function:run"><a href="http://mootools.net/docs/Native/Function#Function:run">Functionメソッド: run</a></h2>
<p class="description">任意の引数と要素をバインドして関数を実行します。applyと同様ですが、単一の引数をサポートするために引数の順番が逆になっています。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> myFunctionResult = myFunction.<span class="me1">run</span><span class="br0">(</span>args<span class="br0">[</span>, bind<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>args - (<em>いろいろ</em>) 関数に渡したい引数（複数の引数を渡したい場合は、配列にすること）</li>
	<li>bind - (<em>オブジェクト</em>, オプション) 関数内で'this'として参照したいオブジェクト</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>いろいろ</em>) この関数が返す戻り値。</li>
</ul>
<h3>例:</h3>
<h4>引数が一つの場合:</h4>
<pre class="javascript"><span class="kw2">var</span> myFn = <span class="kw2">function</span><span class="br0">(</span>a, b, c<span class="br0">)</span><span class="br0">{</span>
    <span class="kw1">return</span> a + b + c;
<span class="br0">}</span>
<span class="kw2">var</span> myArgs = <span class="br0">[</span><span class="nu0">1</span>,<span class="nu0">2</span>,<span class="nu0">3</span><span class="br0">]</span>;
myFn.<span class="me1">run</span><span class="br0">(</span>myArgs<span class="br0">)</span>; <span class="co1">//戻り値: 6</span></pre>
<h4>要素をバインドした場合:</h4>
<pre class="javascript"><span class="kw2">var</span> myFn = <span class="kw2">function</span><span class="br0">(</span>a, b, c<span class="br0">)</span> <span class="br0">{</span>
    <span class="kw1">return</span> a + b + c + <span class="kw1">this</span>;
<span class="br0">}</span>
<span class="kw2">var</span> myArgs = <span class="br0">[</span><span class="nu0">1</span>,<span class="nu0">2</span>,<span class="nu0">3</span><span class="br0">]</span>;
myFn.<span class="me1">run</span><span class="br0">(</span>myArgs, <span class="nu0">6</span><span class="br0">)</span>; <span class="co1">//戻り値: 12</span></pre>
</div>
<div id="menu" class="span-2 last">
<h4 class="menu-item"><a href="#Function">Function</a></h4>
<div class="menu-item"><a href="#Function:create">create</a></div>
<div class="menu-item"><a href="#Function:pass">pass</a></div>
<div class="menu-item"><a href="#Function:attempt">attempt</a></div>
<div class="menu-item"><a href="#Function:bind">bind</a></div>
<div class="menu-item"><a href="#Function:bindWithEvent">bindWithEvent</a></div>
<div class="menu-item"><a href="#Function:delay">delay</a></div>
<div class="menu-item"><a href="#Function:periodical">periodical</a></div>
<div class="menu-item"><a href="#Function:run">run</a></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>183</wp:post_id>
		<wp:post_date><![CDATA[2008-10-24 15:04:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-10-24 06:04:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[function]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mootools"><![CDATA[MooTools]]></category>
		<category domain="category" nicename="native"><![CDATA[Native]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Number</title>
		<link>https://takahashifumiki.com/web/mootools/191/</link>
		<pubDate>Fri, 24 Oct 2008 06:43:17 +0000</pubDate>
		<dc:creator><![CDATA[takahashi_fumiki]]></dc:creator>
		<guid isPermaLink="false">https://takahashifumiki.com/?p=191</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="main" class="l-border r-border span-15">
<h1 id="Number"><a href="#Number">Native: Number</a></h1>
<p class="description">Numberオブジェクトの一連のメソッドです。</p>

<h3>参考情報:</h3>
<ul>
	<li><a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Number">MDC Number</a></li>
</ul>
<h3>注意:</h3>
プロトタイプ、ジェネリクス双方の形式において、すべてのMathオブジェクトメソッドがNumberオブジェクトにコピーされています。
<h2 id="Number:limit"><a href="#Number:limit">Numberメソッド: limit</a></h2>
<p class="description">二つの範囲内に数を制限します。</p>

<h3>構文:</h3>
<pre class="javascript">myNumber.<span class="me1">limit</span><span class="br0">(</span>min, max<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>min - (<em>数</em>) 最小値。</li>
	<li>max - (<em>数</em>) 最大値。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>数</em>) 二つの制限値に収まる数。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="br0">(</span><span class="nu0">12</span><span class="br0">)</span>.<span class="me1">limit</span><span class="br0">(</span><span class="nu0">2</span>, <span class="nu0">6.5</span><span class="br0">)</span>;  <span class="co1">//戻り値: 6.5</span>

<span class="br0">(</span><span class="nu0">-4</span><span class="br0">)</span>.<span class="me1">limit</span><span class="br0">(</span><span class="nu0">2</span>, <span class="nu0">6.5</span><span class="br0">)</span>;  <span class="co1">//戻り値: 2</span>
<span class="br0">(</span><span class="nu0">4.3</span><span class="br0">)</span>.<span class="me1">limit</span><span class="br0">(</span><span class="nu0">2</span>, <span class="nu0">6.5</span><span class="br0">)</span>; <span class="co1">//戻り値: 4.3</span></pre>
<h2 id="Number:round"><a href="#Number:round">Numberメソッド: round</a></h2>
<p class="description">指定した桁まで数値をまとめます。</p>

<h3>構文:</h3>
<pre class="javascript">myNumber.<span class="me1">round</span><span class="br0">(</span><span class="br0">[</span>precision<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>precision - (<em>数</em>, オプション: 初期値＝0) 小数点以下の桁数。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>数</em>) 丸められた数。</li>
</ul>
<h3>注意:</h3>
<ul>
	<li>引数には負の値も取ります。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="br0">(</span><span class="nu0">12.45</span><span class="br0">)</span>.<span class="me1">round</span><span class="br0">(</span><span class="br0">)</span>   <span class="co1">//戻り値: 12</span>

<span class="br0">(</span><span class="nu0">12.45</span><span class="br0">)</span>.<span class="me1">round</span><span class="br0">(</span><span class="nu0">1</span><span class="br0">)</span>  <span class="co1">//戻り値: 12.5</span>
<span class="br0">(</span><span class="nu0">12.45</span><span class="br0">)</span>.<span class="me1">round</span><span class="br0">(</span><span class="nu0">-1</span><span class="br0">)</span> <span class="co1">//戻り値: 10</span></pre>
<h2 id="Number:times"><a href="#Number:times">Numberメソッド: times</a></h2>
<p class="description">渡された関数を指定した回数だけ実行します。</p>

<h3>構文:</h3>
<pre class="javascript">myNumber.<span class="me1">times</span><span class="br0">(</span>fn<span class="br0">[</span>, bind<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>fn   - (<em>関数</em>) 反復処理ごとに実行される関数。この関数には現在の反復回数がインデックスとして渡されます。</li>
	<li>bind - (<em>オブジェクト</em>, オプション) 関数内で'this'として参照したいオブジェクト。詳しくは<a href="https://takahashifumiki.com/web/mootools/183#Function:bind">Function:bind</a>を参照のこと。.</li>
</ol>
<h3>例:</h3>
<pre class="javascript"><span class="br0">(</span><span class="nu0">4</span><span class="br0">)</span>.<span class="me1">times</span><span class="br0">(</span><span class="kw3">alert</span><span class="br0">)</span>; <span class="co1">//Alerts "0", then "1", then "2", then "3".</span></pre>
<h2 id="Number:toFloat"><a href="#Number:toFloat">Numberメソッド: toFloat</a></h2>
<p class="description">ある数を浮動小数点を持つ10進数に変換します。このメソッドは文字列にも数にも有効なので、とても有用です。</p>

<h3>構文:</h3>
<pre class="javascript">myNumber.<span class="me1">toFloat</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(<em>数</em>) 浮動小数点の数。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="br0">(</span><span class="nu0">111</span><span class="br0">)</span>.<span class="me1">toFloat</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//戻り値 111</span>

<span class="br0">(</span><span class="nu0">111.1</span><span class="br0">)</span>.<span class="me1">toFloat</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//戻り値 111.1</span></pre>
<h2 id="Number:toInt"><a href="#Number:toInt">Numberメソッド: toInt</a></h2>
<p class="description">渡された底に基づく進数を返します。toIntは文字列と数の両方で働くので有用です。</p>

<h3>構文:</h3>
<pre class="javascript">myNumber.<span class="me1">toInt</span><span class="br0">(</span><span class="br0">[</span>base<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>base - (<em>数</em>, オプション:初期値＝10) 進数の底となる値。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>数</em>) 与えられた底に基づく進数で表された数。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="br0">(</span><span class="nu0">111</span><span class="br0">)</span>.<span class="me1">toInt</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//戻り値 111</span>
<span class="br0">(</span><span class="nu0">111.1</span><span class="br0">)</span>.<span class="me1">toInt</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//戻り値 111</span>

<span class="br0">(</span><span class="nu0">111</span><span class="br0">)</span>.<span class="me1">toInt</span><span class="br0">(</span><span class="nu0">2</span><span class="br0">)</span>; <span class="co1">//戻り値 7</span></pre>
</div>
<div id="menu" class="span-2 last">
<h4 class="menu-item"><a href="#Number">Number</a></h4>
<div class="menu-item"><a href="#Number:limit">limit</a></div>
<div class="menu-item"><a href="#Number:round">round</a></div>
<div class="menu-item"><a href="#Number:times">times</a></div>
<div class="menu-item"><a href="#Number:toFloat">toFloat</a></div>
<div class="menu-item"><a href="#Number:toInt">toInt</a></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>191</wp:post_id>
		<wp:post_date><![CDATA[2008-10-24 15:43:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-10-24 06:43:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[number]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mootools"><![CDATA[MooTools]]></category>
		<category domain="category" nicename="native"><![CDATA[Native]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>String</title>
		<link>https://takahashifumiki.com/web/mootools/196/</link>
		<pubDate>Fri, 24 Oct 2008 07:28:21 +0000</pubDate>
		<dc:creator><![CDATA[takahashi_fumiki]]></dc:creator>
		<guid isPermaLink="false">https://takahashifumiki.com/?p=196</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="main" class="l-border r-border span-15">
<h1 id="String"><a href="#String">Native: String</a></h1>
<p class="description">Stringオブジェクトのプロトタイプメソッドです。</p>

<h3>参考情報:</h3>
<ul>
	<li><a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:String">MDC String</a></li>
</ul>
<h2 id="String:test"><a href="#String:test">Stringメソッド: test</a></h2>
<p class="description">文字列と正規表現で検索します。
詳しくは<a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Objects:RegExp:test">MDC Regexp:test</a>の情報を参照のこと。
<h3>構文:</h3>
<pre class="javascript">myString.<span class="me1">test</span><span class="br0">(</span>regex<span class="br0">[</span>,params<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>regex  - (<em>いろいろ</em>) 文字列を検索するための文字列か正規表現。</li>
	<li>params - (<em>文字列</em>, オプション) 第1引数が文字列だった場合、正規表現のパラメータを与えることができます('g'は正規表現上の効果を発揮しません)</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>真偽値</em>) <code>正規表現にマッチしたらtrue。</code></li>
	<li>(<em>真偽値</em>) <code>見つからなかったらfalse。</code></li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="st0">"I like cookies"</span>.<span class="me1">test</span><span class="br0">(</span><span class="st0">"cookie"</span><span class="br0">)</span>; <span class="co1">//戻り値 true</span>
<span class="st0">"I like cookies"</span>.<span class="me1">test</span><span class="br0">(</span><span class="st0">"COOKIE"</span>, <span class="st0">"i"</span><span class="br0">)</span>; <span class="co1">//戻り値 true (オプション：大文字小文字の区別は無視)</span>

<span class="st0">"I like cookies"</span>.<span class="me1">test</span><span class="br0">(</span><span class="st0">"cake"</span><span class="br0">)</span>; <span class="co1">//戻り値 false</span></pre>
<h3>参考情報:</h3>
<ul>
	<li><a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Guide:Regular_Expressions">MDC Regular Expressions</a></li>
</ul>
<h2 id="String:contains"><a href="#String:contains">Stringメソッド: contains</a></h2>
<p class="description">引数として渡された文字列が対象の文字列に含まれているかをチェックします。
もし区切り文字が渡された場合、その区切り文字で分割されたリストの各項目が該当文字列と一致するかをチェックします。
<h3>構文:</h3>
<pre class="javascript">myString.<span class="me1">contains</span><span class="br0">(</span>string<span class="br0">[</span>, separator<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>string    - (<em>文字列</em>) 検索文字列。</li>
	<li>separator - (<em>文字列</em>, オプション) 文字列を分割する区切り文字。(例： Element classNames は' 'で区切られています)</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>真偽値</em>) <code>検索文字列が含まれていればtrue。</code></li>
	<li>(<em>真偽値</em>) <code>見つからなければfalse</code>。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="st0">'a bc'</span>.<span class="me1">contains</span><span class="br0">(</span><span class="st0">'bc'</span><span class="br0">)</span>; <span class="co1">//戻り値 true</span>
<span class="st0">'a b c'</span>.<span class="me1">contains</span><span class="br0">(</span><span class="st0">'c'</span>, <span class="st0">' '</span><span class="br0">)</span>; <span class="co1">//戻り値 true</span>

<span class="st0">'a bc'</span>.<span class="me1">contains</span><span class="br0">(</span><span class="st0">'b'</span>, <span class="st0">' '</span><span class="br0">)</span>; <span class="co1">//戻り値 false</span></pre>
<h2 id="String:trim"><a href="#String:trim">Stringメソッド: trim</a></h2>
<p class="description">文字列の前後のスペースを取り除きます。</p>

<h3>構文:</h3>
<pre class="javascript">myString.<span class="me1">trim</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(<em>文字列</em>) トリムされた文字列。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="st0">"    i like cookies     "</span>.<span class="me1">trim</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//"i like cookies"</span></pre>
<h2 id="String:clean"><a href="#String:clean">Stringメソッド: clean</a></h2>
<p class="description">よけいな半角スペースを除去した上でトリム (<a href="#String:trim">String:trim</a>)します。</p>

<h3>構文:</h3>
<pre class="javascript">myString.<span class="me1">clean</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(<em>文字列</em>) スペースを除去された文字列。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="st0">" i      like     cookies      <span class="es0">¥n</span><span class="es0">¥n</span>"</span>.<span class="me1">clean</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//戻り値 "i like cookies"</span></pre>
<h2 id="String:camelCase"><a href="#String:camelCase">Stringメソッド: camelCase</a></h2>
<p class="description">ハイフネーションされた文字列をラクダ文字に変換します。</p>

<h3>構文:</h3>
<pre class="javascript">myString.<span class="me1">camelCase</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(<em>文字列</em>) ラクダ文字。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="st0">"I-like-cookies"</span>.<span class="me1">camelCase</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//文字列 "ILikeCookies"</span></pre>
<h2 id="String:hyphenate"><a href="#String:hyphenate">Stringメソッド: hyphenate</a></h2>
<p class="description">ラクダ文字をハイフネーションに変換します。</p>

<h3>構文:</h3>
<pre class="javascript">myString.<span class="me1">hyphenate</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(<em>文字列</em>) ハイフネーションされた文字列。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="st0">"ILikeCookies"</span>.<span class="me1">hyphenate</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//戻り値 "I-like-cookies"</span></pre>
<h2 id="String:capitalize"><a href="#String:capitalize">Stringメソッド: capitalize</a></h2>
<p class="description">各単語の最初の文字を大文字に変換します。</p>

<h3>構文:</h3>
<pre class="javascript">myString.<span class="me1">capitalize</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(<em>文字列</em>) 先頭を大文字にした文字列。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="st0">"i like cookies"</span>.<span class="me1">capitalize</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//戻り値 "I Like Cookies"</span></pre>
<h2 id="String:escapeRegExp"><a href="#String:escapeRegExp">Stringメソッド: escapeRegExp</a></h2>
<p class="description">文字列から正規表現をエスケープします。</p>

<h3>構文:</h3>
<pre class="javascript">myString.<span class="me1">escapeRegExp</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(<em>文字列</em>) エスケープされた文字列。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="st0">'animals.sheep[1]'</span>.<span class="me1">escapeRegExp</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//戻り値 'animals¥.sheep¥[1¥]'</span></pre>
<h2 id="String:toInt"><a href="#String:toInt">Stringメソッド: toInt</a></h2>
<p class="description">文字列をパースし、任意の基数、底に応じた数だけを返します。</p>

<h3>構文:</h3>
<pre class="javascript">myString.<span class="me1">toInt</span><span class="br0">(</span><span class="br0">[</span>base<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>base - (<em>数</em>, オプション：初期値＝10) 使用する底。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>数</em>) 数。</li>
	<li>(<em>NaN</em>) 文字列が実数でなければ、NaNを返す。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="st0">"4em"</span>.<span class="me1">toInt</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//戻り値 4</span>
<span class="st0">"10px"</span>.<span class="me1">toInt</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//戻り値 10</span></pre>
<h3>参考情報:</h3>
<ul>
	<li><a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Functions:parseInt">MDC parseInt</a></li>
</ul>
<h2 id="String:toFloat"><a href="#String:toFloat">Stringメソッド: toFloat</a></h2>
<p class="description">文字列をパースし、浮動小数点の数を返します。</p>

<h3>構文:</h3>
<pre class="javascript">myString.<span class="me1">toFloat</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(<em>数</em>) 浮動小数点の数。</li>
	<li>(<em>NaN</em>) 文字列が実数でなければ、NaNを返します。</li>
</ul>
<h3>例:</h3>
<pre class="javascript">    <span class="st0">"95.25%"</span>.<span class="me1">toFloat</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//戻り値 95.25</span>
    <span class="st0">"10.848"</span>.<span class="me1">toFloat</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//戻り値 10.848</span></pre>
<h3>参考情報:</h3>
<ul>
	<li><a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Functions:parseFloat">MDC parseFloat</a></li>
</ul>
<h2 id="String:hexToRgb"><a href="#String:hexToRgb">Stringメソッド: hexToRgb</a></h2>
<p class="description">16進数カラー値をRGB値に変換します。渡される文字列は次のような16進数カラーフォーマットでなくてはなりません(#はあってもなくてもかまいません)。
'#ffffff', #fff', 'ffffff', or 'fff'
<h3>構文:</h3>
<pre class="javascript">myString.<span class="me1">hexToRgb</span><span class="br0">(</span><span class="br0">[</span>array<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>array - (<em>真偽値</em>, オプション) trueならば、文字列(eg. "rgb(255,51,0)")の代わりに配列(eg. [255, 51, 0])を返します。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>文字列</em>) RGBカラーを表す文字列。</li>
	<li>(<em>配列</em>) 配列フラグがセットされていれば、文字列の代わりに配列が戻ります。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="st0">"#123"</span>.<span class="me1">hexToRgb</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//returns "rgb(17,34,51)"</span>
<span class="st0">"112233"</span>.<span class="me1">hexToRgb</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//returns "rgb(17,34,51)"</span>
<span class="st0">"#112233"</span>.<span class="me1">hexToRgb</span><span class="br0">(</span><span class="kw2">true</span><span class="br0">)</span>; <span class="co1">//returns [17, 34, 51]</span></pre>
<h2 id="String:rgbToHex"><a href="#String:rgbToHex">Stringメソッド: rgbToHex</a></h2>
<p class="description">RGBカラー値を16進数に変換します。渡される文字列は次のようなRGBフォーマットでなくてはなりません。
"rgb(255,255,255)", or "rgba(255,255,255,1)"
<h3>構文:</h3>
<pre class="javascript">myString.<span class="me1">rgbToHex</span><span class="br0">(</span><span class="br0">[</span>array<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>array - (<em>真偽値</em>, オプション) trueならば、文字列(eg. "#ff3300")の代わりに配列(eg. ['ff','33','00'])を返します。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>文字列</em>) カラー値を16進数で表す文字列。RGBの4番目の値（RGBA）が0にセットされていれば、transparantを返します。</li>
	<li>(<em>配列</em>) 配列フラグがセットされていれば、文字列の代わりに配列が返されます。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="st0">"rgb(17,34,51)"</span>.<span class="me1">rgbToHex</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//戻り値 "#112233"</span>
<span class="st0">"rgb(17,34,51)"</span>.<span class="me1">rgbToHex</span><span class="br0">(</span><span class="kw2">true</span><span class="br0">)</span>; <span class="co1">//戻り値 ['11','22','33']</span>

<span class="st0">"rgba(17,34,51,0)"</span>.<span class="me1">rgbToHex</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//戻り値 "transparent"</span></pre>
<h3>参考情報:</h3>
<ul>
	<li><a href="/docs/Native/Array/#Array:rgbToHex">Array:rgbToHex</a></li>
</ul>
<h2 id="String:stripScripts"><a href="#String:stripScripts">Stringメソッド: stripScripts</a></h2>
<p class="description">文字列から&lt;script&gt;タグとその中の文字列を削除し、残りの文字列を返します。</p>

<h3>構文:</h3>
<pre class="javascript">myString.<span class="me1">stripScripts</span><span class="br0">(</span><span class="br0">[</span>evaluate<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>evaluate - (<em>真偽値</em>, オプション) trueならば、文字列内のスクリプトが評価されます。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>文字列</em>) - &lt;script&gt;タグの外された文字列。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myString = <span class="st0">"&lt;script&gt;alert('Hello')&lt;/script&gt;Hello, World."</span>;
myString.<span class="me1">stripScripts</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//戻り値 "Hello, World."</span>

myString.<span class="me1">stripScripts</span><span class="br0">(</span><span class="kw2">true</span><span class="br0">)</span>; <span class="co1">//"Hello"をアラートし、戻り値は"Hello, World."</span></pre>
<h2 id="String:substitute"><a href="#String:substitute">Stringメソッド: substitute</a></h2>
<p class="description">オブジェクト／配列を用いて文字列内のキーワードを置換します。
undefinedのキーワードは取り除き、エスケープされたキーワードは無視します。
<h3>構文:</h3>
<pre class="javascript">myString.<span class="me1">substitute</span><span class="br0">(</span>object<span class="br0">[</span>, regexp<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>object - (<em>いろいろ</em>) 文字列を置換するためのキー＝値のペアを持つオブジェクト。</li>
	<li>regexp - (<em>正規表現</em>, オプション：初期値＝/¥?{([^}]+)}/g) キーワードを置換するために用いられる正規表現。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>文字列</em>) - 置換された文字列。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myString = <span class="st0">"{subject} is {property_1} and {property_2}."</span>;
<span class="kw2">var</span> myObject = <span class="br0">{</span>subject: <span class="st0">'Jack Bauer'</span>, property_1: <span class="st0">'our lord'</span>, property_2: <span class="st0">'savior'</span><span class="br0">}</span>;
myString.<span class="me1">substitute</span><span class="br0">(</span>myObject<span class="br0">)</span>; <span class="co1">//Jack Bauer is our lord and savior</span></pre>
</div>
<div id="menu" class="span-2 last">
<h4 class="menu-item"><a href="#String">String</a></h4>
<div class="menu-item"><a href="#String:test">test</a></div>
<div class="menu-item"><a href="#String:contains">contains</a></div>
<div class="menu-item"><a href="#String:trim">trim</a></div>
<div class="menu-item"><a href="#String:clean">clean</a></div>
<div class="menu-item"><a href="#String:camelCase">camelCase</a></div>
<div class="menu-item"><a href="#String:hyphenate">hyphenate</a></div>
<div class="menu-item"><a href="#String:capitalize">capitalize</a></div>
<div class="menu-item"><a href="#String:escapeRegExp">escapeRegExp</a></div>
<div class="menu-item"><a href="#String:toInt">toInt</a></div>
<div class="menu-item"><a href="#String:toFloat">toFloat</a></div>
<div class="menu-item"><a href="#String:hexToRgb">hexToRgb</a></div>
<div class="menu-item"><a href="#String:rgbToHex">rgbToHex</a></div>
<div class="menu-item"><a href="#String:stripScripts">stripScripts</a></div>
<div class="menu-item"><a href="#String:substitute">substitute</a></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>196</wp:post_id>
		<wp:post_date><![CDATA[2008-10-24 16:28:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-10-24 07:28:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[string]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mootools"><![CDATA[MooTools]]></category>
		<category domain="category" nicename="native"><![CDATA[Native]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hash</title>
		<link>https://takahashifumiki.com/web/mootools/198/</link>
		<pubDate>Fri, 24 Oct 2008 09:48:10 +0000</pubDate>
		<dc:creator><![CDATA[takahashi_fumiki]]></dc:creator>
		<guid isPermaLink="false">https://takahashifumiki.com/?p=198</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="main" class="l-border r-border span-15">
<h1 id="Hash"><a href="#Hash">Native: Hash</a></h1>
<p class="description">新たに実装されたカスタムオブジェクト({})であり、作成、取得、反復処理時にprototypeを参照しません。
JavaScriptではObject.prototypeを使えませんが、Hash.prototypeを使えるというのは、とても便利なことなのです！
<h2 id="Hash:constructor"><a href="#Hash:constructor">Hashメソッド: constructor</a></h2>
<h3 class="description">構文:</h3>
<pre class="javascript"><span class="kw2">var</span> myHash = <span class="kw2">new</span> Hash<span class="br0">(</span><span class="br0">[</span>object<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>object - (<em>いろいろ</em>) 連想配列か、それに変換したいオブジェクト。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>連想配列</em>) 新しい連想配列インスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myHash = <span class="kw2">new</span> Hash<span class="br0">(</span><span class="br0">{</span>
    aProperty: <span class="kw2">true</span>,
    aMethod: <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
        <span class="kw1">return</span> <span class="kw2">true</span>;
    <span class="br0">}</span>
<span class="br0">}</span><span class="br0">)</span>;
<span class="kw3">alert</span><span class="br0">(</span>myHash.<span class="me1">has</span><span class="br0">(</span><span class="st0">'aMethod'</span><span class="br0">)</span><span class="br0">)</span>; <span class="co1">//戻り値： true.</span></pre>
<h2 id="Hash:each"><a href="#Hash:each">Hashメソッド: each</a></h2>
<p class="description">オブジェクト内にあるキー＝値のベアに対して関数を呼び出します。</p>

<h3>構文:</h3>
<pre class="javascript">myHash.<span class="me1">each</span><span class="br0">(</span>fn<span class="br0">[</span>, bind<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>fn   - (<em>関数</em>) 連想配列内にある各要素に対して実行する関数。この関数には要素自身とキー名が与えられます。</li>
	<li>bind - (<em>オブジェクト</em>, オプション) 関数内で'this'として参照したいオブジェクト。詳しくは<a href="https://takahashifumiki.com/web/mootools/183#Function:bind">Function:bind</a>を参照のこと。</li>
</ol>
<h4>引数: fn</h4>
<h5>構文:</h5>
<pre class="javascript">fn<span class="br0">(</span>value, key, hash<span class="br0">)</span></pre>
<h5>引数:</h5>
<ol>
	<li>value - (<em>いろいろ</em>) 連想配列内の現在の値。</li>
	<li>key   - (<em>文字列</em>) 現在の値のキー名。</li>
	<li>hash  - (<em>連想配列</em>) 実際の連想配列。</li>
</ol>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> hash = <span class="kw2">new</span> Hash<span class="br0">(</span><span class="br0">{</span>first: <span class="st0">"Sunday"</span>, second: <span class="st0">"Monday"</span>, third: <span class="st0">"Tuesday"</span><span class="br0">}</span><span class="br0">)</span>;
hash.<span class="me1">each</span><span class="br0">(</span><span class="kw2">function</span><span class="br0">(</span>value, key<span class="br0">)</span><span class="br0">{</span>

    <span class="kw3">alert</span><span class="br0">(</span><span class="st0">"the "</span> + key + <span class="st0">" day of the week is "</span> + value<span class="br0">)</span>;
<span class="br0">}</span><span class="br0">)</span>; <span class="co1">//"the first day of the week is Sunday", "the second day of the week is Monday", という具合にアラート。</span></pre>
<h2 id="Hash:has"><a href="#Hash:has">Hashメソッド: has</a></h2>
<p class="description">連想配列内の特定のキーが存在するかテストします。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> inHash = myHash.<span class="me1">has</span><span class="br0">(</span><span class="kw1">item</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>key - (<em>文字列</em>) 連想配列の中で検索したいキー名。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>真偽値</em>) 該当するキーに任意の値が定義されていればtrue。そうでなければfalseを返します。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> hash = <span class="kw2">new</span> Hash<span class="br0">(</span><span class="br0">{</span><span class="st0">'a'</span>: <span class="st0">'one'</span>, <span class="st0">'b'</span>: <span class="st0">'two'</span>, <span class="st0">'c'</span>: <span class="st0">'three'</span><span class="br0">}</span><span class="br0">)</span>;
hash.<span class="me1">has</span><span class="br0">(</span><span class="st0">'a'</span><span class="br0">)</span>; <span class="co1">//戻り値 true</span>

hash.<span class="me1">has</span><span class="br0">(</span><span class="st0">'d'</span><span class="br0">)</span>; <span class="co1">//戻り値 false</span></pre>
<h3>注意:</h3>
<ul>
	<li>連想配列のprototypeにtestメソッドを実行しても、絶対にtrueを返しません。Hashの実際のプロパティにtestメソッドを実行したときだけtrueを返します。</li>
</ul>
<h2 id="Hash:keyOf"><a href="#Hash:keyOf">Hashメソッド: keyOf</a></h2>
<p class="description">任意の値を持つキーを返します。<a href="https://takahashifumiki.com/web/mootools/178#Array:indexOf">Array:indexOf</a>と同じです。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> key = myHash.<span class="me1">keyOf</span><span class="br0">(</span><span class="kw1">item</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>item - (<em>いろいろ</em>) 連想配列内で検索したい値。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>文字列</em>) 連想配列が該当する値を持っていた場合、そのキー名を返します。</li>
	<li>(<em>真偽値</em>) そうでなければ、falseを返します。.</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> hash = <span class="kw2">new</span> Hash<span class="br0">(</span><span class="br0">{</span><span class="st0">'a'</span>: <span class="st0">'one'</span>, <span class="st0">'b'</span>: <span class="st0">'two'</span>, <span class="st0">'c'</span>: <span class="nu0">3</span><span class="br0">}</span><span class="br0">)</span>;
hash.<span class="me1">keyOf</span><span class="br0">(</span><span class="st0">'two'</span><span class="br0">)</span>; <span class="co1">//戻り値 'b'</span>

hash.<span class="me1">keyOf</span><span class="br0">(</span><span class="nu0">3</span><span class="br0">)</span>; <span class="co1">//戻り値 'c'</span>
hash.<span class="me1">keyOf</span><span class="br0">(</span><span class="st0">'four'</span><span class="br0">)</span> <span class="co1">//戻り値 false</span></pre>
<h3>注意:</h3>
<ul>
	<li>連想配列のprototypeにkeyOfメソッドを実行しても、絶対にtrueを返しません。Hashの実際のプロパティにkeyOfメソッドを実行したときだけtrueを返します。</li>
</ul>
<h2 id="Hash:hasValue"><a href="#Hash:hasValue">Hashメソッド: hasValue</a></h2>
<p class="description">連想配列内に特定の値が存在するかをテストします。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> inHash = myHash.<span class="me1">hasValue</span><span class="br0">(</span>value<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>value - (<em>いろいろ</em>) 連想配列内で検索したい値。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>真偽値</em>) どのキーにであれ、連想配列が該当する値を持っていた場合にtrueを返します。そうでなければfalseを返します。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> hash = <span class="kw2">new</span> Hash<span class="br0">(</span><span class="br0">{</span><span class="st0">'a'</span>: <span class="st0">'one'</span>, <span class="st0">'b'</span>: <span class="st0">'two'</span>, <span class="st0">'c'</span>: <span class="st0">'three'</span><span class="br0">}</span><span class="br0">)</span>;
hash.<span class="me1">hasValue</span><span class="br0">(</span><span class="st0">'one'</span><span class="br0">)</span>; <span class="co1">//戻り値 true</span>

hash.<span class="me1">hasValue</span><span class="br0">(</span><span class="st0">'four'</span><span class="br0">)</span>; <span class="co1">//戻り値 false</span></pre>
<h2 id="Hash:extend"><a href="#Hash:extend">Hashメソッド: extend</a></h2>
<p class="description">渡されたオブジェクトのキー＝値ペアを使って連想配列を拡張します。</p>

<h3>構文:</h3>
<pre class="javascript">myHash.<span class="me1">extend</span><span class="br0">(</span>properties<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>properties - (<em>オブジェクト</em>) 連想配列に対して拡張する要素を持ったオブジェクト。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>連想配列</em>) 拡張された連想配列。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> hash = <span class="kw2">new</span> Hash<span class="br0">(</span><span class="br0">{</span>

    <span class="st0">'name'</span>: <span class="st0">'John'</span>,
    <span class="st0">'lastName'</span>: <span class="st0">'Doe'</span>
<span class="br0">}</span><span class="br0">)</span>;
<span class="kw2">var</span> properties = <span class="br0">{</span>

    <span class="st0">'age'</span>: <span class="st0">'20'</span>,
    <span class="st0">'sex'</span>: <span class="st0">'male'</span>,
    <span class="st0">'lastName'</span>: <span class="st0">'Dorian'</span>
<span class="br0">}</span>;
hash.<span class="me1">extend</span><span class="br0">(</span>properties<span class="br0">)</span>;

<span class="co1">//連想配列が今持っているオブジェクト: { 'name': 'John', 'lastName': 'Dorian', 'age': '20', 'sex': 'male' };</span></pre>
<h2 id="Hash:combine"><a href="#Hash:combine">Hashメソッド: combine</a></h2>
<p class="description">渡されたオブジェクトのキー＝値を連想配列に結合します。重複は許可せず（古い要素は新しい要素によって上書き<strong>されません</strong>）、大文字小文字・データ型を区別します。</p>

<h3>構文:</h3>
<pre class="javascript">myHash.<span class="me1">combine</span><span class="br0">(</span>properties<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>properties - (<em>オブジェクト</em>) 連想配列に結合したい要素を持っているオブジェクト。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>連想配列</em>) 新しいキー＝値と結合された連想配列。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> hash = <span class="kw2">new</span> Hash<span class="br0">(</span><span class="br0">{</span>
    <span class="st0">'name'</span>: <span class="st0">'John'</span>,
    <span class="st0">'lastName'</span>: <span class="st0">'Doe'</span>

<span class="br0">}</span><span class="br0">)</span>;
<span class="kw2">var</span> properties = <span class="br0">{</span>
    <span class="st0">'name'</span>: <span class="st0">'Jane'</span>
    <span class="st0">'age'</span>: <span class="st0">'20'</span>,
    <span class="st0">'sex'</span>: <span class="st0">'male'</span>,
    <span class="st0">'lastName'</span>: <span class="st0">'Dorian'</span>

<span class="br0">}</span>;
hash.<span class="me1">combine</span><span class="br0">(</span>properties<span class="br0">)</span>;
<span class="co1">//</span><span class="co1">連想配列が今持っているオブジェクト</span><span class="co1">: { 'name': 'John', 'lastName': 'Doe', 'age': '20', 'sex': 'male' };</span></pre>
<h2 id="Hash:erase"><a href="#Hash:erase">Hashメソッド: erase</a></h2>
<p class="description">特定のキーを連想配列から取り除きます。</p>

<h3>構文:</h3>
<pre class="javascript">myHash.<span class="me1">erase</span><span class="br0">(</span>key<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>key - (<em>文字列</em>) 連想配列から消去したキー。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>連想配列</em>) 指定したキー＝値が取り除かれた連想配列。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> hash = <span class="kw2">new</span> Hash<span class="br0">(</span><span class="br0">{</span>

    <span class="st0">'name'</span>: <span class="st0">'John'</span>,
    <span class="st0">'lastName'</span>: <span class="st0">'Doe'</span>
<span class="br0">}</span><span class="br0">)</span>;
hash.<span class="me1">erase</span><span class="br0">(</span><span class="st0">'lastName'</span><span class="br0">)</span>;

<span class="co1">//</span><span class="co1">連想配列が今持っているオブジェクト</span><span class="co1">: { 'name': 'John' };</span></pre>
<h2 id="Hash:get"><a href="#Hash:get">Hashメソッド: get</a></h2>
<p class="description">連想配列内から値を取得します。</p>

<h3>構文:</h3>
<pre class="javascript">myHash.<span class="me1">get</span><span class="br0">(</span>key<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>key - (<em>文字列</em>) 連想配列から取り出したい値のキー。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>いろいろ</em>) 該当するキーが会った場合、そのキーの値。</li>
	<li>(<em>null</em>) キーが存在しなければnull。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> hash = <span class="kw2">new</span> Hash<span class="br0">(</span><span class="br0">{</span>

    <span class="st0">'name'</span>: <span class="st0">'John'</span>,
    <span class="st0">'lastName'</span>: <span class="st0">'Doe'</span>
<span class="br0">}</span><span class="br0">)</span>;
hash.<span class="me1">get</span><span class="br0">(</span><span class="st0">'name'</span><span class="br0">)</span>; <span class="co1">//戻り値 'John'</span></pre>
<h2 id="Hash:set"><a href="#Hash:set">Hashメソッド: set</a></h2>
<p class="description">連想配列にキー＝値を追加し、同じキーがあった場合は値を上書きします。</p>

<h3>構文:</h3>
<pre class="javascript">myHash.<span class="me1">set</span><span class="br0">(</span>key, value<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>key   - (<em>文字列</em>) 連想配列内で修正・追加したいキー。</li>
	<li>value - (<em>いろいろ</em>) 連想配列内で該当するキーに上書きしたい値。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>連想配列</em>) 該当するキーが修正・追加された連想配列。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> hash = <span class="kw2">new</span> Hash<span class="br0">(</span><span class="br0">{</span>

    <span class="st0">'name'</span>: <span class="st0">'John'</span>,
    <span class="st0">'lastName'</span>: <span class="st0">'Doe'</span>
<span class="br0">}</span><span class="br0">)</span>;
hash.<span class="me1">set</span><span class="br0">(</span><span class="st0">'name'</span>, <span class="st0">'Michelle'</span><span class="br0">)</span>; <span class="co1">//hash.nameは現在'Michelle'です。</span></pre>
<h2 id="Hash:empty"><a href="#Hash:empty">Hashメソッド: empty</a></h2>
<p class="description">連想配列を空にします。</p>

<h3>構文:</h3>
<pre class="javascript">myHash.<span class="me1">empty</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> hash = <span class="kw2">new</span> Hash<span class="br0">(</span><span class="br0">{</span>
    <span class="st0">'name'</span>: <span class="st0">'John'</span>,
    <span class="st0">'lastName'</span>: <span class="st0">'Doe'</span>

<span class="br0">}</span><span class="br0">)</span>;
hash.<span class="me1">empty</span><span class="br0">(</span><span class="br0">)</span>;
<span class="co1">//hashは空のオブジェクトになりました: {}</span></pre>
<h2 id="Hash:include"><a href="#Hash:include">Hashメソッド: include</a></h2>
<p class="description">まだキーが存在しない場合、連想配列に特定のキー＝値のペアを追加します。</p>

<h3>構文:</h3>
<pre class="javascript">myHash.<span class="me1">include</span><span class="br0">(</span>key, value<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>key   - (<em>文字列</em>) 連想配列に挿入したいキー。</li>
	<li>value - (<em>いろいろ</em>) 上で指定したキーに対応する値。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>連想配列</em>) それ以前に該当するキーがなければ、それが追加された連想配列。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> hash = <span class="kw2">new</span> Hash<span class="br0">(</span><span class="br0">{</span>
    <span class="st0">'name'</span>: <span class="st0">'John'</span>,
    <span class="st0">'lastName'</span>: <span class="st0">'Doe'</span>

<span class="br0">}</span><span class="br0">)</span>;
hash.<span class="me1">include</span><span class="br0">(</span><span class="st0">'name'</span>, <span class="st0">'Michelle'</span><span class="br0">)</span>; <span class="co1">//hashは変わりません。</span>
hash.<span class="me1">include</span><span class="br0">(</span><span class="st0">'age'</span>, <span class="nu0">25</span><span class="br0">)</span>; <span class="co1">//hash.ageは25になりました。</span></pre>
<h2 id="Hash:map"><a href="#Hash:map">Hashメソッド: map</a></h2>
<p class="description">連想配列の各キーに対して関数を実行した結果を新しい連想配列にマップします。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> mappedHash = myHash.<span class="me1">map</span><span class="br0">(</span>fn<span class="br0">[</span>, bind<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>fn   - (<em>関数</em>) 現在の連想配列から新しい連想配列に値を提供する関数。</li>
	<li>bind - (<em>オブジェクト</em>, オプション) 関数内で'this'として参照したいオブジェクト。詳しくは<a href="https://takahashifumiki.com/web/mootools/183#Function:bind">Function:bind</a>を参照のこと。</li>
</ol>
<h4>引数: fn</h4>
<h5>構文:</h5>
<pre class="javascript">fn<span class="br0">(</span>value, key, hash<span class="br0">)</span></pre>
<h5>引数:</h5>
<ol>
	<li>value - (<em>いろいろ</em>) 連想配列内の現在の値。</li>
	<li>key   - (<em>文字列</em>) 現在の値のキー。</li>
	<li>hash  - (<em>連想配列</em>) 実際の連想配列。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>連想配列</em>) 新たにマップされた連想配列。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> timesTwo = <span class="kw2">new</span> Hash<span class="br0">(</span><span class="br0">{</span>a: <span class="nu0">1</span>, b: <span class="nu0">2</span>, c: <span class="nu0">3</span><span class="br0">}</span><span class="br0">)</span>.<span class="me1">map</span><span class="br0">(</span><span class="kw2">function</span><span class="br0">(</span>value, key<span class="br0">)</span><span class="br0">{</span>

    <span class="kw1">return</span> value * <span class="nu0">2</span>;
<span class="br0">}</span><span class="br0">)</span>; <span class="co1">//timesTwoが現在持っているオブジェクト: {a: 2, b: 4, c: 6};</span></pre>
<h2 id="Hash:filter"><a href="#Hash:filter">Hashメソッド: filter</a></h2>
<p class="description">連想配列に対してフィルタリング関数を実行し、trueを返した要素のみからなる連想配列を作成します。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> filteredHash = myHash.<span class="me1">filter</span><span class="br0">(</span>fn<span class="br0">[</span>, bind<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>fn   - (<em>関数</em>) 連想配列の各要素をテストする関数。この関数には連想配列のキーと値が渡されます。</li>
	<li>bind - (<em>オブジェクト</em>, オプション) 関数内で'this'として参照したいオブジェクト。詳しくは<a href="https://takahashifumiki.com/web/mootools/183#Function:bind">Function:bind</a>を参照のこと。</li>
</ol>
<h4>引数: fn</h4>
<h5>構文:</h5>
<pre class="javascript">fn<span class="br0">(</span>value, key, hash<span class="br0">)</span></pre>
<h5>引数:</h5>
<ol>
	<li>value - (<em>いろいろ</em>) 連想配列内における現在の値。</li>
	<li>key   - (<em>文字列</em>) 現在の値のキー名。</li>
	<li>hash  - (<em>連想配列</em>) 実際の配列。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>連想配列</em>) フィルタリングされた新しい連想配列。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> biggerThanTwenty = <span class="kw2">new</span> Hash<span class="br0">(</span><span class="br0">{</span>a: <span class="nu0">10</span>, b: <span class="nu0">20</span>, c: <span class="nu0">30</span><span class="br0">}</span><span class="br0">)</span>.<span class="me1">filter</span><span class="br0">(</span><span class="kw2">function</span><span class="br0">(</span>value, key<span class="br0">)</span><span class="br0">{</span>

    <span class="kw1">return</span> value &gt; <span class="nu0">20</span>;
<span class="br0">}</span><span class="br0">)</span>; <span class="co1">//biggerThanTwentyの現在のオブジェクト: {c: 30}</span></pre>
<h2 id="Hash:every"><a href="#Hash:every">Hashメソッド: every</a></h2>
<p class="description">連想配列のオブジェクトがテスト関数の条件をすべて満たす場合、trueを返します。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> allPassed = myHash.<span class="me1">every</span><span class="br0">(</span>fn<span class="br0">[</span>, bind<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>fn   - (<em>関数</em>) 連想配列の各要素をテストする関数。この関数にはキーと値が渡されます。</li>
	<li>bind - (<em>オブジェクト</em>, オプション) 関数内で'this'として参照したいオブジェクト。詳しくは<a href="https://takahashifumiki.com/web/mootools/183#Function:bind">Function:bind</a>を参照のこと。</li>
</ol>
<h4>引数: fn</h4>
<h5>構文:</h5>
<pre class="javascript">fn<span class="br0">(</span>value, key, hash<span class="br0">)</span></pre>
<h5>引数:</h5>
<ol>
	<li>value - (<em>いろいろ</em>) 連想配列内における現在の値。</li>
	<li>key   - (<em>文字列</em>) 現在の値のキー名。</li>
	<li>hash  - (<em>連想配列</em>) 実際の配列。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>真偽値</em>) 配列内のすべての要素がテスト関数の条件を満たすならばtrue。そうでなければfalseを返します。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> areAllBigEnough = <span class="br0">(</span><span class="br0">{</span>a: <span class="nu0">10</span>, b: <span class="nu0">4</span>, c: <span class="nu0">25</span>, d: <span class="nu0">100</span><span class="br0">}</span><span class="br0">)</span>.<span class="me1">every</span><span class="br0">(</span><span class="kw2">function</span><span class="br0">(</span>value, key<span class="br0">)</span><span class="br0">{</span>

    <span class="kw1">return</span> value &gt; <span class="nu0">20</span>;
<span class="br0">}</span><span class="br0">)</span>; <span class="co1">//areAllBigEnough = false</span></pre>
<h2 id="Hash:some"><a href="#Hash:some">Hashメソッド: some</a></h2>
<p class="description">連想配列内の要素が一つでもテスト関数の条件を満たすならばtrue。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> anyPassed = myHash.<span class="me1">any</span><span class="br0">(</span>fn<span class="br0">[</span>, bind<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>fn   - (<em>関数</em>) 連想配列の各要素をテストする関数。この関数にはキーと値が渡されます。</li>
	<li>bind - (<em>オブジェクト</em>, オプション) 関数内で'this'として参照したいオブジェクト。詳しくは<a href="https://takahashifumiki.com/web/mootools/183#Function:bind">Function:bind</a>を参照のこと。</li>
</ol>
<h4>引数: fn</h4>
<h5>構文:</h5>
<pre class="javascript">fn<span class="br0">(</span>value, key, hash<span class="br0">)</span></pre>
<h5>引数:</h5>
<ol>
	<li>value - (<em>いろいろ</em>) 連想配列内における現在の値。</li>
	<li>key   - (<em>文字列</em>) 現在の値のキー名。</li>
	<li>hash  - (<em>連想配列</em>) 実際の配列</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>真偽値</em>) もし連想配列内の要素が一つでもテスト関数の条件を満たすならば、true。そうでなければfalseを返す。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> areAnyBigEnough = <span class="br0">(</span><span class="br0">{</span>a: <span class="nu0">10</span>, b: <span class="nu0">4</span>, c: <span class="nu0">25</span>, d: <span class="nu0">100</span><span class="br0">}</span><span class="br0">)</span>.<span class="me1">some</span><span class="br0">(</span><span class="kw2">function</span><span class="br0">(</span>value, key<span class="br0">)</span><span class="br0">{</span>

    <span class="kw1">return</span> value &gt; <span class="nu0">20</span>;
<span class="br0">}</span><span class="br0">)</span>; <span class="co1">//isAnyBigEnough = true</span></pre>
<h2 id="Hash:getClean"><a href="#Hash:getClean">Hashメソッド: getClean</a></h2>
<p class="description">連想配列を空っぽのオブジェクトにして返します。</p>

<h3>構文:</h3>
<pre class="javascript">myHash.<span class="me1">getClean</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) 空っぽのオブジェクト。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> hash = <span class="kw2">new</span> Hash<span class="br0">(</span><span class="br0">{</span>

    <span class="st0">'name'</span>: <span class="st0">'John'</span>,
    <span class="st0">'lastName'</span>: <span class="st0">'Doe'</span>
<span class="br0">}</span><span class="br0">)</span>;
hash = hash.<span class="me1">getClean</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">// hashはもはや</span><span class="co1">Hash</span><span class="co1">プロパティを持ちません。</span>

hash.<span class="me1">each</span><span class="br0">(</span><span class="br0">)</span> <span class="co1">//エラー!</span></pre>
<h2 id="Hash:getKeys"><a href="#Hash:getKeys">Hashメソッド: getKeys</a></h2>
<p class="description"><a href="#Hash:getValues">Hash:getValues</a>で返されるのと同じ順番で、連想配列の持つキーからなる配列を返します。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> keys = myHash.<span class="me1">getKeys</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(<em>配列</em>) 連想配列のすべてのキーからなる配列。</li>
</ul>
<h2 id="Hash:getValues"><a href="#Hash:getValues">Hashメソッド: getValues</a></h2>
<p class="description"><a href="#Hash:getKeys">Hash:getKeys</a>で返されるのと同じ順番で、連想配列のすべての値からなる配列を返します。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> values = myHash.<span class="me1">getValues</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(<em>配列</em>) 連想配列のすべての値からなる配列。</li>
</ul>
<h2 id="Hash:getLength"><a href="#Hash:getLength">Hashメソッド: getLength</a></h2>
<p class="description">連想配列内のキーの数を返します。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> length = myHash.<span class="me1">getLength</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(<em>数</em>) 連想配列の長さ。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> hash = <span class="kw2">new</span> Hash<span class="br0">(</span><span class="br0">{</span>
    <span class="st0">'name'</span>: <span class="st0">'John'</span>,
    <span class="st0">'lastName'</span>: <span class="st0">'Doe'</span>

<span class="br0">}</span><span class="br0">)</span>;
hash.<span class="me1">getLength</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">// 戻り値 2</span></pre>
<h2 id="Hash:toQueryString"><a href="#Hash:toQueryString">Hashメソッド: toQueryString</a></h2>
<p class="description">オブジェクトのキー＝値からクエリ文字列を生成し、URIエンコードします。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> queryString = myHash.<span class="me1">toQueryString</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>source - (<em>オブジェクト</em>) クエリ文字列を生成したいオブジェクト。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>文字列</em>) クエリ文字列。</li>
</ul>
<h3>例:</h3>
<h4>Hashジェネリックの場合:</h4>
<pre class="javascript">Hash.<span class="me1">toQueryString</span><span class="br0">(</span><span class="br0">{</span>apple: <span class="st0">"red"</span>, lemon: <span class="st0">"yellow"</span><span class="br0">}</span><span class="br0">)</span>; <span class="co1">//戻り値 "apple=red&amp;lemon=yellow"</span></pre>
<h4>Hashインスタンスの場合:</h4>
<pre class="javascript"><span class="kw2">var</span> myHash = <span class="kw2">new</span> Hash<span class="br0">(</span><span class="br0">{</span>apple: <span class="st0">"red"</span>, lemon: <span class="st0">"yellow"</span><span class="br0">}</span><span class="br0">)</span>;
myHash.<span class="me1">toQueryString</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//戻り値 "apple=red&amp;lemon=yellow"</span></pre>
<h1 id="Utility"><a href="#Utility">Utility Functions</a></h1>
<h2 id="H" class="description"><a href="#H">Function: $H</a></h2>
<p class="description">new <a href="#Hash">Hash</a>のショートカットです。</p>

<h3>参考情報:</h3>
<ul>
	<li><a href="#Hash">Hash</a></li>
</ul>
</div>
<div id="menu" class="span-2 last">
<h4 class="menu-item"><a href="#Hash">Hash</a></h4>
<div class="menu-item"><a href="#Hash:constructor">constructor</a></div>
<div class="menu-item"><a href="#Hash:each">each</a></div>
<div class="menu-item"><a href="#Hash:has">has</a></div>
<div class="menu-item"><a href="#Hash:keyOf">keyOf</a></div>
<div class="menu-item"><a href="#Hash:hasValue">hasValue</a></div>
<div class="menu-item"><a href="#Hash:extend">extend</a></div>
<div class="menu-item"><a href="#Hash:combine">combine</a></div>
<div class="menu-item"><a href="#Hash:erase">erase</a></div>
<div class="menu-item"><a href="#Hash:get">get</a></div>
<div class="menu-item"><a href="#Hash:set">set</a></div>
<div class="menu-item"><a href="#Hash:empty">empty</a></div>
<div class="menu-item"><a href="#Hash:include">include</a></div>
<div class="menu-item"><a href="#Hash:map">map</a></div>
<div class="menu-item"><a href="#Hash:filter">filter</a></div>
<div class="menu-item"><a href="#Hash:every">every</a></div>
<div class="menu-item"><a href="#Hash:some">some</a></div>
<div class="menu-item"><a href="#Hash:getClean">getClean</a></div>
<div class="menu-item"><a href="#Hash:getKeys">getKeys</a></div>
<div class="menu-item"><a href="#Hash:getValues">getValues</a></div>
<div class="menu-item"><a href="#Hash:getLength">getLength</a></div>
<div class="menu-item"><a href="#Hash:toQueryString">toQueryString</a></div>
<h4 class="menu-item"><a href="#Utility">Utility</a></h4>
<div class="menu-item"><a href="#H">H</a></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>198</wp:post_id>
		<wp:post_date><![CDATA[2008-10-24 18:48:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-10-24 09:48:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[hash]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mootools"><![CDATA[MooTools]]></category>
		<category domain="category" nicename="native"><![CDATA[Native]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Event</title>
		<link>https://takahashifumiki.com/web/mootools/203/</link>
		<pubDate>Fri, 24 Oct 2008 10:16:57 +0000</pubDate>
		<dc:creator><![CDATA[takahashi_fumiki]]></dc:creator>
		<guid isPermaLink="false">https://takahashifumiki.com/?p=203</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="main" class="l-border r-border span-15">
<h1 id="Event"><a href="#Event">Native: Event</a></h1>
<p class="description">MooToolsのEventメソッドです。</p>

<h2 id="Event:constructor"><a href="#Event:constructor">Eventメソッド: constructor</a></h2>
<h3 class="description">構文:</h3>
<pre class="javascript"><span class="kw2">new</span> Event<span class="br0">(</span><span class="br0">[</span>event<span class="br0">[</span>, win<span class="br0">]</span><span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>event - (<em>イベント</em>) HTMLEventオブジェクト。</li>
	<li>win   - (<em>window</em>, オプション: 初期値＝window) eventのスコープ。</li>
</ol>
<h4>プロパティ:</h4>
<ul>
	<li>shift         - (<em>真偽値</em>) ユーザがshiftキーを押したらtrue。</li>
	<li>control       - (<em>真偽値</em>) ユーザがctrlキーを押したらtrue。</li>
	<li>alt           - (<em>真偽値</em>) ユーザがaltキーを押したらtrue。</li>
	<li>meta          - (<em>真偽値</em>) ユーザがmetaキーを押したらtrue。</li>
	<li>wheel         - (<em>数</em>) スクロールボタンを動かした回数。</li>
	<li>code          - (<em>数</em>) 押されたキーのキーコード。</li>
	<li>page.x        - (<em>数</em>) window全体から見たマウスのx座標。</li>
	<li>page.y        - (<em>数</em>) window全体から見たマウスのy座標。</li>
	<li>client.x      - (<em>数</em>) windowの見えている部分におけるマウスのx座標。</li>
	<li>client.y      - (<em>数</em>) windowの見えている部分におけるマウスのy座標。</li>
	<li>key           - (<em>文字列</em>) 押されたキーの小文字を返します。キーには 'enter', 'up', 'down', 'left', 'right', 'space', 'backspace', 'delete', 'esc'があります。</li>
	<li>target        - (<em>要素</em>) eventの発生した要素です。パフォーマンスの観点から、<a href="/docs/Element/#dollar">$</a>で拡張していません。</li>
	<li>relatedTarget - (<em>要素</em>) eventが関係しているターゲットです。<a href="/docs/Element/#dollar">$</a>で拡張していません。</li>
</ul>
<h3>例:</h3>
<pre class="javascript">$<span class="br0">(</span><span class="st0">'myLink'</span><span class="br0">)</span>.<span class="me1">addEvent</span><span class="br0">(</span><span class="st0">'keydown'</span>, <span class="kw2">function</span><span class="br0">(</span>event<span class="br0">)</span><span class="br0">{</span>

    <span class="co1">//渡されたeventのパラメータはすでにEventクラスのインスタンスになっています。</span>
    <span class="kw3">alert</span><span class="br0">(</span>event.<span class="me1">key</span><span class="br0">)</span>;   <span class="co1">//押されたキーの名前を小文字で返します。</span>
    <span class="kw3">alert</span><span class="br0">(</span>event.<span class="me1">shift</span><span class="br0">)</span>; <span class="co1">//shiftキーが押されたらtrueを返します。</span>

    <span class="kw1">if</span> <span class="br0">(</span>event.<span class="me1">key</span> == <span class="st0">'s'</span> &amp;&amp; event.<span class="me1">control</span><span class="br0">)</span> <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'Document saved.'</span><span class="br0">)</span>; <span class="co1">//ユーザCtrlとSを押したら実行されます。</span>

<span class="br0">}</span><span class="br0">)</span>;</pre>
<h3>注意点:</h3>
<ul>
	<li>event.pageとevent.clientにアクセスするには、 <a href="http://hsivonen.iki.fi/doctype/">標準準拠</a>で作成されている必要があります。</li>
	<li>addEventによって添付されたすべてのイベントは、mootoolsメソッドを自動的に備えているので、わざわざインスタンス化する必要はありません。</li>
</ul>
<h2 id="Event:stop"><a href="#Event:stop">Eventメソッド: stop</a></h2>
<p class="description">Eventの伝播を止め、同時にpreventDefaultを実行します。</p>

<h3>構文:</h3>
<pre class="javascript">myEvent.<span class="kw3">stop</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) Eventインスタンス。</li>
</ul>
<h3>例:</h3>
<h5>HTML:</h5>
<pre class="javascript">&lt;a id=<span class="st0">"myAnchor"</span> href=<span class="st0">"http://google.com/"</span>&gt;Visit Google.<span class="me1">com</span>&lt;/a&gt;</pre>
<h5>JavaScript</h5>
<pre class="javascript">$<span class="br0">(</span><span class="st0">'myAnchor'</span><span class="br0">)</span>.<span class="me1">addEvent</span><span class="br0">(</span><span class="st0">'click'</span>, <span class="kw2">function</span><span class="br0">(</span>event<span class="br0">)</span><span class="br0">{</span>

    event.<span class="kw3">stop</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//ブラウザがリンク先に移動しないようにします。</span>
    <span class="kw1">this</span>.<span class="me1">set</span><span class="br0">(</span><span class="st0">'text'</span>, <span class="st0">"Where do you think you're going?"</span><span class="br0">)</span>; <span class="co1">//'this'はEventが発生した要素です。</span>

    <span class="br0">(</span><span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
        <span class="kw1">this</span>.<span class="me1">set</span><span class="br0">(</span><span class="st0">'text'</span>, <span class="st0">"Instead visit the Blog."</span><span class="br0">)</span>.<span class="me1">set</span><span class="br0">(</span><span class="st0">'href'</span>, <span class="st0">'http://blog.mootools.net'</span><span class="br0">)</span>;
    <span class="br0">}</span><span class="br0">)</span>.<span class="me1">delay</span><span class="br0">(</span><span class="nu0">500</span>, <span class="kw1">this</span><span class="br0">)</span>;

<span class="br0">}</span><span class="br0">)</span>;</pre>
<h3>注意点:</h3>
<ul>
	<li>関数内でfalseを返すことでも、Eventの伝播を止められます。</li>
</ul>
<h3>参考情報:</h3>
<ul>
	<li><a href="#Element:addEvent">Element.addEvent</a>, <a href="#Event:stopPropagation">Element.stopPropagation</a>, <a href="#Event:preventDefault">Event.preventDefault</a>, <a href="/docs/Native/Function/#Function:delay">Function:delay</a></li>
</ul>
<h2 id="Event:stopPropagation"><a href="#Event:stopPropagation">Eventメソッド: stopPropagation</a></h2>
<p class="description">イベント伝播の抑止のためのクロス・ブラウザメソッドです（イベントのDOMバブリングも抑止します）。</p>

<h3>構文:</h3>
<pre class="javascript">myEvent.<span class="me1">stopPropagation</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) Eventオブジェクト。</li>
</ul>
<h3>例:</h3>
"#myChild"はmyElementと同じ領域をカバーしていません。したがって、'click'イベントの発生場所はクリックする位置によって変わります：
<h5>HTML:</h5>
<pre class="javascript">&lt;div id=<span class="st0">"myElement"</span>&gt;
    &lt;div id=<span class="st0">"myChild"</span>&gt;&lt;/div&gt;

&lt;/div&gt;</pre>
<h5>JavaScript</h5>
<pre class="javascript">$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">addEvent</span><span class="br0">(</span><span class="st0">'click'</span>, <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>

    <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'click'</span><span class="br0">)</span>;
    <span class="kw1">return</span> <span class="kw2">false</span>; <span class="co1">// stopPropagationに同じ。</span>
<span class="br0">}</span><span class="br0">)</span>;
    $<span class="br0">(</span><span class="st0">'myChild'</span><span class="br0">)</span>.<span class="me1">addEvent</span><span class="br0">(</span><span class="st0">'click'</span>, <span class="kw2">function</span><span class="br0">(</span>event<span class="br0">)</span><span class="br0">{</span>

    event.<span class="me1">stopPropagation</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">// イベントのバブルアップを止め、親要素にクリックイベントを発生させません。</span>
<span class="br0">}</span><span class="br0">)</span>;</pre>
<h3>参考情報:</h3>
<ul>
	<li><a href="#Element:addEvent">Element:addEvent</a></li>
	<li><a href="http://developer.mozilla.org/en/docs/DOM:event.stopPropagation">MDC event.stopPropagation</a></li>
</ul>
<h2 id="Event:preventDefault"><a href="#Event:preventDefault">Eventメソッド: preventDefault</a></h2>
<p class="description">イベントのデフォルト・アクションを抑止するためのクロス・ブラウザメソッドです。</p>

<h3>構文:</h3>
<pre class="javascript">myEvent.<span class="me1">preventDefault</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) Eventオブジェクト。</li>
</ul>
<h3>例:</h3>
<h5>HTML:</h5>
<pre class="javascript">&lt;form&gt;
    &lt;input id=<span class="st0">"myCheckbox"</span> type=<span class="st0">"checkbox"</span> /&gt;
&lt;/form&gt;</pre>
<h5>JavaScript</h5>
<pre class="javascript">$<span class="br0">(</span><span class="st0">'myCheckbox'</span><span class="br0">)</span>.<span class="me1">addEvent</span><span class="br0">(</span><span class="st0">'click'</span>, <span class="kw2">function</span><span class="br0">(</span>event<span class="br0">)</span><span class="br0">{</span>
    event.<span class="me1">preventDefault</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//チェックボックスが"checked"になるのを抑止します。</span>

<span class="br0">}</span><span class="br0">)</span>;</pre>
<h3>参考情報:</h3>
<ul>
	<li><a href="#Element:addEvent">Element:addEvent</a></li>
	<li><a href="http://developer.mozilla.org/en/docs/DOM:event.preventDefault">MDC event.preventDefault</a></li>
</ul>
<h1 id="Event-Keys"><a href="#Event-Keys">Hash: Event.Keys</a></h1>
<p class="description">連想配列Event.Keysにプロパティを追加することで、キーコードイベントを追加できます。</p>

<h4>例:</h4>
<pre class="javascript">Event.<span class="me1">Keys</span>.<span class="me1">shift</span> = <span class="nu0">16</span>;
$<span class="br0">(</span><span class="st0">'myInput'</span><span class="br0">)</span>.<span class="me1">addEvent</span><span class="br0">(</span><span class="st0">'keydown'</span>, <span class="kw2">function</span><span class="br0">(</span>event<span class="br0">)</span><span class="br0">{</span>

    <span class="kw1">if</span> <span class="br0">(</span>event.<span class="me1">key</span> == <span class="st0">"shift"</span><span class="br0">)</span> <span class="kw3">alert</span><span class="br0">(</span><span class="st0">"You pressed shift."</span><span class="br0">)</span>;
<span class="br0">}</span><span class="br0">)</span>;</pre>
</div>
<div id="menu" class="span-2 last">
<h4 class="menu-item"><a href="#Event">Event</a></h4>
<div class="menu-item"><a href="#Event:constructor">constructor</a></div>
<div class="menu-item"><a href="#Event:stop">stop</a></div>
<div class="menu-item"><a href="#Event:stopPropagation">stopPropagation</a></div>
<div class="menu-item"><a href="#Event:preventDefault">preventDefault</a></div>
<h4 class="menu-item"><a href="#Event-Keys">Event.Keys</a></h4>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>203</wp:post_id>
		<wp:post_date><![CDATA[2008-10-24 19:16:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-10-24 10:16:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[event]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mootools"><![CDATA[MooTools]]></category>
		<category domain="category" nicename="native"><![CDATA[Native]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Class</title>
		<link>https://takahashifumiki.com/web/mootools/206/</link>
		<pubDate>Mon, 27 Oct 2008 04:00:38 +0000</pubDate>
		<dc:creator><![CDATA[takahashi_fumiki]]></dc:creator>
		<guid isPermaLink="false">https://takahashifumiki.com/?p=206</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="main" class="l-border r-border span-15">
<h1 id="Class"><a href="#Class">Native: Class</a></h1>
<p class="description"><a href="https://takahashifumiki.com/topics/web/mootools">MooTools</a>フレームワークの基本クラスです。</p>

<h2 id="Class:constructor"><a href="#Class:constructor">Classメソッド: constructor</a></h2>
<h3 class="description">構文:</h3>
<pre class="javascript"><span class="kw2">var</span> MyClass = <span class="kw2">new</span> <span class="kw2">Class</span><span class="br0">(</span>properties<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>properties - (<em>オブジェクト</em>) クラスに適用される一連のプロパティ。ExtendsやImplements、initializeなどの特別なプロパティ（下を参照）も受け付けます。</li>
</ol>
<h4>プロパティ: Extends</h4>
<ul>
	<li>(<em>クラス</em>) このクラスが拡張されてできるクラス。</li>
</ul>
このクラスのプロパティはExtendsクラスと同じ名前を持ち、上書きしたメソッドを呼び出すことができます。
<h4>プロパティ: Implements</h4>
<ul>
	<li>(<em>オブジェクト</em>) 渡されたオブジェクトのプロパティがこのClassにコピーされます。</li>
	<li>(<em>クラス</em>) 渡されたクラスのプロパティがターゲット・クラスにコピーされます。</li>
	<li>(<em>配列</em>) オブジェクトやクラスからなる配列で、このプロパティがクラスにコピーされます。</li>
</ul>
ImplementsはExtendsと似ていますが、継承なしでプロパティを上書する点が異なります。
複数のクラスに対してプロパティの初期値を適用するときに役立ちます。
<h4>プロパティ: initialize</h4>
<ul>
	<li>(<em>関数</em>) initialize関数は新しいインスタンスが作成されたときに、このクラスのコンストラクタとなります。</li>
</ul>
<h3>戻り値:</h3>
<ul>
	<li>(<em>クラス</em>) 新たに作られたクラス。</li>
</ul>
<h3>例:</h3>
<h4>クラスの場合:</h4>
<pre class="javascript"><span class="kw2">var</span> Cat = <span class="kw2">new</span> <span class="kw2">Class</span><span class="br0">(</span><span class="br0">{</span>
    initialize: <span class="kw2">function</span><span class="br0">(</span><span class="kw3">name</span><span class="br0">)</span><span class="br0">{</span>

        <span class="kw1">this</span>.<span class="kw3">name</span> = <span class="kw3">name</span>;
    <span class="br0">}</span>
<span class="br0">}</span><span class="br0">)</span>;
<span class="kw2">var</span> myCat = <span class="kw2">new</span> Cat<span class="br0">(</span><span class="st0">'Micia'</span><span class="br0">)</span>;

<span class="kw3">alert</span><span class="br0">(</span>myCat.<span class="kw3">name</span><span class="br0">)</span>; <span class="co1">//アラート'Micia'</span>

<span class="kw2">var</span> Cow = <span class="kw2">new</span> <span class="kw2">Class</span><span class="br0">(</span><span class="br0">{</span>

    initialize: <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
        <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'moooo'</span><span class="br0">)</span>;
    <span class="br0">}</span>
<span class="br0">}</span><span class="br0">)</span>;

<span class="kw2">var</span> Effie = <span class="kw2">new</span> Cow<span class="br0">(</span>$empty<span class="br0">)</span>; <span class="co1">//'moooo'をアラートしません。メソッドが$empty関数によって上書きされているからです。</span></pre>
<h4>Extendsの場合:</h4>
<pre class="javascript"><span class="kw2">var</span> Animal = <span class="kw2">new</span> <span class="kw2">Class</span><span class="br0">(</span><span class="br0">{</span>
    initialize: <span class="kw2">function</span><span class="br0">(</span>age<span class="br0">)</span><span class="br0">{</span>

        <span class="kw1">this</span>.<span class="me1">age</span> = age;
    <span class="br0">}</span>
<span class="br0">}</span><span class="br0">)</span>;
<span class="kw2">var</span> Cat = <span class="kw2">new</span> <span class="kw2">Class</span><span class="br0">(</span><span class="br0">{</span>

    <span class="kw2">Extends</span>: Animal,
    initialize: <span class="kw2">function</span><span class="br0">(</span><span class="kw3">name</span>, age<span class="br0">)</span><span class="br0">{</span>
        <span class="kw1">this</span>.<span class="me1">parent</span><span class="br0">(</span>age<span class="br0">)</span>; <span class="co1">//Animalのinitializeを呼び出します。</span>

        <span class="kw1">this</span>.<span class="kw3">name</span> = <span class="kw3">name</span>;
    <span class="br0">}</span>
<span class="br0">}</span><span class="br0">)</span>;
<span class="kw2">var</span> myCat = <span class="kw2">new</span> Cat<span class="br0">(</span><span class="st0">'Micia'</span>, <span class="nu0">20</span><span class="br0">)</span>;

<span class="kw3">alert</span><span class="br0">(</span>myCat.<span class="kw3">name</span><span class="br0">)</span>; <span class="co1">//アラート 'Micia'.</span>
<span class="kw3">alert</span><span class="br0">(</span>myCat.<span class="me1">age</span><span class="br0">)</span>; <span class="co1">//アラート 20.</span></pre>
<h4>Implementsの場合:</h4>
<pre class="javascript"><span class="kw2">var</span> Animal = <span class="kw2">new</span> <span class="kw2">Class</span><span class="br0">(</span><span class="br0">{</span>
    initialize: <span class="kw2">function</span><span class="br0">(</span>age<span class="br0">)</span><span class="br0">{</span>

        <span class="kw1">this</span>.<span class="me1">age</span> = age;
    <span class="br0">}</span>
<span class="br0">}</span><span class="br0">)</span>;
<span class="kw2">var</span> Cat = <span class="kw2">new</span> <span class="kw2">Class</span><span class="br0">(</span><span class="br0">{</span>

    Implements: Animal,
    setName: <span class="kw2">function</span><span class="br0">(</span><span class="kw3">name</span><span class="br0">)</span><span class="br0">{</span>
        <span class="kw1">this</span>.<span class="kw3">name</span> = <span class="kw3">name</span>
    <span class="br0">}</span>

<span class="br0">}</span><span class="br0">)</span>;
<span class="kw2">var</span> myAnimal = <span class="kw2">new</span> Cat<span class="br0">(</span><span class="nu0">20</span><span class="br0">)</span>;
myAnimal.<span class="me1">setName</span><span class="br0">(</span><span class="st0">'Micia'</span><span class="br0">)</span>;

<span class="kw3">alert</span><span class="br0">(</span>myAnimal.<span class="kw3">name</span><span class="br0">)</span>; <span class="co1">//アラート 'Micia'.</span></pre>
<h2 id="Class:implement"><a href="#Class:implement">Classメソッド: implement</a></h2>
<p class="description">ベースとなるクラスに渡されたプロパティを適用し、新しいクラスを作ります。
プロパティを追加して<a href="#Class:constructor">new Class</a>を行うのと同じですが、既存のクラスを修正するときに便利です。
<h3>構文:</h3>
<pre class="javascript">MyClass.<span class="me1">implement</span><span class="br0">(</span>properties<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>properties - (<em>オブジェクト</em>) ベースとなるクラスに追加するプロパティ。</li>
</ol>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> Animal = <span class="kw2">new</span> <span class="kw2">Class</span><span class="br0">(</span><span class="br0">{</span>
    initialize: <span class="kw2">function</span><span class="br0">(</span>age<span class="br0">)</span><span class="br0">{</span>

        <span class="kw1">this</span>.<span class="me1">age</span> = age;
    <span class="br0">}</span>
<span class="br0">}</span><span class="br0">)</span>;
Animal.<span class="me1">implement</span><span class="br0">(</span><span class="br0">{</span>
    setName: <span class="kw2">function</span><span class="br0">(</span><span class="kw3">name</span><span class="br0">)</span><span class="br0">{</span>

        <span class="kw1">this</span>.<span class="kw3">name</span> = <span class="kw3">name</span>;
    <span class="br0">}</span>
<span class="br0">}</span><span class="br0">)</span>;
<span class="kw2">var</span> myAnimal = <span class="kw2">new</span> Animal<span class="br0">(</span><span class="nu0">20</span><span class="br0">)</span>;
myAnimal.<span class="me1">setName</span><span class="br0">(</span><span class="st0">'Micia'</span><span class="br0">)</span>;

<span class="kw3">alert</span><span class="br0">(</span>myAnimal.<span class="kw3">name</span><span class="br0">)</span>; <span class="co1">//アラート 'Micia'</span></pre>
</div>
<div id="menu" class="span-2 last">
<h4 class="menu-item"><a href="#Class">Class</a></h4>
<div class="menu-item"><a href="#Class:constructor">constructor</a></div>
<div class="menu-item"><a href="#Class:implement">implement</a></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>206</wp:post_id>
		<wp:post_date><![CDATA[2008-10-27 13:00:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-10-27 04:00:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[class]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="class"><![CDATA[Class]]></category>
		<category domain="category" nicename="mootools"><![CDATA[MooTools]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Class.Extras</title>
		<link>https://takahashifumiki.com/web/mootools/208/</link>
		<pubDate>Mon, 27 Oct 2008 05:08:01 +0000</pubDate>
		<dc:creator><![CDATA[takahashi_fumiki]]></dc:creator>
		<guid isPermaLink="false">https://takahashifumiki.com/?p=208</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="main" class="l-border r-border span-15">
<h1 id="Chain"><a href="#Chain">Class: Chain</a></h1>
<p class="description">ある関数の処理が完了してから次の関数を開始する、といった具合に関数を順番に実行するときに役立つクラスです。
このメソッドはどんな<a href="https://takahashifumiki.com/web/mootools/206">クラス</a>にでも<a href="https://takahashifumiki.com/web/mootools/206#Class:implement">Class:implement</a>を用いて実装することができ、<a href="/docs/Fx/Fx">Fx</a>と<a href="/docs/Request/Request">Request</a>にはすでに実装されています。
例えば<a href="/docs/Fx/Fx">Fx</a>においては、複雑なカスタムアニメーションを作るのに使われています。
<h2 id="Chain:constructor"><a href="#Chain:constructor">Chainメソッド: constructor</a></h2>
<h3 class="description">構文:</h3>
<h4>新しいクラスの場合:</h4>
<pre class="javascript"><span class="kw2">var</span> MyClass = <span class="kw2">new</span> <span class="kw2">Class</span><span class="br0">(</span><span class="br0">{</span> Implements: Chain <span class="br0">}</span><span class="br0">)</span>;</pre>
<h4>既存のクラスの場合:</h4>
<pre class="javascript">MyClass.<span class="me1">implement</span><span class="br0">(</span>Chain<span class="br0">)</span>;</pre>
<h4>単一の利用:</h4>
<pre class="javascript"><span class="kw2">var</span> myChain = <span class="kw2">new</span> Chain;</pre>
<h3>例:</h3>
<pre class="javascript">    <span class="kw2">var</span> Todo = <span class="kw2">new</span> <span class="kw2">Class</span><span class="br0">(</span><span class="br0">{</span>
        Implements: Chain,
        initialize: <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>

            <span class="kw1">this</span>.<span class="me1">chain</span>.<span class="me1">apply</span><span class="br0">(</span><span class="kw1">this</span>, arguments<span class="br0">)</span>;
        <span class="br0">}</span>
    <span class="br0">}</span><span class="br0">)</span>;

    <span class="kw2">var</span> myTodoList = <span class="kw2">new</span> Todo<span class="br0">(</span>
        <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span> <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'get groceries'</span><span class="br0">)</span>; <span class="br0">}</span>,
        <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span> <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'go workout'</span><span class="br0">)</span>; <span class="br0">}</span>,
        <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span> <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'code mootools documentation until eyes close involuntarily'</span><span class="br0">)</span>; <span class="br0">}</span>,
        <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span> <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'sleep'</span><span class="br0">)</span>; <span class="br0">}</span>

    <span class="br0">)</span>;</pre>
<h3>参考情報:</h3>
<ul>
	<li><a href="https://takahashifumiki.com/web/mootools/206">Class</a></li>
</ul>
<h2 id="Chain:chain"><a href="#Chain:chain">Chainメソッド: chain</a></h2>
<p class="description">Chainインスタンスの関数呼び出し命令の最後に関数を付け加えます。</p>

<h3>構文:</h3>
<pre class="javascript">myClass.<span class="me1">chain</span><span class="br0">(</span>fn<span class="br0">[</span>, fn2<span class="br0">[</span>, fn3<span class="br0">[</span>, ...<span class="br0">]</span><span class="br0">]</span><span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>fn - (<em>関数</em> または <em>配列</em>) 関数呼び出し命令のに付け加えたい関数（または関数の配列）。関数も、関数の配列も、複数渡すことができます。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) 新しいクラスインスタンス。chainメソッドを使って、再び関数を付け加えることもできます。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="co1">//Fx.TweenはFxクラスを継承しているため、すでにChainクラスを実装しています。</span>
<span class="kw2">var</span> myFx = <span class="kw2">new</span> Fx.<span class="me1">Tween</span><span class="br0">(</span><span class="st0">'myElement'</span>, <span class="st0">'opacity'</span><span class="br0">)</span>;
myFx.<span class="me1">start</span><span class="br0">(</span><span class="nu0">1</span>,<span class="nu0">0</span><span class="br0">)</span>.<span class="me1">chain</span><span class="br0">(</span>

    <span class="co1">//'this'が呼び出し側のオブジェクトを参照していることに注意（この場合は、</span><span class="co1">myFxオブジェクト</span><span class="co1">）</span>
    <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span> <span class="kw1">this</span>.<span class="me1">start</span><span class="br0">(</span><span class="nu0">0</span>,<span class="nu0">1</span><span class="br0">)</span>; <span class="br0">}</span>,
    <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span> <span class="kw1">this</span>.<span class="me1">start</span><span class="br0">(</span><span class="nu0">1</span>,<span class="nu0">0</span><span class="br0">)</span>; <span class="br0">}</span>,
    <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span> <span class="kw1">this</span>.<span class="me1">start</span><span class="br0">(</span><span class="nu0">0</span>,<span class="nu0">1</span><span class="br0">)</span>; <span class="br0">}</span>

<span class="br0">)</span>; <span class="co1">//フェイードアウト、フェードインを二回繰り返します。</span></pre>
<h3>参考情報:</h3>
<ul>
	<li> <a href="/docs/Fx/Fx">Fx</a>, <a href="/docs/Fx/Fx.Tween">Fx.Tween</a></li>
</ul>
<h2 id="Chain:callChain"><a href="#Chain:callChain">Chainメソッド: callChain</a></h2>
<p class="description">Chainインスタンスの最初の関数を削除し、実行します。次の関数が配列の最初になります。</p>

<h3>構文:</h3>
<pre class="javascript">myClass.<span class="me1">callChain</span><span class="br0">(</span><span class="br0">[</span>any arguments<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>渡された引数は"次"の関数に渡されます。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>いろいろ</em>) "次"の関数の戻り値があればそれを返し、ない場合はfalseを返します。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myChain = <span class="kw2">new</span> Chain<span class="br0">(</span><span class="br0">)</span>;
myChain.<span class="me1">chain</span><span class="br0">(</span>
    <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span> <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'do dishes'</span><span class="br0">)</span>; <span class="br0">}</span>,
    <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span> <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'put away clean dishes'</span><span class="br0">)</span>; <span class="br0">}</span>

<span class="br0">)</span>;
myChain.<span class="me1">callChain</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//アラート 'do dishes'.</span>
myChain.<span class="me1">callChain</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//アラート 'put away clean dishes'.</span></pre>
<h2 id="Chain:clearChain"><a href="#Chain:clearChain">Chainメソッド: clearChain</a></h2>
<p class="description">Chainインスタンスの処理命令を空っぽにします。</p>

<h3>構文:</h3>
<pre class="javascript">myClass.<span class="me1">clearChain</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) 新しいクラスインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myFx = Fx.<span class="me1">Tween</span><span class="br0">(</span><span class="st0">'myElement'</span>, <span class="st0">'color'</span><span class="br0">)</span>; <span class="co1">//Fx.TweenはFxを継承しているため、Chainの機能を実装しています。</span>

myFx.<span class="me1">chain</span><span class="br0">(</span><span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span> <span class="kw1">while</span><span class="br0">(</span><span class="kw2">true</span><span class="br0">)</span> <span class="kw3">alert</span><span class="br0">(</span><span class="st0">"D'oh!"</span><span class="br0">)</span>; <span class="br0">}</span><span class="br0">)</span>; <span class="co1">//アラートの無限ループ。</span>

myFx.<span class="me1">clearChain</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//アラートの無限ループが始まる前に、それをキャンセル。</span></pre>
<h3>参考情報:</h3>
<ul>
	<li> <a href="/docs/Fx/Fx">Fx</a>, <a href="/docs/Fx/Fx.Tween">Fx.Tween</a></li>
</ul>
<h1 id="Events"><a href="#Events">Class: Events</a></h1>
<p class="description">便利なクラスです。このクラスのメソッドはどんな<a href="https://takahashifumiki.com/web/mootools/206">クラス</a>でも<a href="https://takahashifumiki.com/web/mootools/206#Class:implement">Class:implement</a>によって実装できます。
例えば<a href="/docs/Fx/Fx">Fx</a>において、このクラスは'complete'、 'start'、 'cancel'のようなFxイベントに対していくつでも関数を追加できるようにするために使われています。
<a href="#Events">Events</a>を実装したクラスのイベントは、オプションかaddEventで追加しなくてはならず、'.options.onEventName'で直接追加してはいけません。
<h3>構文:</h3>
<h4>新しいクラスの場合:</h4>
<pre class="javascript"><span class="kw2">var</span> MyClass = <span class="kw2">new</span> <span class="kw2">Class</span><span class="br0">(</span><span class="br0">{</span> Implements: Events <span class="br0">}</span><span class="br0">)</span>;</pre>
<h4>既存のクラスの場合:</h4>
<pre class="javascript">MyClass.<span class="me1">implement</span><span class="br0">(</span>Events<span class="br0">)</span>;</pre>
<h3>Implements:</h3>
<ul>
	<li>このクラスは他のクラスに新しい機能を追加するために、インプリメントすることができます。</li>
	<li>Eventsは<a href="#Options">Options</a>クラスと協調するように設計されています。オプションプロパティが'on'で始まり、その次が大文字で始まると、イベントとして登録されます(e.g. 'onComplete'は'complete'イベントになります)。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> Widget = <span class="kw2">new</span> <span class="kw2">Class</span><span class="br0">(</span><span class="br0">{</span>

    Implements: Events,
    initialize: <span class="kw2">function</span><span class="br0">(</span>element<span class="br0">)</span><span class="br0">{</span>
        <span class="co1">// ...</span>
    <span class="br0">}</span>,
    complete: <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>

        <span class="kw1">this</span>.<span class="me1">fireEvent</span><span class="br0">(</span><span class="st0">'complete'</span><span class="br0">)</span>;
    <span class="br0">}</span>
<span class="br0">}</span><span class="br0">)</span>;

<span class="kw2">var</span> myWidget = <span class="kw2">new</span> Widget<span class="br0">(</span><span class="br0">)</span>;
myWidget.<span class="me1">addEvent</span><span class="br0">(</span><span class="st0">'complete'</span>, myFunction<span class="br0">)</span>;</pre>
<h3>注意:</h3>
<ul>
	<li>'on'で始まるイベントはまだ全メソッドでサポートされており、'on'のない形に変換されて処理されます (e.g. 'onComplete'は 'complete'になります)。</li>
</ul>
<h3>参考情報:</h3>
<ul>
	<li> <a href="https://takahashifumiki.com/web/mootools/206">Class</a>, <a href="#Options">Options</a></li>
</ul>
<h2 id="Events:addEvent"><a href="#Events:addEvent">Eventsメソッド: addEvent</a></h2>
<p class="description">クラスインスタンスのイベント一覧にイベントを加えます。</p>

<h3>構文:</h3>
<pre class="javascript">myClass.<span class="me1">addEvent</span><span class="br0">(</span>type, fn<span class="br0">[</span>, internal<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>type     - (<em>文字列</em>) イベントのタイプ (e.g. 'complete')。</li>
	<li>fn       - (<em>関数</em>) 実行する関数。</li>
	<li>internal - (<em>真偽値</em>, オプション) 関数のinternalプロパティをセットするならtrue。internalプロパティは削除されないようにするために使われます。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) 新しいクラスインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myFx = <span class="kw2">new</span> Fx.<span class="me1">Tween</span><span class="br0">(</span><span class="st0">'element'</span>, <span class="st0">'opacity'</span><span class="br0">)</span>;
myFx.<span class="me1">addEvent</span><span class="br0">(</span><span class="st0">'start'</span>, myStartFunction<span class="br0">)</span>;</pre>
<h2 id="Events:addEvents"><a href="#Events:addEvents">Eventsメソッド: addEvents</a></h2>
<p class="description"><a href="#Events:addEvent">addEvent</a>と同じですが、一度に複数のイベントを追加できます。</p>

<h3>構文:</h3>
<pre class="javascript">myClass.<span class="me1">addEvents</span><span class="br0">(</span>events<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>events - (<em>オブジェクト</em>) キー＝値のペアを持つオブジェクト。キーがイベント名(e.g. 'start')で、値はイベント発生時に実行したい関数です。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) 新しいクラスインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myFx = <span class="kw2">new</span> Fx.<span class="me1">Tween</span><span class="br0">(</span><span class="st0">'element'</span>, <span class="st0">'opacity'</span><span class="br0">)</span>;
myFx.<span class="me1">addEvents</span><span class="br0">(</span><span class="br0">{</span>

    <span class="st0">'start'</span>: myStartFunction,
    <span class="st0">'complete'</span>: <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
        <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'Done.'</span><span class="br0">)</span>;
    <span class="br0">}</span>

<span class="br0">}</span><span class="br0">)</span>;</pre>
<h2 id="Events:fireEvent"><a href="#Events:fireEvent">Eventsメソッド: fireEvent</a></h2>
<p class="description">クラスインスタンス内の特定のタイプのイベントをすべて発生させます。</p>

<h3>構文:</h3>
<pre class="javascript">myClass.<span class="me1">fireEvent</span><span class="br0">(</span>type<span class="br0">[</span>, args<span class="br0">[</span>, delay<span class="br0">]</span><span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>type  - (<em>文字列</em>) イベントのタイプ(e.g. 'complete')。</li>
	<li>args  - (<em>いろいろ</em>, オプション) 関数に渡す引数。複数の引数を渡す場合は、配列にする必要があります。</li>
	<li>delay - (<em>数</em>, オプション) イベント発生から関数実行までの待機ミリ秒数(初期値＝0)。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) 新しいクラスインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> Widget = <span class="kw2">new</span> <span class="kw2">Class</span><span class="br0">(</span><span class="br0">{</span>

    Implements: Events,
    initialize: <span class="kw2">function</span><span class="br0">(</span>arg1, arg2<span class="br0">)</span><span class="br0">{</span>
        <span class="co1">//...</span>
        <span class="kw1">this</span>.<span class="me1">fireEvent</span><span class="br0">(</span><span class="st0">"initialize"</span>, <span class="br0">[</span>arg1, arg2<span class="br0">]</span>, <span class="nu0">50</span><span class="br0">)</span>;
    <span class="br0">}</span>

<span class="br0">}</span><span class="br0">)</span>;</pre>
<h2 id="Events:removeEvent"><a href="#Events:removeEvent">Eventsメソッド: removeEvent</a></h2>
<p class="description">クラスインスタンスからイベントを削除します。</p>

<h3>構文:</h3>
<pre class="javascript">myClass.<span class="me1">removeEvent</span><span class="br0">(</span>type, fn<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>type - (<em>文字列</em>) イベントのタイプ (e.g. 'complete')。</li>
	<li>fn   - (<em>関数</em>) 取り除きたい関数。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) 新しいクラスインスタンス。</li>
</ul>
<h3>注意点:</h3>
<ul>
	<li>関数のinternalプロパティをtrueにセットしていた場合は削除されません。</li>
</ul>
<h2 id="Events:removeEvents"><a href="#Events:removeEvents">Eventsメソッド: removeEvents</a></h2>
<p class="description">クラスインスタンスから指定したタイプのイベントをすべて削除します。タイプがしていされていなければ、すべてのイベントが削除されます。</p>

<h3>構文:</h3>
<pre class="javascript">myClass.<span class="me1">removeEvents</span><span class="br0">(</span><span class="br0">[</span>events<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>events - (オプション) 渡されていなければすべてのタイプのイベントが削除されます。
<ul>
	<li>(<em>文字列</em>) イベント名(e.g. 'success')。このタイプのイベントがすべて削除されます。</li>
	<li>(<em>オブジェクト</em>) イベントタイプと関数のペアを持つオブジェクト。<a href="#Events:addEvents">addEvents</a>に渡されるような形式。</li>
</ul>
</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) 新しいクラスインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myFx = <span class="kw2">new</span> Fx.<span class="me1">Tween</span><span class="br0">(</span><span class="st0">'myElement'</span>, <span class="st0">'opacity'</span><span class="br0">)</span>;
myFx.<span class="me1">removeEvents</span><span class="br0">(</span><span class="st0">'complete'</span><span class="br0">)</span>;</pre>
<h3>注意点:</h3>
<ul>
	<li>removeEventsは内部イベントを削除しません。<a href="/docs/Element/Element.Event/#Element:removeEvent">Events:removeEvent</a>を見てください。</li>
</ul>
<h1 id="Options"><a href="#Options">Class: Options</a></h1>
<p class="description">役に立つクラスです。このメソッドは<a href="https://takahashifumiki.com/web/mootools/206#Class:implement">Class:implement</a>を用いて、どんなに<a href="https://takahashifumiki.com/web/mootools/206">クラス</a>でも実装できます。
クラスインスタンスのオプション設定を自動化できます。
クラス<a href="#Events">イベント</a>も追加でき、その場合はオプションのプロパティを'on'ではじめ、次の文字を大文字にします (e.g. 'onComplete'は'complete'イベントを追加します)。
<h3>構文:</h3>
<h4>新しいクラスの場合:</h4>
<pre class="javascript"><span class="kw2">var</span> MyClass = <span class="kw2">new</span> <span class="kw2">Class</span><span class="br0">(</span><span class="br0">{</span>Implements: Options<span class="br0">}</span><span class="br0">)</span>;</pre>
<h4>既存のクラスの場合:</h4>
<pre class="javascript">MyClass.<span class="me1">implement</span><span class="br0">(</span>Options<span class="br0">)</span>;</pre>
<h2 id="Options:setOptions"><a href="#Options:setOptions">Optionsメソッド: setOptions</a></h2>
<p class="description">クラスのオプションに渡されたオプションを追加します。</p>

<h3>構文:</h3>
<pre class="javascript">myClass.<span class="me1">setOptions</span><span class="br0">(</span><span class="br0">[</span>options<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>options - (<em>オブジェクト</em>, オプション) 初期値に追加するためのユーザ定義オプション。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) 現在のクラスインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> Widget = <span class="kw2">new</span> <span class="kw2">Class</span><span class="br0">(</span><span class="br0">{</span>
    Implements: Options,
    options: <span class="br0">{</span>
        color: <span class="st0">'#fff'</span>,
        size: <span class="br0">{</span>

            width: <span class="nu0">100</span>,
            height: <span class="nu0">100</span>
        <span class="br0">}</span>
    <span class="br0">}</span>,
    initialize: <span class="kw2">function</span><span class="br0">(</span>options<span class="br0">)</span><span class="br0">{</span>

        <span class="kw1">this</span>.<span class="me1">setOptions</span><span class="br0">(</span>options<span class="br0">)</span>;
    <span class="br0">}</span>
<span class="br0">}</span><span class="br0">)</span>;

<span class="kw2">var</span> myWidget = <span class="kw2">new</span> Widget<span class="br0">(</span><span class="br0">{</span>

    color: <span class="st0">'#f00'</span>,
    size: <span class="br0">{</span>
        width: <span class="nu0">200</span>
    <span class="br0">}</span>
<span class="br0">}</span><span class="br0">)</span>;

<span class="co1">//myWidget.optionsの現在値: {color: #f00, size: {width: 200, height: 100}}</span></pre>
<h3>注意点:</h3>
<ul>
	<li>クラスのオプション初期値に依存して、オプションのプロパティと値は定義されます。</li>
	<li>もしもクラスが<a href="#Events">Events</a>クラスを実装していたら、'on'ではじまり次の文字が大文字である(e.g. 'onComplete')すべてのオプションプロパティはイベントオプションになるため、値に関数を取ることを前提とします。</li>
</ul>
</div>
<div id="menu" class="span-2 last">
<h4 class="menu-item"><a href="#Chain">Chain</a></h4>
<div class="menu-item"><a href="#Chain:constructor">constructor</a></div>
<div class="menu-item"><a href="#Chain:chain">chain</a></div>
<div class="menu-item"><a href="#Chain:callChain">callChain</a></div>
<div class="menu-item"><a href="#Chain:clearChain">clearChain</a></div>
<h4 class="menu-item"><a href="#Events">Events</a></h4>
<div class="menu-item"><a href="#Events:addEvent">addEvent</a></div>
<div class="menu-item"><a href="#Events:addEvents">addEvents</a></div>
<div class="menu-item"><a href="#Events:fireEvent">fireEvent</a></div>
<div class="menu-item"><a href="#Events:removeEvent">removeEvent</a></div>
<div class="menu-item"><a href="#Events:removeEvents">removeEvents</a></div>
<h4 class="menu-item"><a href="#Options">Options</a></h4>
<div class="menu-item"><a href="#Options:setOptions">setOptions</a></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>208</wp:post_id>
		<wp:post_date><![CDATA[2008-10-27 14:08:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-10-27 05:08:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[classextras]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="class"><![CDATA[Class]]></category>
		<category domain="category" nicename="mootools"><![CDATA[MooTools]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Element</title>
		<link>https://takahashifumiki.com/web/mootools/213/</link>
		<pubDate>Sat, 01 Nov 2008 22:47:20 +0000</pubDate>
		<dc:creator><![CDATA[takahashi_fumiki]]></dc:creator>
		<guid isPermaLink="false">https://takahashifumiki.com/?p=213</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="main" class="l-border r-border span-15">
<h1 id="Window"><a href="#Window">Native: Window</a></h1>
<p class="description">次の関数はWindowメソッドとして扱われます。</p>

<h2 id="dollar"><a href="#dollar">関数: $</a></h2>
<p class="description">ドル関数には二つの目的があります : IDで要素を取得すること、そしてInternet Explorerにすべての<a href="#Element">Element</a>メソッドを"掴ませる"ことです。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> myElement = $<span class="br0">(</span>el<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>el - 拡張したい要素。次のいずれかになります:
<ul>
	<li>(<em>要素</em>) 拡張された要素。</li>
	<li>(<em>文字列</em>) 任意のDOM要素のIDを含む文字列。</li>
	<li>(<em>オブジェクト</em>) そのオブジェクトがtoElementメソッドを持っていた場合、要素の取得時にtoElementが呼び出されます。</li>
</ul>
</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>要素</em>) DOM要素。</li>
	<li>(<em>null</em>) IDがマッチしなかったり、toElementメソッドが要素を返さなかった場合はNullを返します。</li>
</ul>
<h3>例:</h3>
<h4>IDによるDOM要素の取得:</h4>
<pre class="javascript"><span class="kw2">var</span> myElement = $<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>;</pre>
<h4>参照を用いたDOM要素を取得:</h4>
<pre class="javascript"><span class="kw2">var</span> div = document.<span class="me1">getElementById</span><span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>;
div = $<span class="br0">(</span>div<span class="br0">)</span>; <span class="co1">//要素に対してすべてのElementメソッドが適用されます。</span></pre>
<h3>注意点:</h3>
<ul>
	<li>このメソッドはその要素やIDが存在するかどうかわからないときに有用です。また、document.getElementById()のショートハンドとしても役立ちます。</li>
	<li>Internet Explorerにおいては、$が最初に呼び出された時に<a href="#Element">Element</a>が拡張され、すべての<a href="#Element">Element</a>メソッドが利用できるようになります。</li>
	<li>SafariやFirefox、OperaのようにHTMLElementをネイティブにサポートしているブラウザでは、すべての<a href="#Element">Element</a>メソッドがDOM要素に対して自動的に適用されます。</li>
	<li>MooToolsは要素を拡張する必要があるか否かを推測するので、悪影響を及ぼすことなくこの関数を何度も呼び出すことができるます。</li>
</ul>
<h2 id="dollars"><a href="#dollars">関数: $$</a></h2>
<p class="description">DOM要素を選び出し、拡張します。$$の戻り値である配列内の要素は、すべての<a href="#Element">Element</a>メソッドを持っています。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> myElements = $$<span class="br0">(</span>aTag<span class="br0">[</span>, anElement<span class="br0">[</span>, Elements<span class="br0">[</span>, ...<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ul>
	<li>次の引数をいくらでも取ることができます:
<ul>
	<li>HTMLCollections,</li>
	<li>要素の配列,</li>
	<li>要素,</li>
	<li>セレクタ文字列</li>
</ul>
</li>
</ul>
<h3>戻り値:</h3>
<ul>
	<li>(<em>配列</em>) - マッチした要素を<a href="#dollar">$</a>によって拡張し、配列にしたもの。</li>
</ul>
<h3>例:</h3>
<h4>タグ名で要素を取得:</h4>
<pre class="javascript">$$<span class="br0">(</span><span class="st0">'a'</span><span class="br0">)</span>; <span class="co1">//ページ内のすべてのアンカータグからなる配列を返します。</span>
$$<span class="br0">(</span><span class="st0">'a'</span>, <span class="st0">'b'</span><span class="br0">)</span>; <span class="co1">//ページ内のすべてのアンカータグとボールドタグからなる配列を返します。</span></pre>
<h4><a href="/docs/Selectors/Selectors">Selectors</a>をインクルードしてCSSセレクターを使用する:</h4>
<pre class="javascript">$$<span class="br0">(</span><span class="st0">'#myElement'</span><span class="br0">)</span>; <span class="co1">//</span><span class="co1">'myElement'</span><span class="co1">というIDを持つ要素だけからなる配列を返します。</span>
$$<span class="br0">(</span><span class="st0">'#myElement a.myClass'</span><span class="br0">)</span>; <span class="co1">//</span><span class="co1">'myElement'というIDを持つDOM要素に含まれており、なおかつ</span><span class="co1">'myClass'</span><span class="co1">というクラス名を持つすべてのアンカータグからなる配列を返します。</span></pre>
<h4>さらに複雑な$$の利用:</h4>
<pre class="javascript"><span class="co1">//引数として渡されたすべての要素とセレクターにマッチした要素を返す配列を生成します。</span>
$$<span class="br0">(</span>myelement1, myelement2, <span class="st0">'a'</span>, <span class="st0">'#myid, #myid2, #myid3'</span>, document.<span class="me1">getElementsByTagName</span><span class="br0">(</span><span class="st0">'div'</span><span class="br0">)</span><span class="br0">)</span>;</pre>
<h3>注意点:</h3>
<ul>
	<li><a href="/docs/Selectors/Selectors">Selectors</a>が読み込まれると、<a href="#dollars">$$</a>はCSSセレクターを受け入れるようになります。そうでなければ、タグ名だけしか使用することはできません。</li>
	<li>一つの要素もマッチしなければ、空の配列が返されます。</li>
	<li>結果のいかんにかかわらず、<a href="#dollars">$$</a>の戻り値のデータ型は配列になります。</li>
</ul>
<h3>参考情報:</h3>
<ul>
	<li>フレームワーク内のどこででも使うことができるように、<a href="/docs/Selectors/Selectors">Selectors</a> のドキュメンテーションに目を通すとよいでしょう。</li>
</ul>
<h1 id="Element"><a href="#Element">Native: Element</a></h1>
<p class="description">拡張されたDOM要素ならば、すべてのメソッドが使えるようにカスタマイズされたNativeです。</p>

<h2 id="Element:constructor"><a href="#Element:constructor">Elementメソッド: constructor</a></h2>
<p class="description">渡されたタイプの新しい要素を作ります。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> myEl = <span class="kw2">new</span> Element<span class="br0">(</span>element<span class="br0">[</span>, properties<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>element - (<em>いろいろ</em>) 生成したい要素のタグ名か、すでに存在しているDOM要素。</li>
	<li>properties - (<em>オブジェクト</em>, オプション) 渡されたプロパティオブジェクトを<a href="#Element:set">Element:set</a>の引数として呼び出します。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>要素</em>) MooToolsによって拡張された新しいHTML要素。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myAnchor = <span class="kw2">new</span> Element<span class="br0">(</span><span class="st0">'a'</span>, <span class="br0">{</span>

    <span class="st0">'href'</span>: <span class="st0">'http://mootools.net'</span>,
    <span class="st0">'class'</span>: <span class="st0">'myClass'</span>,
    <span class="st0">'html'</span>: <span class="st0">'Click me!'</span>,
    <span class="st0">'styles'</span>: <span class="br0">{</span>

        <span class="st0">'display'</span>: <span class="st0">'block'</span>,
        <span class="st0">'border'</span>: <span class="st0">'1px solid black'</span>
    <span class="br0">}</span>,
    <span class="st0">'events'</span>: <span class="br0">{</span>
        <span class="st0">'click'</span>: <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>

            <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'clicked'</span><span class="br0">)</span>;
        <span class="br0">}</span>,
        <span class="st0">'mouseover'</span>: <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
            <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'mouseovered'</span><span class="br0">)</span>;
        <span class="br0">}</span>

    <span class="br0">}</span>
<span class="br0">}</span><span class="br0">)</span>;</pre>
<h3>参考情報:</h3>
<ul>
	<li> <a href="#dollar">$</a>, <a href="#Element:set">Element:set</a></li>
</ul>
<h2 id="Element:getElement"><a href="#Element:getElement">Elementメソッド: getElement</a></h2>
<p class="description">渡されたタグ名にマッチする最初の子要素を取得します。<a href="/docs/Selectors/Selectors">Selectors</a>がインクルードされていれば、CSSセレクターを渡すことができます。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> myElement = myElement.<span class="me1">getElement</span><span class="br0">(</span>tag<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>tag - (<em>文字列</em>) 探しているタグ名。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>いろいろ</em>) マッチすればその要素を返し、しない場合はnullを返します。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> firstDiv = $<span class="br0">(</span>document.<span class="me1">body</span><span class="br0">)</span>.<span class="me1">getElement</span><span class="br0">(</span><span class="st0">'div'</span><span class="br0">)</span>;</pre>
<h3>注意点:</h3>
<ul>
	<li>このメソッドはDocument インスタンスにも利用できます。</li>
	<li>このメソッドは<a href="/docs/Selectors/Selectors">Selectors</a>がインクルードされていると置換されます。</li>
	<li> <a href="/docs/Selectors/Selectors">Selectors</a>は<a href="#Element:getElement">Element:getElement</a>を拡張し、CSSセレクターに基づいたマッチングを可能にします。</li>
</ul>
<h3>参考情報:</h3>
<ul>
	<li>フレームワーク内のどこででも使うことができるように、<a href="/docs/Selectors/Selectors">Selectors</a> のドキュメンテーションに目を通すとよいでしょう。</li>
</ul>
<h2 id="Element:getElements"><a href="#Element:getElements">Elementメソッド: getElements</a></h2>
<p class="description">渡されたタグ名にマッチする子要素をすべて取得します。<a href="/docs/Selectors/Selectors">Selectors</a>がインクルードされていれば、CSSセレクターを渡すことができます。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> myElements = myElement.<span class="me1">getElements</span><span class="br0">(</span>tag<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>tag - (<em>文字列</em>) マッチするタグの文字列。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>配列</em>) マッチした要素からなる<a href="#Elements">Elements</a>配列。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> allAnchors = $<span class="br0">(</span>document.<span class="me1">body</span><span class="br0">)</span>.<span class="me1">getElements</span><span class="br0">(</span><span class="st0">'a'</span><span class="br0">)</span>;</pre>
<h3>注意点:</h3>
<ul>
	<li>このメソッドはDocument インスタンスにも利用できます。</li>
	<li>このメソッドは<a href="/docs/Selectors/Selectors">Selectors</a>がインクルードされていると置換されます。</li>
	<li> <a href="/docs/Selectors/Selectors">Selectors</a>は<a href="#Element:getElement">Element:getElement</a>を拡張し、CSSセレクターに基づいたマッチングを可能にします。</li>
</ul>
<h3>参考情報:</h3>
<ul>
	<li>フレームワーク内のどこででも使うことができるように、<a href="/docs/Selectors/Selectors">Selectors</a> のドキュメンテーションに目を通すとよいでしょう。</li>
</ul>
<h2 id="Element:getElementById"><a href="#Element:getElementById">Elementメソッド: getElementById</a></h2>
<p class="description">特定のIDを持つ子要素を取得します。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> myElement = anElement.<span class="me1">getElementById</span><span class="br0">(</span>id<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>id - (<em>文字列</em>) 見つけたい要素のID。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>いろいろ</em>) マッチすれば要素を、そうでなければnullをかえします。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myChild = $<span class="br0">(</span><span class="st0">'myParent'</span><span class="br0">)</span>.<span class="me1">getElementById</span><span class="br0">(</span><span class="st0">'myChild'</span><span class="br0">)</span>;</pre>
<h3>注意点:</h3>
<ul>
	<li>このメソッドはDocumentインスタンスには使えません。document.getElementByIdがネイティヴに提供されているからです。</li>
</ul>
<h2 id="Element:set"><a href="#Element:set">Elementメソッド: set</a></h2>
<p class="description">"動的引数"メソッドです。渡されたプロパティが<a href="#Element-Properties">Element.Properties</a>ハッシュの'セットしたい'プロパティのいずれかになります。</p>

<h3>構文:</h3>
<pre class="javascript">myElement.<span class="me1">set</span><span class="br0">(</span>arguments<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ul>
	<li>2つの引数のとき(property, value)
<ol>
	<li>property - (<em>文字列</em>) セットしたいプロパティを意味する<a href="#Element-Properties">Element.Properties</a>ハッシュのキー名。</li>
	<li>value - (<em>いろいろ</em>) 指定したプロパティの値。</li>
</ol>
</li>
	<li>1つの引数のとき(properties)
<ol>
	<li>properties - (<em>オブジェクト</em>) 要素にセットしたいプロパティーと値をキー＝値のセットにしたオブジェクト。(以下を参照のこと)</li>
</ol>
</li>
</ul>
<h3>戻り値:</h3>
<ul>
	<li>(<em>要素</em>) この要素。</li>
</ul>
<h3>例:</h3>
<h4>引数2つ(property,value)の場合:</h4>
<pre class="javascript">$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">set</span><span class="br0">(</span><span class="st0">'text'</span>, <span class="st0">'text goes here'</span><span class="br0">)</span>;
$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">set</span><span class="br0">(</span><span class="st0">'class'</span>, <span class="st0">'active'</span><span class="br0">)</span>;

<span class="co1">//'styles'プロパティに</span><span class="co1">Element:setStylesの</span><span class="co1">オブジェクトを渡す</span>
<span class="kw2">var</span> body = $<span class="br0">(</span>document.<span class="me1">body</span><span class="br0">)</span>.<span class="me1">set</span><span class="br0">(</span><span class="st0">'styles'</span>, <span class="br0">{</span>
    <span class="st0">'font'</span>: <span class="st0">'12px Arial'</span>,
    <span class="st0">'color'</span>: <span class="st0">'blue'</span>

<span class="br0">}</span><span class="br0">)</span>;</pre>
<h4>引数1つ（object）の場合:</h4>
<pre class="javascript"><span class="kw2">var</span> myElement = $<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">set</span><span class="br0">(</span><span class="br0">{</span>

    <span class="co1">//'styles'プロパティに</span><span class="co1">Element:setStyles</span><span class="co1">のオブジェクトを渡す。</span>
    <span class="st0">'styles'</span>: <span class="br0">{</span>
        <span class="st0">'font'</span>: <span class="st0">'12px Arial'</span>,
        <span class="st0">'color'</span>: <span class="st0">'blue'</span>,
        <span class="st0">'border'</span>: <span class="st0">'1px solid #f00'</span>

    <span class="br0">}</span>,
    <span class="co1">//'events'プロパティに</span><span class="co1">Element:addEvents</span><span class="co1">のオブジェクトを渡す。</span>
    <span class="st0">'events'</span>: <span class="br0">{</span>
        <span class="st0">'click'</span>: <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span> <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'click'</span><span class="br0">)</span>; <span class="br0">}</span>,
        <span class="st0">'mouseover'</span>: <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span> <span class="kw1">this</span>.<span class="me1">addClass</span><span class="br0">(</span><span class="st0">'over'</span><span class="br0">)</span> <span class="br0">}</span>

    <span class="br0">}</span>,
    <span class="co1">//その他のプロパティには</span><span class="co1">Element:setProperty</span><span class="co1">を利用する。</span>
    <span class="st0">'id'</span>: <span class="st0">'documentBody'</span>
<span class="br0">}</span><span class="br0">)</span>;</pre>
<h3>注意点:</h3>
<ul>
	<li>すべてのproperty引数には、対応する<a href="#Element-Properties">Element.Properties</a>ハッシュのメソッドに渡されます。</li>
	<li><a href="#Element-Properties">Element.Properties</a>に適当なプロパティがない場合、<a href="#Element:setProperty">Element:setProperty</a>に戻されます。</li>
	<li>属性をセットするときに<a href="#Element:setProperty">Element:setProperty</a>を使うならば、小文字で短いプロパティ形式にしてください。具体例は以下になります:
<ul>
	<li>○'for'　×'htmlFor',</li>
	<li>○'class'　×'className'</li>
	<li>○'frameborder'　×'frameBorder'</li>
	<li>などなど。</li>
</ul>
</li>
</ul>
<h3>参考情報:</h3>
<ul>
	<li><a href="#Element">Element</a>, <a href="#Element-Properties">Element.Properties</a>, <a href="#Element:setProperty">Element:setProperty</a>, <a href="/docs/Element/Element.Event#Element:addEvents">Element:addEvents</a>, <a href="/docs/Element/Element.Style#Element:setStyles">Element:setStyles</a></li>
</ul>
<h2 id="Element:get"><a href="#Element:get">Elementメソッド: get</a></h2>
<p class="description">"動的引数"メソッドです。渡されたプロパティが<a href="#Element-Properties">Element.Properties</a>ハッシュの'取得したい'プロパティのいずれかになります。</p>

<h3>構文:</h3>
<pre class="javascript">myElement.<span class="me1">get</span><span class="br0">(</span>property<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>property - (<em>文字列</em>) 取得したいプロパティを意味する<a href="#Element-Properties">Element.Properties</a>ハッシュのキー名。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>いろいろ</em>) <a href="#Element-Properties">Element.Properties</a>ハッシュの'get'関数の実行結果。</li>
</ul>
<h3>例:</h3>
<h4>カスタムgetの使用:</h4>
<pre class="javascript"><span class="kw2">var</span> tag = $<span class="br0">(</span><span class="st0">'myDiv'</span><span class="br0">)</span>.<span class="me1">get</span><span class="br0">(</span><span class="st0">'tag'</span><span class="br0">)</span>; <span class="co1">//戻り値 "div".</span></pre>
<h4>Element属性へのフォールバック:</h4>
<pre class="javascript"><span class="kw2">var</span> id = $<span class="br0">(</span><span class="st0">'myDiv'</span><span class="br0">)</span>.<span class="me1">get</span><span class="br0">(</span><span class="st0">'id'</span><span class="br0">)</span>; <span class="co1">//戻り値 "myDiv".</span>

<span class="kw2">var</span> value = $<span class="br0">(</span><span class="st0">'myInput'</span><span class="br0">)</span>.<span class="me1">get</span><span class="br0">(</span><span class="st0">'value'</span><span class="br0">)</span>; <span class="co1">//myInput要素の値を返します。</span></pre>
<h3>注意点:</h3>
<ul>
	<li><a href="#Element-Properties">Element.Properties</a>ハッシュに対応するキーがなかった場合、渡されたプロパティで<a href="#Element:getProperty">Element:getProperty</a>を行った戻り値が返されます。</li>
</ul>
<h3>参考情報:</h3>
<ul>
	<li> <a href="#Element">Element</a>, <a href="#Element-Properties">Element.Properties</a>, <a href="#Element:getProperty">Element:getProperty</a></li>
</ul>
<h2 id="Element:erase"><a href="#Element:erase">Elementメソッド: erase</a></h2>
<p class="description">"動的引数"メソッドです。渡されたプロパティが<a href="#Element-Properties">Element.Properties</a>ハッシュの'消去したい'プロパティのいずれかになります。</p>

<h3>構文:</h3>
<pre class="javascript">myElement.<span class="me1">erase</span><span class="br0">(</span>property<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>property - (<em>文字列</em>) 消去したいプロパティを意味する<a href="#Element-Properties">Element.Properties</a>ハッシュのキー名。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>いろいろ</em>) <a href="#Element-Properties">Element.Properties</a>ハッシュの'erase'関数の実行結果。</li>
</ul>
<h3>例:</h3>
<pre class="javascript">$<span class="br0">(</span><span class="st0">'myDiv'</span><span class="br0">)</span>.<span class="me1">erase</span><span class="br0">(</span><span class="st0">'id'</span><span class="br0">)</span>; <span class="co1">//myDivからIDを取り除きます。</span>

$<span class="br0">(</span><span class="st0">'myDiv'</span><span class="br0">)</span>.<span class="me1">erase</span><span class="br0">(</span><span class="st0">'class'</span><span class="br0">)</span>; <span class="co1">//myDiv要素は設定されていたクラス名を持っていません。</span></pre>
<h3>注意点:</h3>
<ul>
	<li><a href="#Element-Properties">Element.Properties</a>ハッシュに対応するキーがなかった場合、渡されたプロパティで<a href="#Element:removeProperty">Element:removeProperty</a>を行った戻り値が返されます。</li>
</ul>
<h3>参考情報:</h3>
<ul>
	<li> <a href="#Element">Element</a>, <a href="#Element-Properties">Element.Properties</a>, <a href="#Element:removeProperty">Element:removeProperty</a></li>
</ul>
<h2 id="Element:match"><a href="#Element:match">Elementメソッド: match</a></h2>
<p class="description">渡された引数がその要素にマッチするかどうか、テストします。</p>

<h3>構文:</h3>
<pre class="javascript">myElement.<span class="me1">match</span><span class="br0">(</span>match<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>match - 文字列か要素。
<ul>
	<li>(<em>文字列</em>) 要素に対してテストしたいタグ名。<a href="/docs/Selectors/Selectors">Selectors</a>がインクルードされていれば、単一のCSSセレクターが使用できます。</li>
	<li>(<em>要素</em>) テストしたい要素。</li>
</ul>
</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>真偽値</em>) 要素がマッチしたらtrue。そうでなければflase。</li>
</ul>
<h3>例:</h3>
<h4>タグ名の使用:</h4>
<pre class="javascript"><span class="co1">//</span><span class="co1">#myDiv</span><span class="co1">がdivならば、trueを返します。</span>
$<span class="br0">(</span><span class="st0">'myDiv'</span><span class="br0">)</span>.<span class="me1">match</span><span class="br0">(</span><span class="st0">'div'</span><span class="br0">)</span>;</pre>
<h4>CSSセレクターの使用:</h4>
<pre class="javascript"><span class="co1">//</span><span class="co1">#myDiv内に</span><span class="co1">name属性が"bar"でクラス</span><span class="co1">がfooという要素があればtrue。</span>
$<span class="br0">(</span><span class="st0">'myDiv'</span><span class="br0">)</span>.<span class="me1">match</span><span class="br0">(</span><span class="st0">'.foo[name=bar]'</span><span class="br0">)</span>;</pre>
<h4>要素の使用:</h4>
<pre class="javascript"><span class="kw2">var</span> el = $<span class="br0">(</span><span class="st0">'myDiv'</span><span class="br0">)</span>;
$<span class="br0">(</span><span class="st0">'myDiv'</span><span class="br0">)</span>.<span class="me1">match</span><span class="br0">(</span>el<span class="br0">)</span>; <span class="co1">//戻り値 true</span>

$<span class="br0">(</span><span class="st0">'otherElement'</span><span class="br0">)</span>.<span class="me1">match</span><span class="br0">(</span>el<span class="br0">)</span>; <span class="co1">//戻り値 false</span></pre>
<h2 id="Element:inject"><a href="#Element:inject">Elementメソッド: inject</a></h2>
<p class="description">その要素の子要素として、特定の位置(第2引数でしていします)に要素を挿入します。</p>

<h3>構文:</h3>
<pre class="javascript">myElement.<span class="me1">inject</span><span class="br0">(</span>el<span class="br0">[</span>, where<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>el   - (<em>いろいろ</em>) 要素のIDか、要素そのもの。</li>
	<li>where - (<em>文字列</em>, オプション: 初期値＝'bottom') 要素を挿入する位置。'top'、 'bottom'、 'after'、'before'を指定できます。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>要素</em>)この要素。</li>
</ul>
<h3>例:</h3>
<h5>JavaScript</h5>
<pre class="javascript"><span class="kw2">var</span> myFirstElement  = <span class="kw2">new</span> Element<span class="br0">(</span><span class="st0">'div'</span>, <span class="br0">{</span>id: <span class="st0">'myFirstElement'</span><span class="br0">}</span><span class="br0">)</span>;

<span class="kw2">var</span> mySecondElement = <span class="kw2">new</span> Element<span class="br0">(</span><span class="st0">'div'</span>, <span class="br0">{</span>id: <span class="st0">'mySecondElement'</span><span class="br0">}</span><span class="br0">)</span>;
<span class="kw2">var</span> myThirdElement  = <span class="kw2">new</span> Element<span class="br0">(</span><span class="st0">'div'</span>, <span class="br0">{</span>id: <span class="st0">'myThirdElement'</span><span class="br0">}</span><span class="br0">)</span>;</pre>
<h5>HTMLの結果</h5>
<pre class="javascript">&lt;div id=<span class="st0">"myFirstElement"</span>&gt;&lt;/div&gt;
&lt;div id=<span class="st0">"mySecondElement"</span>&gt;&lt;/div&gt;
&lt;div id=<span class="st0">"myThirdElement"</span>&gt;&lt;/div&gt;</pre>
<h4>末尾に挿入:</h4>
<h5>JavaScript</h5>
<pre class="javascript">myFirstElement.<span class="me1">inject</span><span class="br0">(</span>mySecondElement<span class="br0">)</span>;</pre>
<h5>HTMLの結果</h5>
<pre class="javascript">&lt;div id=<span class="st0">"mySecondElement"</span>&gt;
    &lt;div id=<span class="st0">"myFirstElement"</span>&gt;&lt;/div&gt;
&lt;/div&gt;</pre>
<h4>上に挿入:</h4>
<h5>JavaScript</h5>
<pre class="javascript">myThirdElement.<span class="me1">inject</span><span class="br0">(</span>mySecondElement, <span class="st0">'top'</span><span class="br0">)</span>;</pre>
<h5>HTMLの結果</h5>
<pre class="javascript">&lt;div id=<span class="st0">"mySecondElement"</span>&gt;
    &lt;div id=<span class="st0">"myThirdElement"</span>&gt;&lt;/div&gt;

    &lt;div id=<span class="st0">"myFirstElement"</span>&gt;&lt;/div&gt;
&lt;/div&gt;</pre>
<h4>前に挿入</h4>
<h5>JavaScript</h5>
<pre class="javascript">myFirstElement.<span class="me1">inject</span><span class="br0">(</span>mySecondElement, <span class="st0">'before'</span><span class="br0">)</span>;</pre>
<h5>Resulting HTML</h5>
<pre class="javascript">&lt;div id=<span class="st0">"myFirstElement"</span>&gt;&lt;/div&gt;
&lt;div id=<span class="st0">"mySecondElement"</span>&gt;&lt;/div&gt;</pre>
<h4>次に挿入:</h4>
<h5>JavaScript</h5>
<pre class="javascript">myFirstElement.<span class="me1">inject</span><span class="br0">(</span>mySecondElement, <span class="st0">'after'</span><span class="br0">)</span>;</pre>
<h5>HTMLの結果</h5>
<pre class="javascript">&lt;div id=<span class="st0">"mySecondElement"</span>&gt;&lt;/div&gt;

&lt;div id=<span class="st0">"myFirstElement"</span>&gt;&lt;/div&gt;</pre>
<h3>参考情報:</h3>
<a href="#Element:adopt">Element:adopt</a>, <a href="#Element:grab">Element:grab</a>, <a href="#Element:wraps">Element:wraps</a>
<h2 id="Element:grab"><a href="#Element:grab">Elementメソッド: grab</a></h2>
<p class="description"><a href="#Element:inject">Element:inject</a>と似ていますが、正反対の働きをします。</p>

子要素を起点にした特定の位置(whereパラメータで指定します)に、要素を加えます。
<h3>構文:</h3>
<pre class="javascript">myElement.<span class="me1">grab</span><span class="br0">(</span>el<span class="br0">[</span>, where<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>el - (<em>いろいろ</em>) 要素のidか、要素そのもの。</li>
	<li>where - (<em>文字列</em>, オプション: 初期値＝'bottom') 要素を加える場所。'top'か'bottom'。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>要素</em>) この要素。</li>
</ul>
<h3>例:</h3>
<h5>JavaScript</h5>
<pre class="javascript"><span class="kw2">var</span> myFirstElement = <span class="kw2">new</span> Element<span class="br0">(</span><span class="st0">'div'</span>, <span class="br0">{</span>id: <span class="st0">'myFirstElement'</span><span class="br0">}</span><span class="br0">)</span>;

<span class="kw2">var</span> mySecondElement = <span class="kw2">new</span> Element<span class="br0">(</span><span class="st0">'div'</span>, <span class="br0">{</span>id: <span class="st0">'mySecondElement'</span><span class="br0">}</span><span class="br0">)</span>;

myFirstElement.<span class="me1">grab</span><span class="br0">(</span>mySecondElement<span class="br0">)</span>;</pre>
<h5>HTMLの結果</h5>
<pre class="javascript">&lt;div id=<span class="st0">"myFirstElement"</span>&gt;
    &lt;div id=<span class="st0">"mySecondElement"</span>&gt;&lt;/div&gt;
&lt;/div&gt;</pre>
<h3>参考情報:</h3>
<a href="#Element:adopt">Element:adopt</a>, <a href="#Element:inject">Element:inject</a>, <a href="#Element:wraps">Element:wraps</a>
<h2 id="Element:adopt"><a href="#Element:adopt">Elementメソッド: adopt</a></h2>
<p class="description"><a href="#Element:grab">Element:grab</a>と同じ働きをしますが、複数の要素を適用することができます。</p>

メソッドを実行した要素に、渡された要素を挿入します(結果的に親要素となります)。
<h3>構文:</h3>
<pre class="javascript">myParent.<span class="me1">adopt</span><span class="br0">(</span>el<span class="br0">[</span>, others<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>el - (<em>いろいろ</em>) 要素のid、要素そのもの、要素の配列。</li>
	<li>others - (<em>いろいろ</em>, オプション) 付け加えたい要素を一つ以上、カンマで区切るか、配列にして指定します。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>要素</em>) この要素。</li>
</ul>
<h3>例:</h3>
<h5>JavaScript</h5>
<pre class="javascript"><span class="kw2">var</span> myFirstElement  = <span class="kw2">new</span> Element<span class="br0">(</span><span class="st0">'div'</span>, <span class="br0">{</span>id: <span class="st0">'myFirstElement'</span><span class="br0">}</span><span class="br0">)</span>;

<span class="kw2">var</span> mySecondElement = <span class="kw2">new</span> Element<span class="br0">(</span><span class="st0">'a'</span>, <span class="br0">{</span>id: <span class="st0">'mySecondElement'</span><span class="br0">}</span><span class="br0">)</span>;
<span class="kw2">var</span> myThirdElement  = <span class="kw2">new</span> Element<span class="br0">(</span><span class="st0">'ul'</span>, <span class="br0">{</span>id: <span class="st0">'myThirdElement'</span><span class="br0">}</span><span class="br0">)</span>;

myParent.<span class="me1">adopt</span><span class="br0">(</span>myFirstElement<span class="br0">)</span>;
myParent2.<span class="me1">adopt</span><span class="br0">(</span>myFirstElement, <span class="st0">'mySecondElement'</span><span class="br0">)</span>;
myParent3.<span class="me1">adopt</span><span class="br0">(</span><span class="br0">[</span>myFirstElement, mySecondElement, myThirdElement<span class="br0">]</span><span class="br0">)</span>;</pre>
<h5>HTMLの結果</h5>
<pre class="javascript">&lt;div id=<span class="st0">"myParent"</span>&gt;
    &lt;div id=<span class="st0">"myFirstElement"</span> /&gt;
&lt;/div&gt;
&lt;div id=<span class="st0">"myParent2"</span>&gt;

    &lt;div id=<span class="st0">"myFirstElement"</span> /&gt;
    &lt;a /&gt;
&lt;/div&gt;
&lt;div id=<span class="st0">"myParent3"</span>&gt;
    &lt;div id=<span class="st0">"myFirstElement"</span> /&gt;

    &lt;a /&gt;
    &lt;ul /&gt;
&lt;/div&gt;</pre>
<h3>参考情報:</h3>
<a href="#Element:grab">Element:grab</a>, <a href="#Element:inject">Element:inject</a>, <a href="#Element:wraps">Element:wraps</a>
<h2 id="Element:wraps"><a href="#Element:wraps">Elementメソッド: wraps</a></h2>
<p class="description"><a href="#Element:grab">Element:grab</a>と同じ働きをしますが、グラブした要素を移動する代わりに、この要素でターゲットを包みます。</p>

メソッドを実行した要素は渡された要素の場所まで移動し、その親要素となります。
<h3>構文:</h3>
<pre class="javascript">myParent.<span class="me1">wraps</span><span class="br0">(</span>el<span class="br0">[</span>, where<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>el - (<em>いろいろ</em>) 要素のIDか、要素そのもの。</li>
	<li>where - (<em>文字列</em>, オプション: 初期値＝'bottom') 要素を挿入する場所。'top'か'bottom'。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>要素</em>) この要素。</li>
</ul>
<h3>例:</h3>
<h5>HTML</h5>
<pre class="javascript">&lt;div id=<span class="st0">"myFirstElement"</span>&gt;&lt;/div&gt;</pre>
<h5>JavaScript</h5>
<pre class="javascript"><span class="kw2">var</span> mySecondElement = <span class="kw2">new</span> Element<span class="br0">(</span><span class="st0">'div'</span>, <span class="br0">{</span>id: <span class="st0">'mySecondElement'</span><span class="br0">}</span><span class="br0">)</span>;
mySecondElement.<span class="me1">wraps</span><span class="br0">(</span>$<span class="br0">(</span><span class="st0">'myFirstElement'</span><span class="br0">)</span><span class="br0">)</span>;</pre>
<h5>HTMLの結果</h5>
<pre class="javascript">&lt;div id=<span class="st0">"mySecondElement"</span>&gt;
    &lt;div id=<span class="st0">"myFirstElement"</span>&gt;&lt;/div&gt;
&lt;/div&gt;</pre>
<h2 id="Element:appendText"><a href="#Element:appendText">Elementメソッド: appendText</a></h2>
<p class="description"><a href="#Element:grab">Element:grab</a>と同じ働きをしますが、IDや要素そのものではなく、テキストだけを受け取ります。
テキストノードが要素内に生成され、最上部か最下部に挿入されます。
<h3>構文:</h3>
<pre class="javascript">myElement.<span class="me1">appendText</span><span class="br0">(</span>text<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>text  - (<em>文字列</em>) 付け加えたいテキスト。</li>
	<li>where - (<em>文字列</em>, オプション: 初期値＝'bottom') テキストを挿入する場所。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>要素</em>) 現在の要素インスタンス。</li>
</ul>
<h3>例:</h3>
<h5>HTML</h5>
<pre class="javascript">&lt;div id=<span class="st0">"myElement"</span>&gt;Hey.&lt;/div&gt;</pre>
<h5>JavaScript</h5>
<pre class="javascript">$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">appendText</span><span class="br0">(</span><span class="st0">' Howdy.'</span><span class="br0">)</span>;</pre>
<h5>HTMLの結果</h5>
<pre class="javascript">&lt;div id=<span class="st0">"myElement"</span>&gt;Hey. <span class="me1">Howdy</span>.&lt;/div&gt;</pre>
<h2 id="Element:dispose"><a href="#Element:dispose">Elementメソッド: dispose</a></h2>
<p class="description">DOMから要素を削除します。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> removedElement = myElement.<span class="me1">dispose</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(<em>要素</em>) この要素。この関数の戻り値を受け取っておくと、もう一度<a href="#Element:inject">inject</a>できます。</li>
</ul>
<h3>例:</h3>
<h5>HTML</h5>
<pre class="javascript">&lt;div id=<span class="st0">"myElement"</span>&gt;&lt;/div&gt;

&lt;div id=<span class="st0">"mySecondElement"</span>&gt;&lt;/div&gt;</pre>
<h5>JavaScript</h5>
<pre class="javascript">$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">dispose</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h5>HTMLの結果</h5>
<pre class="javascript">&lt;div id=<span class="st0">"mySecondElement"</span>&gt;&lt;/div&gt;</pre>
<h3>参考情報:</h3>
<ul>
	<li><a href="http://developer.mozilla.org/en/docs/DOM:element.removeChild">MDC Element:removeChild</a></li>
</ul>
<h2 id="Element:clone"><a href="#Element:clone">Elementメソッド: clone</a></h2>
<p class="description">要素を複製して返します。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> copy = myElement.<span class="me1">clone</span><span class="br0">(</span><span class="br0">[</span>contents, keepid<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>contents - (<em>真偽値</em>, オプション: 初期値＝true) falseにセットされると、要素の中身は複製されません。</li>
	<li>keepid - (<em>真偽値</em>, オプション: 初期値＝false) trueにセットされた場合、要素のID属性が保たれます。子ノードについても同様です。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>要素</em>) 複製された要素。</li>
</ul>
<h3>例:</h3>
<h5>HTML</h5>
<pre class="javascript">&lt;div id=<span class="st0">"myElement"</span>&gt;&lt;/div&gt;</pre>
<h5>JavaScript</h5>
<pre class="javascript"><span class="co1">//要素を複製して、要素の次にコピーを挿入します。</span>
<span class="kw2">var</span> clone = $<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">clone</span><span class="br0">(</span><span class="br0">)</span>.<span class="me1">injectAfter</span><span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>;</pre>
<h5>HTMLの結果</h5>
<pre class="javascript">&lt;div id=<span class="st0">"myElement"</span>&gt;ciao&lt;/div&gt;
&lt;div&gt;ciao&lt;/div&gt;</pre>
<h3>注意点:</h3>
<ul>
	<li>複製された要素は元の要素に添附されたイベントを持ちません。イベントを複製するには<a href="/docs/Element/Element.Event#Element:cloneEvents">Element:cloneEvents</a>を使ってください。</li>
	<li>Element.Storageで保存された値は複製されません。</li>
	<li>複製された要素とその子要素は、keepidパラメータで指定しなければ、IDを失います。</li>
</ul>
<h3>参考情報:</h3>
<ul>
	<li> <a href="/docs/Element/Element.Event#Element:cloneEvents">Element:cloneEvents</a>.</li>
</ul>
<h2 id="Element:replaces"><a href="#Element:replaces">Elementメソッド: replaces</a></h2>
<p class="description">この要素を渡された要素で置換します。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> element = myElement.<span class="me1">replaces</span><span class="br0">(</span>el<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>el - (<em>いろいろ</em>) 置換したい要素のIDか、要素そのもの。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>要素</em>) この要素。</li>
</ul>
<h3>例:</h3>
<pre class="javascript">$<span class="br0">(</span><span class="st0">'myNewElement'</span><span class="br0">)</span>.<span class="me1">replaces</span><span class="br0">(</span>$<span class="br0">(</span><span class="st0">'myOldElement'</span><span class="br0">)</span><span class="br0">)</span>;

<span class="co1">//$('myOldElement')はなくなって、$('myNewElement')がその場所に入りました。</span></pre>
<h3>参考情報:</h3>
<ul>
	<li><a href="http://developer.mozilla.org/en/docs/DOM:element.replaceChild">MDC Element:replaceChild</a></li>
</ul>
<h2 id="Element:hasClass"><a href="#Element:hasClass">Elementメソッド: hasClass</a></h2>
<p class="description">この要素が渡されたクラス名を持っているか、確かめます。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> result = myElement.<span class="me1">hasClass</span><span class="br0">(</span>className<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>className - (<em>文字列</em>) 確認したいクラス名。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>真偽値</em>) 要素がクラス名を持っていたらtrue。なければflase。</li>
</ul>
<h3>例:</h3>
<h5>HTML</h5>
<pre class="javascript">&lt;div id=<span class="st0">"myElement"</span> <span class="kw2">class</span>=<span class="st0">"testClass"</span>&gt;&lt;/div&gt;</pre>
<h5>JavaScript</h5>
<pre class="javascript">$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">hasClass</span><span class="br0">(</span><span class="st0">'testClass'</span><span class="br0">)</span>; <span class="co1">//戻り値true</span></pre>
<h2 id="Element:addClass"><a href="#Element:addClass">Elementメソッド: addClass</a></h2>
<p class="description">要素が指定したクラス名を持っていない場合、そのクラス名を加えます。</p>

<h3>構文:</h3>
<pre class="javascript">myElement.<span class="me1">addClass</span><span class="br0">(</span>className<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>className - (<em>文字列</em>) 付け加えたいクラス名。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>要素</em>) この要素。</li>
</ul>
<h3>例:</h3>
<h5>HTML</h5>
<pre class="javascript">&lt;div id=<span class="st0">"myElement"</span> <span class="kw2">class</span>=<span class="st0">"testClass"</span>&gt;&lt;/div&gt;</pre>
<h5>JavaScript</h5>
<pre class="javascript">$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">addClass</span><span class="br0">(</span><span class="st0">'newClass'</span><span class="br0">)</span>;</pre>
<h5>HTMLの結果</h5>
<pre class="javascript">&lt;div id=<span class="st0">"myElement"</span> <span class="kw2">class</span>=<span class="st0">"testClass newClass"</span>&gt;&lt;/div&gt;</pre>
<h2 id="Element:removeClass"><a href="#Element:removeClass">Elementメソッド: removeClass</a></h2>
<p class="description"><a href="#Element:addClass">Element:addClass</a>と似た働きをしますが、要素からクラス名を取り除きます。</p>

<h3>構文:</h3>
<pre class="javascript">myElement.<span class="me1">removeClass</span><span class="br0">(</span>className<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>className - (<em>文字列</em>) 削除したいクラス名。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>要素</em>) この要素。</li>
</ul>
<h3>例:</h3>
<h5>HTML</h5>
<pre class="javascript">&lt;div id=<span class="st0">"myElement"</span> <span class="kw2">class</span>=<span class="st0">"testClass newClass"</span>&gt;&lt;/div&gt;</pre>
<h5>JavaScript</h5>
<pre class="javascript">$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">removeClass</span><span class="br0">(</span><span class="st0">'newClass'</span><span class="br0">)</span>;</pre>
<h5>HTMLの結果</h5>
<pre class="javascript">&lt;div id=<span class="st0">"myElement"</span> <span class="kw2">class</span>=<span class="st0">"testClass"</span>&gt;&lt;/div&gt;</pre>
<h2 id="Element:toggleClass"><a href="#Element:toggleClass">Elementメソッド: toggleClass</a></h2>
<p class="description">その要素が指定したクラス名を持っているか否かに応じて、クラス名を付け加えたり削除したりします。</p>

<h3>構文:</h3>
<pre class="javascript">myElement.<span class="me1">toggleClass</span><span class="br0">(</span>className<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>className - (<em>文字列</em>) 追加、あるいは削除したいクラス名。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>要素</em>) この要素。</li>
</ul>
<h3>例:</h3>
<h5>HTML</h5>
<pre class="javascript">&lt;div id=<span class="st0">"myElement"</span> <span class="kw2">class</span>=<span class="st0">"myClass"</span>&gt;&lt;/div&gt;</pre>
<h5>JavaScript</h5>
<pre class="javascript">$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">toggleClass</span><span class="br0">(</span><span class="st0">'myClass'</span><span class="br0">)</span>;</pre>
<h5>HTMLの結果</h5>
<pre class="javascript">&lt;div id=<span class="st0">"myElement"</span> <span class="kw2">class</span>=<span class="st0">""</span>&gt;&lt;/div&gt;</pre>
<h5>JavaScript</h5>
<pre class="javascript">$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">toggleClass</span><span class="br0">(</span><span class="st0">'myClass'</span><span class="br0">)</span>;</pre>
<h5>HTMLの結果</h5>
<pre class="javascript">&lt;div id=<span class="st0">"myElement"</span> <span class="kw2">class</span>=<span class="st0">"myClass"</span>&gt;&lt;/div&gt;</pre>
<h2 id="Element:getPrevious"><a href="#Element:getPrevious">Elementメソッド: getPrevious</a></h2>
<p class="description">この要素のpreviousSiblingを返します(テキストノードは除きます)。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> previousSibling = myElement.<span class="me1">getPrevious</span><span class="br0">(</span><span class="br0">[</span>match<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>match - (<em>文字列</em>, オプション): 見つけたい要素のタグ名。もし<a href="/docs/Selectors/Selectors">Selectors</a>をインクルードしていれば、CSSセレクターを指定できます。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>いろいろ</em>) 同階層にある一つ前の要素。なければnullを返します。</li>
</ul>
<h2 id="Element:getAllPrevious"><a href="#Element:getAllPrevious">Elementメソッド: getAllPrevious</a></h2>
<p class="description"><a href="#Element:getPrevious">Element:getPrevious</a>と同じですが、マッチしたすべてpreviousSibling(同階層にある一つ前の要素)のを返します。</p>

<h2 id="Element:getNext"><a href="#Element:getNext">Elementメソッド: getNext</a></h2>
<p class="description"><a href="#Element:getPrevious">Element:getPrevious</a>と同じですが、nextSibling(同階層にある一つ後の要素)を探します (テキストノードは除きます)。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> nextSibling = myElement.<span class="me1">getNext</span><span class="br0">(</span><span class="br0">[</span>match<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>match - (<em>文字列</em>, オプション): 探しているタグ名をカンマで区切った文字列。もし<a href="/docs/Selectors/Selectors">Selectors</a>をインクルードしていれば、CSSセレクターを指定できます。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>いろいろ</em>) 同階層にある次の要素。なければnullを返します。</li>
</ul>
<h2 id="Element:getAllNext"><a href="#Element:getAllNext">Elementメソッド: getAllNext</a></h2>
<p class="description">Element.getNextと同じですが、マッチしたすべてのnextSiblingを返します。</p>

<h2 id="Element:getFirst"><a href="#Element:getFirst">Elementメソッド: getFirst</a></h2>
<p class="description"><a href="#Element:getPrevious">Element:getPrevious</a>と同じですが、firstChild (最初の子要素)を探します(テキストノードは除きます)。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> firstElement = myElement.<span class="me1">getFirst</span><span class="br0">(</span><span class="br0">[</span>match<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>match - (<em>文字列</em>, オプション): 探しているタグ名。もし<a href="/docs/Selectors/Selectors">Selectors</a>をインクルードしていれば、CSSセレクターを指定できます。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>いろいろ</em>) 同階層内にある最初の要素。なければnullを返します。</li>
</ul>
<h2 id="Element:getLast"><a href="#Element:getLast">Elementメソッド: getLast</a></h2>
<p class="description"><a href="#Element:getPrevious">Element:getPrevious</a>と同じですが、lastChild(最後の子要素)を探します。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> lastElement = myElement.<span class="me1">getLast</span><span class="br0">(</span><span class="br0">[</span>match<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>match - (<em>文字列</em>, オプション): 探しているタグ名。もし<a href="/docs/Selectors/Selectors">Selectors</a>をインクルードしていれば、CSSセレクターを指定できます。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>いろいろ</em>) 最後の子要素。なければnullを返します。</li>
</ul>
<h2 id="Element:getParent"><a href="#Element:getParent">Elementメソッド: getParent</a></h2>
<p class="description"><a href="#Element:getPrevious">Element:getPrevious</a>と同じですが、親要素を探します。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> parent = myElement.<span class="me1">getParent</span><span class="br0">(</span><span class="br0">[</span>match<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>match - (<em>文字列</em>, オプション): 探しているタグ名。もし<a href="/docs/Selectors/Selectors">Selectors</a>をインクルードしていれば、CSSセレクターを指定できます。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>いろいろ</em>) ターゲットの親要素か、なければnullを返します。</li>
</ul>
<h2 id="Element:getParents"><a href="#Element:getParents">Elementメソッド: getParents</a></h2>
<p class="description"><a href="#Element:getParent">Element:getParent</a>と同じですが、DOMツリーを遡ってすべての親要素を返します。</p>

<h2 id="Element:getChildren"><a href="#Element:getChildren">Elementメソッド: getChildren</a></h2>
<p class="description">すべての子要素(テキストノードは除く)を返します。戻り値は<a href="#Elements">Elements</a>です。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> children = myElement.<span class="me1">getChildren</span><span class="br0">(</span><span class="br0">[</span>match<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>match - (<em>文字列</em>, オプション): 探しているタグ名。もし<a href="/docs/Selectors/Selectors">Selectors</a>をインクルードしていれば、CSSセレクターを指定できます。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>配列</em>) ターゲット要素のすべての子要素からなる<a href="#Elements">Elements</a>配列。テキストノードは除きます。</li>
</ul>
<h2 id="Element:hasChild"><a href="#Element:hasChild">Elementメソッド: hasChild</a></h2>
<p class="description">子要素が指定した条件にマッチするかどうか、試します。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> result = myElement.<span class="me1">hasChild</span><span class="br0">(</span>el<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>el - (<em>いろいろ</em>) 要素そのものか、ID。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>真偽値</em>) 渡された要素が子要素にあればtrue。なければfalse。</li>
</ul>
<h3>例:</h3>
<h5>HTML</h5>
<pre class="javascript">&lt;div id=<span class="st0">"Darth_Vader"</span>&gt;

    &lt;div id=<span class="st0">"Luke"</span>&gt;&lt;/div&gt;
&lt;/div&gt;</pre>
<h5>JavaScript</h5>
<pre class="javascript"><span class="kw1">if</span> <span class="br0">(</span>$<span class="br0">(</span><span class="st0">'Darth_Vader'</span><span class="br0">)</span>.<span class="me1">hasChild</span><span class="br0">(</span><span class="st0">'Luke'</span><span class="br0">)</span><span class="br0">)</span> <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'Luke, I am your father.'</span><span class="br0">)</span>; <span class="co1">// タン タン タン...</span></pre>
<h2 id="Element:empty"><a href="#Element:empty">Elementメソッド: empty</a></h2>
<p class="description">子要素をすべて削除します。</p>

<h3>構文:</h3>
<pre class="javascript">myElement.<span class="me1">empty</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(<em>要素</em>) この要素。</li>
</ul>
<h3>例:</h3>
<h5>HTML</h5>
<pre class="javascript">&lt;div id=<span class="st0">"myElement"</span>&gt;

    &lt;p&gt;&lt;/p&gt;
    &lt;span&gt;&lt;/span&gt;
&lt;/div&gt;</pre>
<h5>JavaScript</h5>
<pre class="javascript">$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">empty</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h5>HTMLの結果</h5>
<pre class="javascript">&lt;div id=<span class="st0">"myElement"</span>&gt;&lt;/div&gt;</pre>
<h2 id="Element:destroy"><a href="#Element:destroy">Elementメソッド: destroy</a></h2>
<p class="description">子要素をすべて削除し、その要素も捨ててしまいます。
ページ更新の前にメモリを空にするのに役立ちます。
<h3>構文:</h3>
<pre class="javascript">myElement.<span class="me1">destroy</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(<em>null</em>)</li>
</ul>
<h2 id="Element:toQueryString"><a href="#Element:toQueryString">Elementメソッド: toQueryString</a></h2>
<p class="description">子input要素を読み取り、その値からクエリ文字列を生成します。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> query = myElement.<span class="me1">toQueryString</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(<em>文字列</em>) input要素のnameとvalueからなるクエリ文字列。</li>
</ul>
<h3>例:</h3>
<h5>HTML</h5>
<pre class="javascript">&lt;form id=<span class="st0">"myForm"</span> action=<span class="st0">"submit.php"</span>&gt;
    &lt;input <span class="kw3">name</span>=<span class="st0">"email"</span> value=<span class="st0">"bob@bob.com"</span> /&gt;

    &lt;input <span class="kw3">name</span>=<span class="st0">"zipCode"</span> value=<span class="st0">"90210"</span> /&gt;
&lt;/form&gt;</pre>
<h5>JavaScript</h5>
<pre class="javascript">$<span class="br0">(</span><span class="st0">'myForm'</span><span class="br0">)</span>.<span class="me1">toQueryString</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//戻り値"email=bob@bob.com&amp;zipCode=90210".</span></pre>
<h2 id="Element:getSelected"><a href="#Element:getSelected">Elementメソッド: getSelected</a></h2>
<p class="description">select要素の選択されているoptionを返します。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> selected = mySelect.<span class="me1">getSelected</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(<em>配列</em>) 選択されている要素の配列。</li>
</ul>
<h3>例:</h3>
<h5>HTML</h5>
<pre class="javascript">&lt;select id=<span class="st0">"country-select"</span> <span class="kw3">name</span>=<span class="st0">"country"</span>&gt;

    &lt;option value=<span class="st0">"US"</span>&gt;United States&lt;/option
    &lt;option value =<span class="st0">"IT"</span>&gt;Italy&lt;/option&gt;
&lt;/select&gt;</pre>
<h5>JavaScript</h5>
<pre class="javascript">$<span class="br0">(</span><span class="st0">'country-select'</span><span class="br0">)</span>.<span class="me1">getSelected</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//ユーザが選択しているものを返します。</span></pre>
<h3>注意点:</h3>
このメソッドは選択されたselect要素の数に関わらず、配列を返します。
もしselect要素が一つならば、一つのアイテムだけを持つ配列が返ります。
<h2 id="Element:getProperty"><a href="#Element:getProperty">Elementメソッド: getProperty</a></h2>
<p class="description">要素の属性を一つ返します。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> myProp = myElement.<span class="me1">getProperty</span><span class="br0">(</span>property<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ul>
	<li>property - (<em>文字列</em>) 取得したい属性。</li>
</ul>
<h3>戻り値:</h3>
<ul>
	<li>(<em>文字列</em>) リクエストした属性値。</li>
</ul>
<h3>例:</h3>
<h5>HTML</h5>
<pre class="javascript">&lt;img id=<span class="st0">"myImage"</span> src=<span class="st0">"mootools.png"</span> title=<span class="st0">"MooTools, the compact JavaScript framework"</span> alt=<span class="st0">""</span> /&gt;</pre>
<h5>JavaScript</h5>
<pre class="javascript"><span class="kw2">var</span> imgProps = $<span class="br0">(</span><span class="st0">'myImage'</span><span class="br0">)</span>.<span class="me1">getProperty</span><span class="br0">(</span><span class="st0">'src'</span><span class="br0">)</span>; <span class="co1">//戻り値: 'mootools.png'.</span></pre>
<h2 id="Element:getProperties"><a href="#Element:getProperties">Elementメソッド: getProperties</a></h2>
<p class="description">要素の属性を複数返します。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> myProps = myElement.<span class="me1">getProperties</span><span class="br0">(</span>properties<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ul>
	<li>properties - (<em>文字列</em>) 取得したいプロパティを複数。</li>
</ul>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) リクエストされたプロパティからなるオブジェクト。</li>
</ul>
<h3>例:</h3>
<h5>HTML</h5>
<pre class="javascript">&lt;img id=<span class="st0">"myImage"</span> src=<span class="st0">"mootools.png"</span> title=<span class="st0">"MooTools, the compact JavaScript framework"</span> alt=<span class="st0">""</span> /&gt;</pre>
<h5>JavaScript</h5>
<pre class="javascript"><span class="kw2">var</span> imgProps = $<span class="br0">(</span><span class="st0">'myImage'</span><span class="br0">)</span>.<span class="me1">getProperties</span><span class="br0">(</span><span class="st0">'id'</span>, <span class="st0">'src'</span>, <span class="st0">'title'</span>, <span class="st0">'alt'</span><span class="br0">)</span>;

<span class="co1">//戻り値: { id: 'myImage', src: 'mootools.png', title: 'MooTools, the compact JavaScript framework', alt: '' }</span></pre>
<h2 id="Element:setProperty"><a href="#Element:setProperty">Elementメソッド: setProperty</a></h2>
<p class="description">この要素に対し、属性や指定したプロパティをセットします。</p>

<h3>引数:</h3>
<ol>
	<li>property - (<em>文字列</em>) 渡された値を設定したいプロパティ。</li>
	<li>value - (<em>いろいろ</em>) プロパティに設定する値。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>要素</em>) - この要素。</li>
</ul>
<h3>例:</h3>
<h5>HTML</h5>
<pre class="javascript">&lt;img id=<span class="st0">"myImage"</span> /&gt;</pre>
<h5>JavaScript</h5>
<pre class="javascript">$<span class="br0">(</span><span class="st0">'myImage'</span><span class="br0">)</span>.<span class="me1">setProperty</span><span class="br0">(</span><span class="st0">'src'</span>, <span class="st0">'mootools.png'</span><span class="br0">)</span>;</pre>
<h5>HTMLの結果</h5>
<pre class="javascript">&lt;img id=<span class="st0">"myImage"</span> src=<span class="st0">"mootools.png"</span> /&gt;</pre>
<h3>注意</h3>
<ul>
	<li>属性をセットするために<a href="#Element:setProperty">Element:setProperty</a>を使うときは、小文字で単純な形式のプロパティ名を使いましょう。例：
<ul>
	<li>○'for'　×'htmlFor',</li>
	<li>○'class'　×'className'</li>
	<li>○'frameborder'　×'frameBorder'</li>
	<li>などなど。</li>
</ul>
</li>
</ul>
<h2 id="Element:setProperties"><a href="#Element:setProperties">Elementメソッド: setProperties</a></h2>
<p class="description">要素に複数の属性を設定します。</p>

<h3>引数:</h3>
<ol>
	<li>properties - (<em>オブジェクト</em>) キー＝値のペアを持つオブジェクト。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>要素</em>) この要素。</li>
</ul>
<h3>例:</h3>
<h5>HTML</h5>
<pre class="javascript">&lt;img id=<span class="st0">"myImage"</span> /&gt;</pre>
<h5>JavaScript</h5>
<pre class="javascript">$<span class="br0">(</span><span class="st0">'myImage'</span><span class="br0">)</span>.<span class="me1">setProperties</span><span class="br0">(</span><span class="br0">{</span>
    src: <span class="st0">'whatever.gif'</span>,
    alt: <span class="st0">'whatever dude'</span>

<span class="br0">}</span><span class="br0">)</span>;</pre>
<h5>HTMLの結果</h5>
<pre class="javascript">&lt;img id=<span class="st0">"myImage"</span> src=<span class="st0">"whatever.gif"</span> alt=<span class="st0">"whatever dude"</span> /&gt;</pre>
<h2 id="Element:removeProperty"><a href="#Element:removeProperty">Elementメソッド: removeProperty</a></h2>
<p class="description">要素から属性を削除します。</p>

<h3>構文:</h3>
<pre class="javascript">myElement.<span class="me1">removeProperty</span><span class="br0">(</span>property<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>property - (<em>文字列</em>) 削除したい属性</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>要素</em>) この要素。</li>
</ul>
<h3>例:</h3>
<h5>HTML</h5>
<pre class="javascript">&lt;a id=<span class="st0">"myAnchor"</span> href=<span class="st0">"#"</span> onmousedown=<span class="st0">"alert('click');"</span>&gt;&lt;/a&gt;</pre>
<h5>JavaScript</h5>
<pre class="javascript"><span class="co1">//うーん... インラインJavaScriptはよくない! 削除してしまいましょう。</span>
$<span class="br0">(</span><span class="st0">'myAnchor'</span><span class="br0">)</span>.<span class="me1">removeProperty</span><span class="br0">(</span><span class="st0">'onmousedown'</span><span class="br0">)</span>;</pre>
<h5>HTMLの結果</h5>
<pre class="javascript">&lt;a id=<span class="st0">"myAnchor"</span> href=<span class="st0">"#"</span>&gt;&lt;/a&gt;</pre>
<h2 id="Element:removeProperties"><a href="#Element:removeProperties">Elementメソッド: removeProperties</a></h2>
<p class="description">要素から複数の属性を削除します。</p>

<h3>構文:</h3>
<pre class="javascript">myElement.<span class="me1">removeProperties</span><span class="br0">(</span>properties<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>properties - (<em>文字列</em>) 削除したい属性をカンマで区切った文字列。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>要素</em>) この要素。</li>
</ul>
<h3>例:</h3>
<h5>HTML</h5>
<pre class="javascript">&lt;a id=<span class="st0">"myAnchor"</span> href=<span class="st0">"#"</span> title=<span class="st0">"hello world"</span>&gt;&lt;/a&gt;</pre>
<h5>JavaScript</h5>
<pre class="javascript">$<span class="br0">(</span><span class="st0">'myAnchor'</span><span class="br0">)</span>.<span class="me1">removeProperties</span><span class="br0">(</span><span class="st0">'id'</span>, <span class="st0">'href'</span>, <span class="st0">'title'</span><span class="br0">)</span>;</pre>
<h5>HTMLの結果</h5>
<pre class="javascript">&lt;a&gt;&lt;/a&gt;</pre>
<h2 id="Element:store"><a href="#Element:store">Elementメソッド: store</a></h2>
<p class="description">要素にリンクしているストレージにアイテムを保存します。</p>

<h3>構文:</h3>
<pre class="javascript">myElement.<span class="me1">store</span><span class="br0">(</span>key, value<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>key - (<em>文字列</em>) 保存した値につけたいキー名。</li>
	<li>value - (<em>いろいろ</em>) 保存したい値。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>要素</em>) この要素。</li>
</ul>
<h3>例:</h3>
<pre class="javascript">$<span class="br0">(</span><span class="st0">'element'</span><span class="br0">)</span>.<span class="me1">store</span><span class="br0">(</span><span class="st0">'someProperty'</span>, someValue<span class="br0">)</span>;</pre>
<h2 id="Element:retrieve"><a href="#Element:retrieve">Elementメソッド: retrieve</a></h2>
<p class="description">要素のストレージから値を取得します。</p>

<h3>構文:</h3>
<pre class="javascript">myElement.<span class="me1">retrieve</span><span class="br0">(</span>key<span class="br0">[</span>, <span class="kw2">default</span><span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>key - (<em>文字列</em>) ストレージから取り出したい値のキー名。</li>
	<li>default - (<em>いろいろ</em>, オプション) 初期値。値が保存されていなければ、これが返されます。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>いろいろ</em>) キーに結びつけられた値。</li>
</ul>
<h3>例:</h3>
<pre class="javascript">$<span class="br0">(</span><span class="st0">'element'</span><span class="br0">)</span>.<span class="me1">retrieve</span><span class="br0">(</span><span class="st0">'someProperty'</span><span class="br0">)</span>; <span class="co1">// 戻り値someValue (上の例を参照のこと)</span></pre>
<h1 id="Element-Properties"><a href="#Element-Properties">Hash: Element.Properties</a></h1>
<p class="description">このハッシュには<a href="#Element:get">Element:get</a>、<a href="#Element:set">Element:set</a>、<a href="#Element:erase">Element:erase</a>で渡される第1引数に対応した関数が入っています。</p>

<h3>要素にカスタムプロパティを付け加える</h3>
<pre class="javascript">Element.<span class="me1">Properties</span>.<span class="me1">disabled</span> = <span class="br0">{</span>

    get: <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>

        <span class="kw1">return</span> <span class="kw1">this</span>.<span class="me1">disabled</span>;
    <span class="br0">}</span>

    set: <span class="kw2">function</span><span class="br0">(</span>value<span class="br0">)</span><span class="br0">{</span>

        <span class="kw1">this</span>.<span class="me1">disabled</span> = !!value;
        <span class="kw1">this</span>.<span class="me1">setAttribute</span><span class="br0">(</span><span class="st0">'disabled'</span>, !!value<span class="br0">)</span>;
    <span class="br0">}</span>

<span class="br0">}</span>;</pre>
<h3>要素のカスタムプロパティを利用する</h3>
<pre class="javascript"><span class="co1">//"disabled"プロパティを取得。</span>
$<span class="br0">(</span>element<span class="br0">)</span>.<span class="me1">get</span><span class="br0">(</span><span class="st0">'disabled'</span><span class="br0">)</span>;

<span class="co1">//"disabled"プロパティにtrueをセットし、属性にする。</span>
$<span class="br0">(</span>element<span class="br0">)</span>.<span class="me1">set</span><span class="br0">(</span><span class="st0">'disabled'</span>, <span class="kw2">true</span><span class="br0">)</span>;</pre>
<h3>注意点:</h3>
さらにプロパティをセットできるよう、自動的に要素を返します。
<h3>オブジェクトの利用:</h3>
さらに、オブジェクトを<a href="#Element:set">set</a>メソッドのパラメータとしてを使うことで、これらのカスタム関数を利用できます。
<h4>例:</h4>
<pre class="javascript"><span class="co1">//setの利用:</span>

$<span class="br0">(</span>divElement<span class="br0">)</span>.<span class="me1">set</span><span class="br0">(</span><span class="br0">{</span>html: <span class="st0">'&lt;p&gt;Hello &lt;em&gt;People&lt;/em&gt;!&lt;/p&gt;'</span>, style: <span class="st0">'background:red'</span><span class="br0">}</span><span class="br0">)</span>;

<span class="co1">//new Elementsでの利用(setと同じ働きをします):</span>
<span class="kw2">new</span> Element<span class="br0">(</span><span class="st0">'input'</span>, <span class="br0">{</span>type: <span class="st0">'checkbox'</span>, checked: <span class="kw2">true</span>, disabled: <span class="kw2">true</span><span class="br0">}</span><span class="br0">)</span>;</pre>
<h2 id="Element-Properties:html"><a href="#Element-Properties:html">Elementプロパティ: html</a></h2>
<h3 class="description">Set:</h3>
要素のinnerHTMLをセットします。
<h4>構文:</h4>
<pre class="javascript">myElement.<span class="me1">set</span><span class="br0">(</span><span class="st0">'html'</span>, <span class="br0">[</span>htmlString<span class="br0">[</span>, htmlString2<span class="br0">[</span>, htmlString3<span class="br0">[</span>, ..<span class="br0">]</span><span class="br0">]</span><span class="br0">]</span><span class="br0">)</span>;</pre>
<h4>引数:</h4>
<ol>
	<li>HTMLを持ったパラメータ文字列を幾つでも。</li>
</ol>
<h4>戻り値:</h4>
<ul>
	<li>(<em>要素</em>) この要素。</li>
</ul>
<h4>例:</h4>
<h5>HTML</h5>
<pre class="javascript">&lt;div id=<span class="st0">"myElement"</span>&gt;&lt;/div&gt;</pre>
<h5>JavaScript</h5>
<pre class="javascript">$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">set</span><span class="br0">(</span><span class="st0">'html'</span>, <span class="st0">'&lt;div&gt;&lt;/div&gt;'</span>, <span class="st0">'&lt;p&gt;&lt;/p&gt;'</span><span class="br0">)</span>;</pre>
<h5>HTMLの結果</h5>
<pre class="javascript">&lt;div id=<span class="st0">"myElement"</span>&gt;
    &lt;div&gt;&lt;/div&gt;
    &lt;p&gt;&lt;/p&gt;
&lt;/div&gt;</pre>
<h3>Get:</h3>
要素のinnerHTMLを返します。
<h4>構文:</h4>
<pre class="javascript">myElement.<span class="me1">get</span><span class="br0">(</span><span class="st0">'html'</span><span class="br0">)</span>;</pre>
<h4>戻り値:</h4>
<ul>
	<li>(<em>text</em>) この要素のinnerHTML。</li>
</ul>
<h2 id="Element-Properties:text"><a href="#Element-Properties:text">Elementプロパティ: text</a></h2>
<h3 class="description">Set:</h3>
要素の中にテキストをセットします。
<h4>構文:</h4>
<pre class="javascript">myElement.<span class="me1">set</span><span class="br0">(</span><span class="st0">'text'</span>, text<span class="br0">)</span>;</pre>
<h4>引数:</h4>
<ol>
	<li>text - (<em>文字列</em>) 要素内の新しいテキストコンテンツ。</li>
</ol>
<h4>戻り値:</h4>
<ul>
	<li>(<em>要素</em>) この要素。</li>
</ul>
<h4>例:</h4>
<h5>HTML</h5>
<pre class="javascript">&lt;div id=<span class="st0">"myElement"</span>&gt;&lt;/div&gt;</pre>
<h5>JavaScript</h5>
<pre class="javascript">$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">set</span><span class="br0">(</span><span class="st0">'text'</span>, <span class="st0">'some text'</span><span class="br0">)</span>;

<span class="co1">//myElementのテキストは'some text'になりました。</span></pre>
<h5>HTMLの結果</h5>
<pre class="javascript">&lt;div id=<span class="st0">"myElement"</span>&gt;some text&lt;/div&gt;</pre>
<h3>Get:</h3>
要素の中のテキストを取得します。
<h4>構文:</h4>
<pre class="javascript"><span class="kw2">var</span> myText = myElement.<span class="me1">get</span><span class="br0">(</span><span class="st0">'text'</span><span class="br0">)</span>;</pre>
<h4>戻り値:</h4>
<ul>
	<li>(<em>文字列</em>) 要素内のテキスト。</li>
</ul>
<h4>例:</h4>
<h5>HTML</h5>
<pre class="javascript">&lt;div id=<span class="st0">"myElement"</span>&gt;my text&lt;/div&gt;</pre>
<h5>JavaScript</h5>
<pre class="javascript"><span class="kw2">var</span> myText = $<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">get</span><span class="br0">(</span><span class="st0">'text'</span><span class="br0">)</span>; <span class="co1">//myText = 'my text'.</span></pre>
<h2 id="Element-Properties:tag"><a href="#Element-Properties:tag">Elementプロパティ: tag</a></h2>
<h3 class="description">Get:</h3>
要素のタグ名を小文字で返します。
<h4>構文:</h4>
<pre class="javascript"><span class="kw2">var</span> myTag = myElement.<span class="me1">get</span><span class="br0">(</span><span class="st0">'tag'</span><span class="br0">)</span>;</pre>
<h4>戻り値:</h4>
<ul>
	<li>(<em>文字列</em>) 小文字のタグ名。</li>
</ul>
<h4>例:</h4>
<h5>HTML</h5>
<pre class="javascript">&lt;img id=<span class="st0">"myImage"</span> /&gt;</pre>
<h5>JavaScript</h5>
<pre class="javascript"><span class="kw2">var</span> myTag = $<span class="br0">(</span><span class="st0">'myImage'</span><span class="br0">)</span>.<span class="me1">get</span><span class="br0">(</span><span class="st0">'tag'</span><span class="br0">)</span>; <span class="co1">// myTag = 'img'.</span></pre>
<h1 id="IFrame"><a href="#IFrame">Native: IFrame</a></h1>
<p class="description">簡単にインラインフレームを生成し、操作するためのカスタムNativeです。</p>

<h2 id="IFrame:constructor"><a href="#IFrame:constructor">IFrameメソッド: constructor</a></h2>
<p class="description">インラインフレームHTML要素を生成し、そのwindowとdocumentをMooToolsで拡張します。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> myIFrame = <span class="kw2">new</span> IFrame<span class="br0">(</span><span class="br0">[</span>el<span class="br0">]</span><span class="br0">[</span>, props<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>el - (<em>いろいろ</em>, オプション) 変換したいiframeのIDか、iframe要素そのもの。渡されなければ、新しいiframeが作られます（デフォルト）。</li>
	<li>props - (<em>オブジェクト</em>, オプション) 新しいiframeに適用されるプロパティ。<a href="#Element:constructor">Element:constructor</a>の属性と同じ。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>要素</em>) 新しいiframeHTML要素。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myIFrame = <span class="kw2">new</span> IFrame<span class="br0">(</span><span class="br0">{</span>

    src: <span class="st0">'http://mootools.net/'</span>,

    styles: <span class="br0">{</span>
        width: <span class="nu0">800</span>,
        height: <span class="nu0">600</span>,
        border: <span class="st0">'1px solid #ccc'</span>

    <span class="br0">}</span>,

    events: <span class="br0">{</span>

        mouseenter: <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
            <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'Welcome aboard.'</span><span class="br0">)</span>;
        <span class="br0">}</span>,

        mouseleave: <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
            <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'Goodbye!'</span><span class="br0">)</span>;
        <span class="br0">}</span>,

        load: <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
            <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'The iframe has finished loading.'</span><span class="br0">)</span>;
        <span class="br0">}</span>

    <span class="br0">}</span>

<span class="br0">}</span><span class="br0">)</span>;</pre>
<h3>注意点:</h3>
<ul>
	<li>iframeが"ホスト"と同じドメインにあれば、そのwindowとdocumentはMooToolsによって拡張され、その中でMooToolsを最大限に使うことができます。</li>
	<li>もしiframeがすでに存在していて、idと異なるnameを持っている場合、nameはidと同じものに変更されます。</li>
	<li>もしiframeが異なるドメインのものならば、MooToolsメソッドによって拡張されません。</li>
</ul>
<h1 id="Elements"><a href="#Elements">Native: Elements</a></h1>
<p class="description">Elementsクラスは<a href="#Element">Element</a>と<a href="/docs/Native/Array">Array</a>のメソッドすべてを<a href="#Elements">Elements</a>配列に使えるようにします。</p>

<h2 id="Elements:constructor"><a href="#Elements:constructor">Elementsメソッド: constructor</a></h2>
<h3 class="description">構文:</h3>
<pre class="javascript"><span class="kw2">var</span> myElements = <span class="kw2">new</span> Elements<span class="br0">(</span>elements<span class="br0">[</span>, options<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>elements - (<em>いろいろ</em>) 要素の配列か、HTMLCollection オブジェクト。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>配列</em>) <a href="#Element">Element</a>、<a href="#Elements">Elements</a>、<a href="/docs/Native/Array">Array</a>のメソッドによって拡張された配列。</li>
</ul>
<h3>例:</h3>
<h4>すべての段落の色を赤に変更:</h4>
<pre class="javascript">$$<span class="br0">(</span><span class="st0">'p'</span><span class="br0">)</span>.<span class="me1">each</span><span class="br0">(</span><span class="kw2">function</span><span class="br0">(</span>el<span class="br0">)</span><span class="br0">{</span>

    el.<span class="me1">setStyle</span><span class="br0">(</span><span class="st0">'color'</span>, <span class="st0">'red'</span><span class="br0">)</span>;
<span class="br0">}</span><span class="br0">)</span>;

<span class="co1">//$$('myselector')はの</span><span class="co1">Element</span><span class="co1">メソッドを継承しているので、</span>
<span class="co1">//以下の例は上と同じ効果があります。</span>

$$<span class="br0">(</span><span class="st0">'p'</span><span class="br0">)</span>.<span class="me1">setStyle</span><span class="br0">(</span><span class="st0">'color'</span>, <span class="st0">'red'</span><span class="br0">)</span>;</pre>
<h4>配列から要素を生成:</h4>
<pre class="javascript"><span class="kw2">var</span> myElements = <span class="kw2">new</span> Elements<span class="br0">(</span><span class="br0">[</span><span class="st0">'myElementID'</span>, $<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>, <span class="st0">'myElementID2'</span>, document.<span class="me1">getElementById</span><span class="br0">(</span><span class="st0">'myElementID3'</span><span class="br0">)</span><span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>注意点:</h3>
<ul>
	<li>MooToolsでは、ノードコレクションを返す全てのDOM関数(例えば<a href="#dollars">$$</a>)の戻り値は、Elementsのインスタンスになっています。</li>
	<li>Elementsは配列であるため、<a href="#Element">Element</a>と<a href="#Elements">Elements</a>の元となる<a href="/docs/Native/Array">Array</a>の全メソッドを継承しています。</li>
	<li>Elementsインスタンスのすべてのノードは、<a href="#Element">Element</a>のメソッドをすべて継承しています。</li>
</ul>
<h3>参考情報:</h3>
<ul>
	<li> <a href="#dollars">$$</a>, <a href="#dollar">$</a>, <a href="#Element">Element</a>, <a href="#Elements">Elements</a>, <a href="/docs/Native/Array">Array</a></li>
</ul>
<h2 id="Elements:filter"><a href="#Elements:filter">Elementsメソッド: filter</a></h2>
<p class="description">与えられたタグ名によって、要素コレクションをフィルタリングします。<a href="/docs/Selectors/Selectors">Selectors</a>がインクルードされていれば、CSSセレクターでフィルタリングをできます。
関数でフィルタリングを行うという点で、<a href="/docs/Native/Array/#Array:filter">Array:filter</a>と同じです。
<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> filteredElements = elements.<span class="me1">filter</span><span class="br0">(</span>selector<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>selector - (<em>いろいろ</em>) CSSセレクター。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>配列</em>) この<a href="#Elements">Elements</a>インスタンスのサブセット。</li>
</ul>
</div>
<div id="menu" class="span-2 last">
<h4 class="menu-item"><a href="#Window">Window</a></h4>
<div class="menu-item"><a href="#dollar">dollar</a></div>
<div class="menu-item"><a href="#dollars">dollars</a></div>
<h4 class="menu-item"><a href="#Element">Element</a></h4>
<div class="menu-item"><a href="#Element:constructor">constructor</a></div>
<div class="menu-item"><a href="#Element:getElement">getElement</a></div>
<div class="menu-item"><a href="#Element:getElements">getElements</a></div>
<div class="menu-item"><a href="#Element:getElementById">getElementById</a></div>
<div class="menu-item"><a href="#Element:set">set</a></div>
<div class="menu-item"><a href="#Element:get">get</a></div>
<div class="menu-item"><a href="#Element:erase">erase</a></div>
<div class="menu-item"><a href="#Element:match">match</a></div>
<div class="menu-item"><a href="#Element:inject">inject</a></div>
<div class="menu-item"><a href="#Element:grab">grab</a></div>
<div class="menu-item"><a href="#Element:adopt">adopt</a></div>
<div class="menu-item"><a href="#Element:wraps">wraps</a></div>
<div class="menu-item"><a href="#Element:appendText">appendText</a></div>
<div class="menu-item"><a href="#Element:dispose">dispose</a></div>
<div class="menu-item"><a href="#Element:clone">clone</a></div>
<div class="menu-item"><a href="#Element:replaces">replaces</a></div>
<div class="menu-item"><a href="#Element:hasClass">hasClass</a></div>
<div class="menu-item"><a href="#Element:addClass">addClass</a></div>
<div class="menu-item"><a href="#Element:removeClass">removeClass</a></div>
<div class="menu-item"><a href="#Element:toggleClass">toggleClass</a></div>
<div class="menu-item"><a href="#Element:getPrevious">getPrevious</a></div>
<div class="menu-item"><a href="#Element:getAllPrevious">getAllPrevious</a></div>
<div class="menu-item"><a href="#Element:getNext">getNext</a></div>
<div class="menu-item"><a href="#Element:getAllNext">getAllNext</a></div>
<div class="menu-item"><a href="#Element:getFirst">getFirst</a></div>
<div class="menu-item"><a href="#Element:getLast">getLast</a></div>
<div class="menu-item"><a href="#Element:getParent">getParent</a></div>
<div class="menu-item"><a href="#Element:getParents">getParents</a></div>
<div class="menu-item"><a href="#Element:getChildren">getChildren</a></div>
<div class="menu-item"><a href="#Element:hasChild">hasChild</a></div>
<div class="menu-item"><a href="#Element:empty">empty</a></div>
<div class="menu-item"><a href="#Element:destroy">destroy</a></div>
<div class="menu-item"><a href="#Element:toQueryString">toQueryString</a></div>
<div class="menu-item"><a href="#Element:getSelected">getSelected</a></div>
<div class="menu-item"><a href="#Element:getProperty">getProperty</a></div>
<div class="menu-item"><a href="#Element:getProperties">getProperties</a></div>
<div class="menu-item"><a href="#Element:setProperty">setProperty</a></div>
<div class="menu-item"><a href="#Element:setProperties">setProperties</a></div>
<div class="menu-item"><a href="#Element:removeProperty">removeProperty</a></div>
<div class="menu-item"><a href="#Element:removeProperties">removeProperties</a></div>
<div class="menu-item"><a href="#Element:store">store</a></div>
<div class="menu-item"><a href="#Element:retrieve">retrieve</a></div>
<h4 class="menu-item"><a href="#Element-Properties">Element.Properties</a></h4>
<div class="menu-item"><a href="#Element-Properties:html">html</a></div>
<div class="menu-item"><a href="#Element-Properties:text">text</a></div>
<div class="menu-item"><a href="#Element-Properties:tag">tag</a></div>
<h4 class="menu-item"><a href="#IFrame">IFrame</a></h4>
<div class="menu-item"><a href="#IFrame:constructor">constructor</a></div>
<h4 class="menu-item"><a href="#Elements">Elements</a></h4>
<div class="menu-item"><a href="#Elements:constructor">constructor</a></div>
<div class="menu-item"><a href="#Elements:filter">filter</a></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>213</wp:post_id>
		<wp:post_date><![CDATA[2008-11-02 07:47:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-11-01 22:47:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[element]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="element"><![CDATA[Element]]></category>
		<category domain="category" nicename="mootools"><![CDATA[MooTools]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Element.Event</title>
		<link>https://takahashifumiki.com/web/mootools/224/</link>
		<pubDate>Sat, 01 Nov 2008 23:39:14 +0000</pubDate>
		<dc:creator><![CDATA[takahashi_fumiki]]></dc:creator>
		<guid isPermaLink="false">https://takahashifumiki.com/?p=224</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="main" class="l-border r-border span-15">
<h1 id="Element"><a href="#Element">Native: Element</a></h1>
<ul class="description">
	<li>ドル関数によって、どんなDOM要素にもメソッドを適用できるカスタムNativeです。</li>
	<li>これらのメソッドはwindowとdocumentオブジェクトにも使えます。</li>
</ul>
<h3>注意点:</h3>
<ul>
	<li>Internet Explorerは<a href="#Element:fireEvent">Element:fireEvent</a>を使わない限り、ランダムにイベントを発生させます。</li>
</ul>
<h2 id="Element:addEvent"><a href="#Element:addEvent">Elementメソッド: addEvent</a></h2>
<p class="description">DOM要素にイベントリスナーを添附します。</p>

<h3>構文:</h3>
<pre class="javascript">myElement.<span class="me1">addEvent</span><span class="br0">(</span>type, fn<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>type - (<em>文字列</em>) 監視したいイベント名('click', 'load', など)。接頭辞'on'はつけません。</li>
	<li>fn   - (<em>関数</em>) 実行したい関数。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>要素</em>) この要素。</li>
</ul>
<h3>例:</h3>
<h5>HTML:</h5>
<pre class="javascript">&lt;div id=<span class="st0">"myElement"</span>&gt;Click me.&lt;/div&gt;</pre>
<h5>JavaScript</h5>
<pre class="javascript">$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">addEvent</span><span class="br0">(</span><span class="st0">'click'</span>, <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>

    <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'clicked!'</span><span class="br0">)</span>;
<span class="br0">}</span><span class="br0">)</span>;</pre>
<h3>注意点:</h3>
<ul>
	<li>リスナー関数の中でfalseを返すか、<a href="#Event:stop">Event:stop</a>を使うことでイベントを停止できます。</li>
	<li>このメソッドはdocumentとwindowにも添附できます。</li>
</ul>
<h3>参考情報:</h3>
<ul>
	<li><a href="http://www.w3schools.com/html/html_eventattributes.asp">w3schools Event Attributes</a></li>
</ul>
<h2 id="Element:removeEvent"><a href="#Element:removeEvent">Elementメソッド: removeEvent</a></h2>
<p class="description">Element.addEventと同じですが、代わりに指定したイベントリスナーを取り除きます。</p>

<h3>構文:</h3>
<pre class="javascript">myElement.<span class="me1">removeEvent</span><span class="br0">(</span>type, fn<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>type - (<em>文字列</em>) イベント名。</li>
	<li>fn   - (<em>関数</em>) 削除したい関数。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>要素</em>) この要素。</li>
</ul>
<h3>例:</h3>
<h4>通常の使い方:</h4>
<pre class="javascript"><span class="kw2">var</span> destroy = <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span> <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'Boom: '</span> + <span class="kw1">this</span>.<span class="me1">id</span><span class="br0">)</span>; <span class="br0">}</span> <span class="co1">//'this'はこの要素を参照します。</span>

$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">addEvent</span><span class="br0">(</span><span class="st0">'click'</span>, destroy<span class="br0">)</span>;

<span class="co1">// 後で</span>
$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">removeEvent</span><span class="br0">(</span><span class="st0">'click'</span>, destroy<span class="br0">)</span>;</pre>
<h4>bindを使った例:</h4>
<pre class="javascript"><span class="kw2">var</span> destroy = <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span> <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'Boom: '</span> + <span class="kw1">this</span>.<span class="me1">id</span><span class="br0">)</span>; <span class="br0">}</span>

<span class="kw2">var</span> boundDestroy = destroy.<span class="me1">bind</span><span class="br0">(</span>$<span class="br0">(</span><span class="st0">'anotherElement'</span><span class="br0">)</span><span class="br0">)</span>;
$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">addEvent</span><span class="br0">(</span><span class="st0">'click'</span>, boundDestroy<span class="br0">)</span>;

<span class="co1">// 後で</span>
$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">removeEvent</span><span class="br0">(</span><span class="st0">'click'</span>, destroy<span class="br0">)</span>; <span class="co1">//これではイベントを削除できません。</span>
$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">removeEvent</span><span class="br0">(</span><span class="st0">'click'</span>, destroy.<span class="me1">bind</span><span class="br0">(</span>$<span class="br0">(</span><span class="st0">'anotherElement'</span><span class="br0">)</span><span class="br0">)</span>; <span class="co1">// これもイベントを削除できません。</span>

$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">removeEvent</span><span class="br0">(</span><span class="st0">'click'</span>, boundDestroy<span class="br0">)</span>; <span class="co1">// これがイベントを削除する正しいやり方です。</span></pre>
<h3>注意点:</h3>
<ul>
	<li><a href="/docs/Native/Function/#Function:bind">Function:bind</a>や<a href="/docs/Native/Function/#Function:pass">Function:pass</a>を使って関数が付け加えられた場合、新しい参照が作られます。removeEvent を動かすためには、削除したい関数への正確な参照を渡す必要があります。</li>
	<li>このメソッドはdocumentとwindowにも添附されます。</li>
</ul>
<h2 id="Element:addEvents"><a href="#Element:addEvents">Elementメソッド: addEvents</a></h2>
<p class="description"><a href="#Element:addEvent">Element:addEvent</a>と同じですが、オブジェクトを用いて一度に複数のイベントを添附できます。</p>

<h3>構文:</h3>
<pre class="javascript">myElement.<span class="me1">addEvents</span><span class="br0">(</span>events<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>events - (<em>オブジェクト</em>) キー＝値を持つオブジェクト。キーはイベント名、値はイベントが発生したときに実行される関数。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>要素</em>) この要素。</li>
</ul>
<h3>例:</h3>
<pre class="javascript">$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">addEvents</span><span class="br0">(</span><span class="br0">{</span>

    <span class="st0">'mouseover'</span>: <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
        <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'mouseover'</span><span class="br0">)</span>;
    <span class="br0">}</span>,
    <span class="st0">'click'</span>: <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>

        <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'click'</span><span class="br0">)</span>;
    <span class="br0">}</span>
<span class="br0">}</span><span class="br0">)</span>;</pre>
<h3>注意点:</h3>
<ul>
	<li>このメソッドはdocumentとwindowにも添附されます。</li>
</ul>
<h3>参考情報:</h3>
<ul>
	<li><a href="#Element:addEvent">Element:addEvent</a></li>
</ul>
<h2 id="Element:removeEvents"><a href="#Element:removeEvents">Elementメソッド: removeEvents</a></h2>
<p class="description">要素から指定したタイプのイベントをすべて削除します。もし引数が渡されなければ、全てのタイプの全イベントが削除されます。</p>

<h3>構文:</h3>
<pre class="javascript">myElements.<span class="me1">removeEvents</span><span class="br0">(</span><span class="br0">[</span>events<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>events - (オプション) 渡されなければ、すべてのタイプの全イベントが削除されます。
<ul>
	<li>(<em>文字列</em>) イベント名(e.g. 'click')。このタイプのイベントがすべて削除されます。</li>
	<li>(<em>オブジェクト</em>) タイプ＝関数のペアを持つオブジェクト。<a href="#Element:addEvent">Element:addEvent</a>に渡されるのと同じものです。</li>
</ul>
</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>要素</em>) この要素。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myElement = $<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>;
myElement.<span class="me1">addEvents</span><span class="br0">(</span><span class="br0">{</span>

    <span class="st0">'mouseover'</span>: <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
        <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'mouseover'</span><span class="br0">)</span>;
    <span class="br0">}</span>,
    <span class="st0">'click'</span>: <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>

        <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'click'</span><span class="br0">)</span>;
    <span class="br0">}</span>
<span class="br0">}</span><span class="br0">)</span>;

myElement.<span class="me1">addEvent</span><span class="br0">(</span><span class="st0">'click'</span>, <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span> <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'clicked again'</span><span class="br0">)</span>; <span class="br0">}</span><span class="br0">)</span>;
myElement.<span class="me1">addEvent</span><span class="br0">(</span><span class="st0">'click'</span>, <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span> <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'clicked and again :('</span><span class="br0">)</span>; <span class="br0">}</span><span class="br0">)</span>;

<span class="co1">//addEventはそれぞれの関数を添附しました。</span>
<span class="co1">//残念なことに、訪問者はmyElementから受けたアラートを3回もクリックしなくてはなりません。</span>
myElement.<span class="me1">removeEvents</span><span class="br0">(</span><span class="st0">'click'</span><span class="br0">)</span>; <span class="co1">// これで訪問者の指はクリックイベントから守られました。</span></pre>
<h3>注意点:</h3>
<ul>
	<li>このメソッドはdocumentとwindowにも添附されます。</li>
</ul>
<h3>参考情報:</h3>
<ul>
	<li><a href="#Element:removeEvent">Element:removeEvent</a></li>
</ul>
<h2 id="Element:fireEvent"><a href="#Element:fireEvent">Elementメソッド: fireEvent</a></h2>
<p class="description">要素に添附されているイベントから、指定したタイプをすべて実行します。</p>

<h3>構文:</h3>
<pre class="javascript">myElement.<span class="me1">fireEvent</span><span class="br0">(</span>type<span class="br0">[</span>, args<span class="br0">[</span>, delay<span class="br0">]</span><span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>type  - (<em>文字列</em>) イベント名(e.g. 'click')</li>
	<li>args  - (<em>いろいろ</em>, オプション) 関数に渡したい引数からなる配列か一つのオブジェクト。複数の引数を渡す場合は、配列にしなければなりません。</li>
	<li>delay - (<em>数</em>, オプション) イベントを実行するまでの待機時間(ミリ秒)。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>要素</em>) この要素。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="co1">// 'anElement'を渡して、一秒たってからすべての'click'イベントを実行します。</span>
$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">fireEvent</span><span class="br0">(</span><span class="st0">'click'</span>, $<span class="br0">(</span><span class="st0">'anElement'</span><span class="br0">)</span>, <span class="nu0">1000</span><span class="br0">)</span>;</pre>
<h3>注意点:</h3>
<ul>
	<li>これはDOMイベントを実行しません(インラインイベントは考慮します。 ie. onmousedown="..")。</li>
	<li>このメソッドはdocumentとwindowにも添附されます。</li>
</ul>
<h2 id="Element:cloneEvents"><a href="#Element:cloneEvents">Elementメソッド: cloneEvents</a></h2>
<p class="description">要素から要素へとイベントを複製します。</p>

<h3>構文:</h3>
<pre class="javascript">myElement.<span class="me1">cloneEvents</span><span class="br0">(</span>from<span class="br0">[</span>, type<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>from - (<em>要素</em>) この要素からすべてのイベントをコピーします。</li>
	<li>type - (<em>文字列</em>, オプション) このタイプのイベントだけをコピーします。nullならば、すべてのイベントをコピーします。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>要素</em>) この要素。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myElement = $<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>;
<span class="kw2">var</span> myClone = myElement.<span class="me1">clone</span><span class="br0">(</span><span class="br0">)</span>.<span class="me1">cloneEvents</span><span class="br0">(</span>myElement<span class="br0">)</span>; <span class="co1">//要素とイベントをコピーします。</span></pre>
<h3>注意点:</h3>
<ul>
	<li>このメソッドはdocumentとwindowにも添附されます。</li>
</ul>
<h3>ハッシュ: Element.Events</h3>
Element.Eventsハッシュに対してプロパティ(オブジェクト)を加えることで、カスタムイベントを添附することができます。
<h4>引数:</h4>
Element.Events.プロパティ (オブジェクト)は以下の通り:
<ol>
	<li>base - (<em>文字列</em>, オプション) カスタムイベントが監視する元となるイベント。conditionがセットされた場合は必須となります。</li>
	<li>condition - (<em>関数</em>, オプション) カスタムイベントの発生を定義する条件。イベントを添附した要素にバインドされます。イベントが引数として渡されます。</li>
	<li>onAdd - (<em>関数</em>, オプション) カスタムイベントが加えられたときに実行する関数。イベントを添附した要素にバインドされます。</li>
	<li>onRemove - (<em>関数</em>, オプション) イベントが削除されたときに実行される関数。イベントを添附した要素にバインドされます。</li>
</ol>
<h4>例:</h4>
<pre class="javascript">Element.<span class="me1">Events</span>.<span class="me1">shiftclick</span> = <span class="br0">{</span>
    base: <span class="st0">'click'</span>, <span class="co1">//ベースとなるイベントタイプを設定しました。</span>

    condition: <span class="kw2">function</span><span class="br0">(</span>event<span class="br0">)</span><span class="br0">{</span> <span class="co1">//さらに、追加条件として関数を加えます。</span>
        <span class="kw1">return</span> <span class="br0">(</span>event.<span class="me1">shift</span> == <span class="kw2">true</span><span class="br0">)</span>; <span class="co1">//これは関数が実行できるということです。</span>

    <span class="br0">}</span>
<span class="br0">}</span>;

$<span class="br0">(</span><span class="st0">'myInput'</span><span class="br0">)</span>.<span class="me1">addEvent</span><span class="br0">(</span><span class="st0">'shiftclick'</span>, <span class="kw2">function</span><span class="br0">(</span>event<span class="br0">)</span><span class="br0">{</span>

    log<span class="br0">(</span><span class="st0">'the user clicked the left mouse button while holding the shift key'</span><span class="br0">)</span>;
<span class="br0">}</span><span class="br0">)</span>;</pre>
<h4>注意点:</h4>
<ul>
	<li>作成できるカスタムイベントには様々なものがあります:
<ol>
	<li>baseだけのカスタムイベント: ベースイベントにリダイレクトするだけです。</li>
	<li>baseとconditionを持つカスタムイベント: 条件を満たしたときだけベースイベントにリダイレクトされます。</li>
	<li>onAddまたはonRemoveと上記のいずれかを持つカスタムイベント: イベントが添附・削除されたときの追加関数として振舞います。</li>
</ol>
</li>
</ul>
<h4>警告:</h4>
ネイティブ・イベントを上書きしたくないならば、conditionオプションを使うとき、baseを指定する必要があります。
(非推奨: なにをしようとしているのか理解しているときにだけ使いましょう)
<h2><a href="#">Custom Events</a></h2>
<h3 class="description">イベント: mouseenter</h3>
このイベントはマウスがDOM要素の領域内に入ったときにだけ発生し、その子要素の上を行き来しても再度発生することはありません(mouseoverとは違います)。
<h4>例:</h4>
<pre class="javascript">$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">addEvent</span><span class="br0">(</span><span class="st0">'mouseenter'</span>, myFunction<span class="br0">)</span>;</pre>
<h4>参考情報:</h4>
<ul>
	<li><a href="#Element:addEvent">Element:addEvent</a></li>
</ul>
<h3>イベント: mouseleave</h3>
このイベントマウスはDOM要素の領域から出たときにだけ発生し、その子要素の上を行き来しても再度発生することはありません(mouseoutとは違います)。
<h4>例:</h4>
<pre class="javascript">$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">addEvent</span><span class="br0">(</span><span class="st0">'mouseleave'</span>, myFunction<span class="br0">)</span>;</pre>
<h4>参考情報:</h4>
<ul>
	<li><a href="#Element:addEvent">Element:addEvent</a></li>
</ul>
<h3>イベント: mousewheel</h3>
このイベントはマウスホイールが回転したときに発生します。
<h4>例:</h4>
<pre class="javascript">$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">addEvent</span><span class="br0">(</span><span class="st0">'mousewheel'</span>, myFunction<span class="br0">)</span>;</pre>
<h4>注意点:</h4>
<ul>
	<li>このカスタムイベントは単にDOMMouseScroll (Mozilla)をmousewheel (Opera, Internet Explorer)へとリダイレクトして、クロス・ブラウザ対応にしたものです。</li>
</ul>
<h4>参考情報:</h4>
<ul>
	<li><a href="#Element:addEvent">Element:addEvent</a></li>
</ul>
</div>
<div id="menu" class="span-2 last">
<h4 class="menu-item"><a href="#Element">Element</a></h4>
<div class="menu-item"><a href="#Element:addEvent">addEvent</a></div>
<div class="menu-item"><a href="#Element:removeEvent">removeEvent</a></div>
<div class="menu-item"><a href="#Element:addEvents">addEvents</a></div>
<div class="menu-item"><a href="#Element:removeEvents">removeEvents</a></div>
<div class="menu-item"><a href="#Element:fireEvent">fireEvent</a></div>
<div class="menu-item"><a href="#Element:cloneEvents">cloneEvents</a></div>
<div class="menu-item"><a href="#"></a></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>224</wp:post_id>
		<wp:post_date><![CDATA[2008-11-02 08:39:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-11-01 23:39:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[elementevent]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="element"><![CDATA[Element]]></category>
		<category domain="category" nicename="mootools"><![CDATA[MooTools]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Element.Style</title>
		<link>https://takahashifumiki.com/web/mootools/226/</link>
		<pubDate>Sun, 02 Nov 2008 06:12:36 +0000</pubDate>
		<dc:creator><![CDATA[takahashi_fumiki]]></dc:creator>
		<guid isPermaLink="false">https://takahashifumiki.com/?p=226</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="main" class="l-border r-border span-15">
<h1 id="Element"><a href="#Element">Native: Element</a></h1>
<p class="description"><a href="/docs/Element/Element/#dollar">$</a>関数を用いて、DOM要素がすべてのメソッドを使えるようにするカスタムネイティブです。</p>

<h2 id="Element:setStyle"><a href="#Element:setStyle">Elementメソッド: setStyle</a></h2>
<p class="description">要素にCSSプロパティを設定します。</p>

<h3>構文:</h3>
<pre class="javascript">myElement.<span class="me1">setStyle</span><span class="br0">(</span>property, value<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>property - (<em>文字列</em>) 設定したいプロパティ。</li>
	<li>value    - (<em>いろいろ</em>) 設定したい値。単位を必要とする数値は、自動的に'px'を付与されます。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>要素</em>) この要素。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="co1">//両方とも同じ効果です。</span>
$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">setStyle</span><span class="br0">(</span><span class="st0">'width'</span>, <span class="st0">'300px'</span><span class="br0">)</span>; <span class="co1">//widthは300pxになりました。</span>
$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">setStyle</span><span class="br0">(</span><span class="st0">'width'</span>, <span class="nu0">300</span><span class="br0">)</span>; <span class="co1">//widthは300pxになりました。</span></pre>
<h3>注意点:</h3>
<ul>
	<li>数値は自動的に近似整数値に丸められます。</li>
</ul>
<h2 id="Element:getStyle"><a href="#Element:getStyle">Elementメソッド: getStyle</a></h2>
<p class="description">渡されたスタイルの値を返します。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> style = myElement.<span class="me1">getStyle</span><span class="br0">(</span>property<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>property - (<em>文字列</em>) 取得したいCSSプロパティ。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>文字列</em>) スタイルの値。</li>
</ul>
<h3>例:</h3>
<pre class="javascript">$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">getStyle</span><span class="br0">(</span><span class="st0">'width'</span><span class="br0">)</span>; <span class="co1">//戻り値 "300px".</span>

$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">getStyle</span><span class="br0">(</span><span class="st0">'width'</span><span class="br0">)</span>.<span class="me1">toInt</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//戻り値 300.</span></pre>
<h2 id="Element:setStyles"><a href="#Element:setStyles">Elementメソッド: setStyles</a></h2>
<p class="description">要素に対して複数のスタイルを設定します。</p>

<h3>構文:</h3>
<pre class="javascript">myElement.<span class="me1">setStyles</span><span class="br0">(</span>styles<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>styles - (<em>オブジェクト</em>) 設定したいスタイルのプロパティ＝値のペアを持つオブジェクト。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>要素</em>) この要素。</li>
</ul>
<h3>例:</h3>
<pre class="javascript">$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">setStyles</span><span class="br0">(</span><span class="br0">{</span>
    border: <span class="st0">'1px solid #000'</span>,
    width: <span class="nu0">300</span>,
    height: <span class="nu0">400</span>

<span class="br0">}</span><span class="br0">)</span>;</pre>
<h3>参考情報:</h3>
<ul>
	<li><a href="#Element:getStyle">Element:getStyle</a></li>
</ul>
<h2 id="Element:getStyles"><a href="#Element:getStyles">Elementメソッド: getStyles</a></h2>
<p class="description">渡された引数に対応するスタイルを返します。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> styles = myElement.<span class="me1">getStyles</span><span class="br0">(</span>property<span class="br0">[</span>, property2<span class="br0">[</span>, property3<span class="br0">[</span>, ...<span class="br0">]</span><span class="br0">]</span><span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>properties - (<em>文字列</em>) スタイルプロパティを幾つでも。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) ブラウザによって計測されたCSSスタイルをキー＝値のペアに持つオブジェクト。</li>
</ul>
<h3>例:</h3>
<pre class="javascript">$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">getStyles</span><span class="br0">(</span><span class="st0">'width'</span>, <span class="st0">'height'</span>, <span class="st0">'padding'</span><span class="br0">)</span>;

<span class="co1">//戻り値 {width: "10px", height: "10px", padding: "10px 0px 10px 0px"}</span></pre>
<h3>参考情報:</h3>
<ul>
	<li><a href="#Element:getStyle">Element:getStyle</a></li>
</ul>
</div>
<div id="menu" class="span-2 last">
<h4 class="menu-item"><a href="#Element">Element</a></h4>
<div class="menu-item"><a href="#Element:setStyle">setStyle</a></div>
<div class="menu-item"><a href="#Element:getStyle">getStyle</a></div>
<div class="menu-item"><a href="#Element:setStyles">setStyles</a></div>
<div class="menu-item"><a href="#Element:getStyles">getStyles</a></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>226</wp:post_id>
		<wp:post_date><![CDATA[2008-11-02 15:12:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-11-02 06:12:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[elementstyle]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="element"><![CDATA[Element]]></category>
		<category domain="category" nicename="mootools"><![CDATA[MooTools]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Element.Dimensions</title>
		<link>https://takahashifumiki.com/web/mootools/228/</link>
		<pubDate>Sun, 02 Nov 2008 06:41:08 +0000</pubDate>
		<dc:creator><![CDATA[takahashi_fumiki]]></dc:creator>
		<guid isPermaLink="false">https://takahashifumiki.com/?p=228</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="main" class="l-border r-border span-15">
<h1 id="Element"><a href="#Element">Native: Element</a></h1>
<p class="description"><a href="/docs/Element/Element#dollar">$</a>関数を使って、DOM要素がすべてのメソッドを利用できるようにするカスタムネイティブです。</p>

<h3>注意点:</h3>
これらのメソッドはbody要素のマージンとボーダーを考慮しません。
bodyにマージンとボーダーが必要ならば、ラッパーdivを使用し、bodyのマージンとボーダーを0にするよう心がけてください。
<h3>クレジット:</h3>
<ul>
	<li>要素の位置指定は<a href="http://www.gnu.org/licenses/lgpl.html">LGPLライセンス</a>である<a href="http://qooxdoo.org/">qooxdoo</a>コードとsmart browser fixesに因っています。</li>
	<li>ビューポート(見えている範囲)の領域管理については、<a href="http://developer.yahoo.com/yui/license.html">BSDライセンス</a>の<a href="http://developer.yahoo.com/yui/">YUI</a>に因っています。</li>
</ul>
<h2 id="Element:scrollTo"><a href="#Element:scrollTo">Elementメソッド: scrollTo</a></h2>
<p class="description">要素を指定した座標までスクロールします(要素がoverflowを持っている場合に限ります)。
このメソッドはwindowオブジェクトに対しても使えます。
<h3>構文:</h3>
<pre class="javascript">myElement.<span class="me1">scrollTo</span><span class="br0">(</span>x, y<span class="br0">)</span>;</pre>
<h3>Arguments:</h3>
<ol>
	<li>x - (<em>数</em>) x座標。</li>
	<li>y - (<em>数</em>) y座標。</li>
</ol>
<h3>例:</h3>
<pre class="javascript">$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">scrollTo</span><span class="br0">(</span><span class="nu0">0</span>, <span class="nu0">100</span><span class="br0">)</span>;</pre>
<h3>参考情報:</h3>
<ul>
	<li> <a href="http://developer.mozilla.org/en/docs/DOM:element.scrollLeft">MDC Element:scrollLeft</a>, <a href="http://developer.mozilla.org/en/docs/DOM:element.scrollTop">MDC Element:scrollTop</a></li>
</ul>
<h2 id="Element:getSize"><a href="#Element:getSize">Elementメソッド: getSize</a></h2>
<p class="description">ボーダーとパディングを考慮して、要素の高さと幅を返します。
このメソッドはwindowオブジェクトにも適用できます。
<h3>構文:</h3>
<pre class="javascript">myElement.<span class="me1">getSize</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) ターゲット要素の幅(キー名:x)と高さ(キー名:y)を持つオブジェクト。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> size = myElement.<span class="me1">getSize</span><span class="br0">(</span><span class="br0">)</span>;
<span class="kw3">alert</span><span class="br0">(</span><span class="st0">"The element is "</span>+size.<span class="me1">x</span>+<span class="st0">" pixels wide and "</span>+size.<span class="me1">y</span>+<span class="st0">"pixels high."</span><span class="br0">)</span>;</pre>
<h2 id="Element:getScrollSize"><a href="#Element:getScrollSize">Elementメソッド: getScrollSize</a></h2>
<p class="description">ターゲット要素のサイズを表すオブジェクトを返します。スクロールされる領域も含まれます。
このメソッドはwindowオブジェクトにも使えます。
<h3>構文:</h3>
<pre class="javascript">myElement.<span class="me1">getScrollSize</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) ターゲット要素のx-y空間を表すオブジェクト。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> <span class="kw3">scroll</span> = $<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">getScrollSize</span><span class="br0">(</span><span class="br0">)</span>;

<span class="kw3">alert</span><span class="br0">(</span><span class="st0">'My element can scroll to '</span> + <span class="kw3">scroll</span>.<span class="me1">y</span> + <span class="st0">'px'</span><span class="br0">)</span>; <span class="co1">//アラート 'My element can scroll down to 820px'</span></pre>
<h3>参考情報:</h3>
<ul>
	<li> <a href="http://developer.mozilla.org/en/docs/DOM:element.scrollLeft">MDC Element:scrollLeft</a>, <a href="http://developer.mozilla.org/en/docs/DOM:element.scrollTop">MDC Element:scrollTop</a>, <a href="http://developer.mozilla.org/en/docs/DOM:element.offsetWidth">MDC Element:offsetWidth</a>, <a href="http://developer.mozilla.org/en/docs/DOM:element.offsetHeight">MDC Element:offsetHeight</a>, <a href="http://developer.mozilla.org/en/docs/DOM:element.scrollWidth">MDC Element:scrollWidth</a>, <a href="http://developer.mozilla.org/en/docs/DOM:element.scrollHeight">MDC Element:scrollHeight</a></li>
</ul>
<h2 id="Element:getScroll"><a href="#Element:getScroll">Elementメソッド: getScroll</a></h2>
<p class="description">ターゲット要素までどれだけ離れているかを示す値からなるオブジェクトを返します。
このメソッドはwindowオブジェクトにも使えます。
<h3>構文:</h3>
<pre class="javascript">myElement.<span class="me1">getScroll</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) ターゲット要素までどれだけスクロールすればよいかをx-y座標値で表したオブジェクト。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> <span class="kw3">scroll</span> = $<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">getScroll</span><span class="br0">(</span><span class="br0">)</span>;

<span class="kw3">alert</span><span class="br0">(</span><span class="st0">'My element is scrolled down '</span> + <span class="kw3">scroll</span>.<span class="me1">y</span> + <span class="st0">'px'</span><span class="br0">)</span>; <span class="co1">//アラート'My element is scrolled down to 620px'</span></pre>
<h2 id="Element:getPosition"><a href="#Element:getPosition">Elementメソッド: getPosition</a></h2>
<p class="description">要素のオフセットを返します。</p>

<h3>構文:</h3>
<pre class="javascript">myElement.<span class="me1">getPosition</span><span class="br0">(</span>relative<span class="br0">)</span>;</pre>
<h3>引数:</h3>
relative - (<em>要素</em>, 初期値＝document) 設定されていたら、この要素からの相対的な位置になります。
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) 要素の位置をx-y座標で表したオブジェクト。</li>
</ul>
<h3>例:</h3>
<pre class="javascript">$<span class="br0">(</span><span class="st0">'element'</span><span class="br0">)</span>.<span class="me1">getPosition</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//戻り値{x: 100, y: 500};</span></pre>
<h3>参考情報:</h3>
<ul>
	<li><a href="http://www.quirksmode.org/js/findpos.html">QuirksMode: Find position</a></li>
</ul>
<h2 id="Element:getCoordinates"><a href="#Element:getCoordinates">Elementメソッド: getCoordinates</a></h2>
<p class="description">要素のwidth, height, left, top, bottomの座標値を返します。</p>

<h3>構文:</h3>
<pre class="javascript">myElement.<span class="me1">getCoordinates</span><span class="br0">(</span>relative<span class="br0">)</span>;</pre>
<h3>引数:</h3>
relative - (<em>要素</em>, オプション:初期値=document) 設定されていたら、この要素からの相対的な位置になります。
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) 次の値からなるオブジェクト:top, left, width, height, right, bottom</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myValues = $<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">getCoordinates</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h4>戻り値:</h4>
<pre class="javascript"><span class="br0">{</span>
    top: <span class="nu0">50</span>,
    left: <span class="nu0">100</span>,
    width: <span class="nu0">200</span>,
    height: <span class="nu0">300</span>,
    right: <span class="nu0">300</span>,
    bottom: <span class="nu0">350</span>

<span class="br0">}</span></pre>
<h3>参考情報:</h3>
<a href="#Element:getPosition">Element:getPosition</a></div>
<div id="menu" class="span-2 last">
<h4 class="menu-item"><a href="#Element">Element</a></h4>
<div class="menu-item"><a href="#Element:scrollTo">scrollTo</a></div>
<div class="menu-item"><a href="#Element:getSize">getSize</a></div>
<div class="menu-item"><a href="#Element:getScrollSize">getScrollSize</a></div>
<div class="menu-item"><a href="#Element:getScroll">getScroll</a></div>
<div class="menu-item"><a href="#Element:getPosition">getPosition</a></div>
<div class="menu-item"><a href="#Element:getCoordinates">getCoordinates</a></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>228</wp:post_id>
		<wp:post_date><![CDATA[2008-11-02 15:41:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-11-02 06:41:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[elementdimensions]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="element"><![CDATA[Element]]></category>
		<category domain="category" nicename="mootools"><![CDATA[MooTools]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Selectors</title>
		<link>https://takahashifumiki.com/web/mootools/230/</link>
		<pubDate>Sun, 02 Nov 2008 08:34:08 +0000</pubDate>
		<dc:creator><![CDATA[takahashi_fumiki]]></dc:creator>
		<guid isPermaLink="false">https://takahashifumiki.com/?p=230</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="main" class="l-border r-border span-15">
<h1 id="Element"><a href="#Element">Native: Element</a></h1>
<p class="description"><a href="/docs/Element/Element#dollar">$</a>関数を用いて、要素のすべてのメソッドにセレクターを閊えるようにするカスタムクラスです。</p>

<h2 id="Element:getElements"><a href="#Element:getElements">Elementプロパティ: getElements</a></h2>
<p class="description">与えられたセレクターにマッチする要素をすべて取得します。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> myElements = myElement.<span class="me1">getElements</span><span class="br0">(</span>selector<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>selector - (<em>文字列</em>) マッチするCSSセレクター。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>配列</em>) <a href="/docs/Element/Element">Element</a>コレクション。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="co1">//myElement内のすべてのアンカーを返します。</span>
$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">getElements</span><span class="br0">(</span><span class="st0">'a'</span><span class="br0">)</span>;

<span class="co1">//nameが"dialog"であるすべてのinputタグを返します。</span>
$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">getElements</span><span class="br0">(</span><span class="st0">'input[name=dialog]'</span><span class="br0">)</span>;

<span class="co1">//nameが'log'で終わるinputタグを返します。</span>
$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">getElements</span><span class="br0">(</span><span class="st0">'input[name$=log]'</span><span class="br0">)</span>;

<span class="co1">//すべてのEメールリンク("mailto:"で始まるもの)を返します。</span>
$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">getElements</span><span class="br0">(</span><span class="st0">'a[href^=mailto:]'</span><span class="br0">)</span>;

<span class="co1">//'email'というクラス名を持つ要素にイベントを添附します。</span>
$<span class="br0">(</span>document.<span class="me1">body</span><span class="br0">)</span>.<span class="me1">getElements</span><span class="br0">(</span><span class="st0">'a.email'</span><span class="br0">)</span>.<span class="me1">addEvents</span><span class="br0">(</span><span class="br0">{</span>

    <span class="st0">'mouseenter'</span>: <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
        <span class="kw1">this</span>.<span class="me1">href</span> = <span class="st0">'real@email.com'</span>;
    <span class="br0">}</span>,
    <span class="st0">'mouseleave'</span>: <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>

        <span class="kw1">this</span>.<span class="me1">href</span> = <span class="st0">'#'</span>;
    <span class="br0">}</span>
<span class="br0">}</span><span class="br0">)</span>;</pre>
<h3>注意点:</h3>
<ul>
	<li>属性セレクターにはこれらの演算子がサポートされています。
<ul>
	<li>'=' : 等しい</li>
	<li>'^=' : で始まる</li>
	<li>'$=' : で終わる</li>
	<li>'!=' : 等しくない</li>
</ul>
</li>
</ul>
<h2 id="Element:getElement"><a href="#Element:getElement">Elementプロパティ: getElement</a></h2>
<p class="description"><a href="#Element:getElements">Element:getElements</a>と同じ働きをしますが、最初のものだけを返します。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> anElement = myElement.<span class="me1">getElement</span><span class="br0">(</span>selector<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>selector - (<em>文字列</em>) マッチするCSSセレクター。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>いろいろ</em>) 拡張された<a href="/docs/Element/Element">Element</a>か、見つからなければnull。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> found = $<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">getElement</span><span class="br0">(</span><span class="st0">'.findMe'</span><span class="br0">)</span>.<span class="me1">setStyle</span><span class="br0">(</span><span class="st0">'color'</span>, <span class="st0">'#f00'</span><span class="br0">)</span>;</pre>
<h1 id="Selectors"><a href="#Selectors">Selectors.Pseudo</a></h1>
<p class="description"><a href="/docs/Selectors/Selectors">Selectors</a>の仮称セレクターです。</p>

<h3>参考情報:</h3>
<ul>
	<li><a href="http://www.w3.org/TR/2005/WD-css3-selectors-20051215/#pseudo-classes">W3C Pseudo Classes</a></li>
</ul>
<h2 id="Selector:enabled"><a href="#Selector:enabled">セレクター: enabled</a></h2>
<p class="description">enabledにされた要素にマッチします。</p>

<h3>使用法:</h3>
<pre class="javascript"><span class="st0">':enabled'</span></pre>
<h3>例:</h3>
<pre class="javascript">$$<span class="br0">(</span><span class="st0">'*:enabled'</span><span class="br0">)</span>

$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">getElements</span><span class="br0">(</span><span class="st0">':enabled'</span><span class="br0">)</span>;</pre>
<h2 id="Selector:empty"><a href="#Selector:empty">セレクター: empty</a></h2>
<p class="description">空の要素にマッチします。</p>

<h3>使用法:</h3>
<pre class="javascript"><span class="st0">':empty'</span></pre>
<h3>例:</h3>
<pre class="javascript">$$<span class="br0">(</span><span class="st0">'div:empty'</span><span class="br0">)</span>;</pre>
<h2 id="Selector:contains"><a href="#Selector:contains">セレクター: contains</a></h2>
<p class="description">テキストを持つ要素にマッチします。</p>

<h3>使用法:</h3>
<pre class="javascript"><span class="st0">':contains(text)'</span></pre>
<h3>変数:</h3>
<ul>
	<li>text - (<em>文字列</em>) 要素が含んでいるテキスト。</li>
</ul>
<h3>例:</h3>
<pre class="javascript">$$<span class="br0">(</span><span class="st0">'p:contains("find me")'</span><span class="br0">)</span>;</pre>
<h2 id="Selector:nth-child"><a href="#Selector:nth-child">セレクター: nth-child</a></h2>
<p class="description">n番目の子要素にマッチします。</p>

<h3>使用法:</h3>
Nth表記:
<pre class="javascript"><span class="st0">':nth-child(nExpression)'</span></pre>
<h3>変数:</h3>
<ul>
	<li>nExpression - (<em>文字列</em>) n番目"ごと"の子要素にマッチします。</li>
</ul>
<h3>例:</h3>
<pre class="javascript">$$<span class="br0">(</span><span class="st0">'#myDiv:nth-child(2n)'</span><span class="br0">)</span>; <span class="co1">//偶数番目の子要素にマッチします。</span>

$$<span class="br0">(</span><span class="st0">'#myDiv:nth-child(n)'</span><span class="br0">)</span>; <span class="co1">//すべての子要素にマッチします。</span>

$$<span class="br0">(</span><span class="st0">'#myDiv:nth-child(2n+1)'</span><span class="br0">)</span> <span class="co1">//奇数番目の子要素にマッチします。</span>

$$<span class="br0">(</span><span class="st0">'#myDiv:nth-child(4n+3)'</span><span class="br0">)</span> <span class="co1">//戻り値は3, 7, 11, 15......番目の要素です。</span></pre>
奇数番目の子要素:
<pre class="javascript"><span class="st0">':nth-child(odd)'</span></pre>
偶数番目の子要素:
<pre class="javascript"><span class="st0">':nth-child(even)'</span></pre>
単一の子要素:
<pre class="javascript"><span class="st0">':nth-child(only)'</span></pre>
最初の子要素:
<pre class="javascript"><span class="st0">'nth-child(first)'</span></pre>
最後の子要素:
<pre class="javascript"><span class="st0">'nth-child(last)'</span></pre>
<h3>注意点:</h3>
このセレクターはw3cの指定に準拠しているため、1が最初の要素であり、0ではありません。したがって、０ベースのインデックスを想定した場合、nth-child(odd)が実際に返すのは偶数番目になってしまいます。
<h2 id="Selector:even"><a href="#Selector:even">セレクター: even</a></h2>
<p class="description">偶数番目の要素を返します。</p>

<h3>使用法:</h3>
<pre class="javascript"><span class="st0">':even'</span></pre>
<h3>例:</h3>
<pre class="javascript">$$<span class="br0">(</span><span class="st0">'td:even'</span><span class="br0">)</span>;</pre>
<h3>注意点:</h3>
このセレクターはw3c指定に準拠していないため、インデックスが0からはじまります。nth-child(even)よりも、このセレクターを使う方が強く推奨されます。実際に偶数版目の要素を返すからです。
<h2 id="Selector:odd"><a href="#Selector:odd">セレクター: odd</a></h2>
<p class="description">奇数番目の要素を返します。</p>

<h3>使用法:</h3>
<pre class="javascript"><span class="st0">':odd'</span></pre>
<h3>例:</h3>
<pre class="javascript">$$<span class="br0">(</span><span class="st0">'td:odd'</span><span class="br0">)</span>;</pre>
<h3>注意点:</h3>
このセレクターはw3c指定に準拠していないため、インデックスが0からはじまります。nth-child(odd)よりも、このセレクターを使う方が強く推奨されます。実際に奇数版目の要素を返すからです。
<h2 id="Selector:first-child"><a href="#Selector:first-child">セレクター: first</a></h2>
<p class="description">最初の子要素にマッチします。</p>

<h3>使用法:</h3>
<pre class="javascript"><span class="st0">':first-child'</span></pre>
<h3>例:</h3>
<pre class="javascript">$$<span class="br0">(</span><span class="st0">'td:first-child'</span><span class="br0">)</span>;</pre>
<h2 id="Selector:last-child"><a href="#Selector:last-child">セレクター: last</a></h2>
<pre class="javascript">最後の子要素にマッチします。</pre>
<h3>使用法:</h3>
<pre class="javascript"><span class="st0">':last-child'</span></pre>
<h3>例:</h3>
<pre class="javascript">$$<span class="br0">(</span><span class="st0">'td:last-child'</span><span class="br0">)</span>;</pre>
<h2 id="Selector:only-child"><a href="#Selector:only-child">セレクター: only</a></h2>
<p class="description">親要素にとって唯一の子要素にマッチします。</p>

<h3>使用法:</h3>
<pre class="javascript"><span class="st0">':only-child'</span></pre>
<h3>例:</h3>
<pre class="javascript">$$<span class="br0">(</span><span class="st0">'td:only-child'</span><span class="br0">)</span>;</pre>
</div>
<div id="menu" class="span-2 last">
<h4 class="menu-item"><a href="#Element">Element</a></h4>
<div class="menu-item"><a href="#Element:getElements">getElements</a></div>
<div class="menu-item"><a href="#Element:getElement">getElement</a></div>
<h4 class="menu-item"><a href="#Selectors">Selectors</a></h4>
<div class="menu-item"><a href="#Selector:enabled">enabled</a></div>
<div class="menu-item"><a href="#Selector:empty">empty</a></div>
<div class="menu-item"><a href="#Selector:contains">contains</a></div>
<div class="menu-item"><a href="#Selector:nth-child">nth.child</a></div>
<div class="menu-item"><a href="#Selector:even">even</a></div>
<div class="menu-item"><a href="#Selector:odd">odd</a></div>
<div class="menu-item"><a href="#Selector:first-child">first.child</a></div>
<div class="menu-item"><a href="#Selector:last-child">last.child</a></div>
<div class="menu-item"><a href="#Selector:only-child">only.child</a></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>230</wp:post_id>
		<wp:post_date><![CDATA[2008-11-02 17:34:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-11-02 08:34:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[selectors]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mootools"><![CDATA[MooTools]]></category>
		<category domain="category" nicename="utilities"><![CDATA[Utilities]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>DomReady</title>
		<link>https://takahashifumiki.com/web/mootools/232/</link>
		<pubDate>Sun, 02 Nov 2008 08:38:34 +0000</pubDate>
		<dc:creator><![CDATA[takahashi_fumiki]]></dc:creator>
		<guid isPermaLink="false">https://takahashifumiki.com/?p=232</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="main" class="l-border r-border span-15">
<h1><a href="#">Windowイベント: domready</a></h1>
<p class="description">windowイベントの'domready'は、DOMが読み込まれたときに発生します。DOM要素がすでに存在してから実行する必要のあるコードは、'domready'イベントに添附しましょう。</p>

このイベントはwindowオブジェクトにだけ添附できます。
<h3>例:</h3>
<pre class="javascript">window.<span class="me1">addEvent</span><span class="br0">(</span><span class="st0">'domready'</span>, <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
    <span class="kw3">alert</span><span class="br0">(</span><span class="st0">"The DOM is ready."</span><span class="br0">)</span>;

<span class="br0">}</span><span class="br0">)</span>;</pre>
<h3>参考情報:</h3>
<a href="/docs/Element/Element.Event">Element.Event</a></div>
<div id="menu" class="span-2 last">
<h4 class="menu-item"><a href="#"></a></h4>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>232</wp:post_id>
		<wp:post_date><![CDATA[2008-11-02 17:38:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-11-02 08:38:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[domready]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mootools"><![CDATA[MooTools]]></category>
		<category domain="category" nicename="utilities"><![CDATA[Utilities]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JSON</title>
		<link>https://takahashifumiki.com/web/mootools/234/</link>
		<pubDate>Sun, 02 Nov 2008 08:45:16 +0000</pubDate>
		<dc:creator><![CDATA[takahashi_fumiki]]></dc:creator>
		<guid isPermaLink="false">https://takahashifumiki.com/?p=234</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="main" class="l-border r-border span-15">
<h1 id="JSON"><a href="#JSON">Object: JSON</a></h1>
<p class="description">JSONパーサーとエンコーダーです。</p>

<h3>参考情報:</h3>
<ul>
	<li><a href="http://www.json.org/">JavaScript Object Notation (JSON.org)</a></li>
</ul>
<h2 id="JSON:encode"><a href="#JSON:encode">JSONメソッド: encode</a></h2>
<p class="description">オブジェクトや配列をJSON文字列に変換します。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> myJSON = JSON.<span class="me1">encode</span><span class="br0">(</span>obj<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>obj - (<em>オブジェクト</em>) 変換したオブジェクト。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>文字列</em>) JSON文字列。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> fruitsJSON = JSON.<span class="me1">encode</span><span class="br0">(</span><span class="br0">{</span>apple: <span class="st0">'red'</span>, lemon: <span class="st0">'yellow'</span><span class="br0">}</span><span class="br0">)</span>; <span class="co1">// 戻り値: '{"apple":"red","lemon":"yellow"}'</span></pre>
<h2 id="JSON:decode"><a href="#JSON:decode">JSONメソッド: decode</a></h2>
<p class="description">JSON文字列をJavaScriptオブジェクトに変換します。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> object = JSON.<span class="me1">decode</span><span class="br0">(</span>string<span class="br0">[</span>, secure<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>string - (<em>文字列</em>) 評価する文字列。</li>
	<li>secure - (<em>真偽値</em>, オプション: 初期値=false) trueがセットされると、有害な構文がないかをチェックし、問題があった場合にnullを返します。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) JSON文字列によって表現されるオブジェクト。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myObject = JSON.<span class="me1">decode</span><span class="br0">(</span><span class="st0">'{"apple":"red","lemon":"yellow"}'</span><span class="br0">)</span>; <span class="co1">//戻り値: {apple: 'red', lemon: 'yellow'}</span></pre>
<h3>クレジット:</h3>
<ul>
	<li>JSON正規表現テストは<a href="http://crockford.com/">Douglas Crockford</a>と<a href="http://tobielangel.com/">Tobie Langel</a>によります。</li>
</ul>
</div>
<div id="menu" class="span-2 last">
<h4 class="menu-item"><a href="#JSON">JSON</a></h4>
<div class="menu-item"><a href="#JSON:encode">encode</a></div>
<div class="menu-item"><a href="#JSON:decode">decode</a></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>234</wp:post_id>
		<wp:post_date><![CDATA[2008-11-02 17:45:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-11-02 08:45:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[json]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mootools"><![CDATA[MooTools]]></category>
		<category domain="category" nicename="utilities"><![CDATA[Utilities]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Cookie</title>
		<link>https://takahashifumiki.com/web/mootools/236/</link>
		<pubDate>Sun, 02 Nov 2008 09:00:43 +0000</pubDate>
		<dc:creator><![CDATA[takahashi_fumiki]]></dc:creator>
		<guid isPermaLink="false">https://takahashifumiki.com/?p=236</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="main" class="l-border r-border span-15">
<h1 id="Cookie"><a href="#Cookie">Object: Cookie</a></h1>
<p class="description">クッキーを設定・取得します。</p>

<h3>クレジット:</h3>
<ul>
	<li>Peter-Paul Kochの<a href="http://www.quirksmode.org">QuirksMode</a>関数に撰っています。</li>
</ul>
<h3 id="Cookie-options">オプション:</h3>
<ul>
	<li>domain   - (<em>文字列</em>: 初期値=false) クッキーの属するドメイン。</li>
	<li>path     - (<em>文字列</em>: 初期値=false) クッキーの属するパス。</li>
	<li>duration - (<em>数</em>: 初期値=false) クッキーが削除されるまでの期間(単位:日)。falseか0がセットされると、ブラウザを閉じたときに破棄されるセッション・クッキーになります。</li>
	<li>secure   - (<em>真偽値</em>: 初期値=false) 安全な環境からのみクッキーにアクセスできるようにします。</li>
</ul>
<h3>注意点:</h3>
<ul>
	<li>異なるパスにあるページとクッキーを共有するには、<a href="#Cookie-options">Cookie.options.domain</a>がセットされていなくてはいけません。</li>
</ul>
<h2 id="Cookie:write"><a href="#Cookie:write">Cookieメソッド: write</a></h2>
<p class="description">ブラウザにクッキーを書き込みます。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> myCookie = Cookie.<span class="kw1">write</span><span class="br0">(</span>key, value<span class="br0">[</span>, options<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>key     - (<em>文字列</em>) クッキーのキー(または名前)。</li>
	<li>value   - (<em>文字列</em>) セットする値。セミコロンは入れられません。</li>
	<li>options - (<em>いろいろ</em>, オプション) <a href="#Cookie">Cookie</a>を見てください。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) キーと値のペアを持つオブジェクト。これはCookie.removeの引数として渡すことができます。</li>
</ul>
<h3>例:</h3>
セッションの間だけクッキーを保存:
<pre class="javascript"><span class="kw2">var</span> myCookie = Cookie.<span class="kw1">write</span><span class="br0">(</span><span class="st0">'username'</span>, <span class="st0">'Harald'</span><span class="br0">)</span>;</pre>
一日だけクッキーを保存:
<pre class="javascript"><span class="kw2">var</span> myCookie  = Cookie.<span class="kw1">write</span><span class="br0">(</span><span class="st0">'username'</span>, <span class="st0">'JackBauer'</span>, <span class="br0">{</span>duration: <span class="nu0">1</span><span class="br0">}</span><span class="br0">)</span>;</pre>
<h2 id="Cookie:read"><a href="#Cookie:read">Cookieメソッド: read</a></h2>
<p class="description">クッキーの値を読み取ります。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> myCookie = Cookie.<span class="me1">read</span><span class="br0">(</span><span class="kw3">name</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>name - (<em>文字列</em>) 取得したいクッキーの名前。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>いろいろ</em>) クッキー文字列。見つからなければnull。</li>
</ul>
<h3>例:</h3>
<pre class="javascript">Cookie.<span class="me1">read</span><span class="br0">(</span><span class="st0">"username"</span><span class="br0">)</span>;</pre>
<h2 id="Cookie:dispose"><a href="#Cookie:dispose">Cookieメソッド: dispose</a></h2>
<p class="description">ブラウザからクッキーを消去します。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> oldCookie = Cookie.<span class="me1">dispose</span><span class="br0">(</span>cookie<span class="br0">[</span>, options<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>name  - (<em>文字列</em>) 消去したいクッキーの名前か、以前に保存されたCookieインスタンス。</li>
	<li>options - (<em>オブジェクト</em>, オプション) <a href="#Cookie">Cookie</a>を見てください。</li>
</ol>
<h3>例:</h3>
クッキーの削除:
<pre class="javascript">Cookie.<span class="me1">dispose</span><span class="br0">(</span><span class="st0">'username'</span><span class="br0">)</span>; <span class="co1">//バイバイJackBauer! 24時間後に会おう。</span></pre>
クッキーを生成して、すぐに削除:
<pre class="javascript"><span class="kw2">var</span> myCookie = Cookie.<span class="kw1">write</span><span class="br0">(</span><span class="st0">'username'</span>, <span class="st0">'Aaron'</span>, <span class="br0">{</span>domain: <span class="st0">'mootools.net'</span><span class="br0">}</span><span class="br0">)</span>;
<span class="kw1">if</span> <span class="br0">(</span>Cookie.<span class="me1">read</span><span class="br0">(</span><span class="st0">'username'</span><span class="br0">)</span> == <span class="st0">'Aaron'</span><span class="br0">)</span> <span class="br0">{</span> Cookie.<span class="me1">dispose</span><span class="br0">(</span>myCookie<span class="br0">)</span>; <span class="br0">}</span></pre>
</div>
<div id="menu" class="span-2 last">
<h4 class="menu-item"><a href="#Cookie">Cookie</a></h4>
<div class="menu-item"><a href="#Cookie:write">write</a></div>
<div class="menu-item"><a href="#Cookie:read">read</a></div>
<div class="menu-item"><a href="#Cookie:dispose">dispose</a></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>236</wp:post_id>
		<wp:post_date><![CDATA[2008-11-02 18:00:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-11-02 09:00:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[cookie]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mootools"><![CDATA[MooTools]]></category>
		<category domain="category" nicename="utilities"><![CDATA[Utilities]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Swiff</title>
		<link>https://takahashifumiki.com/web/mootools/238/</link>
		<pubDate>Sun, 02 Nov 2008 09:16:49 +0000</pubDate>
		<dc:creator><![CDATA[takahashi_fumiki]]></dc:creator>
		<guid isPermaLink="false">https://takahashifumiki.com/?p=238</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="main" class="l-border r-border span-15">
<h1 id="Swiff"><a href="#Swiff">Class: Swiff</a></h1>
<p class="description">与えられたパラメータからFlashオブジェクトを生成して返します。</p>

<h3>クレジット:</h3>
Flashの検知とInternet ExplorerのFlash Player 9におけるバグ・フィックスは<a href="http://blog.deconcept.com/swfobject/">SWFObject</a>によります。
<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> mySwiff = <span class="kw2">new</span> Swiff<span class="br0">(</span>path<span class="br0">[</span>, options<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>path    - (<em>文字列</em>) SWFファイルへのパス。</li>
	<li>options - (<em>オブジェクト</em>, オプション) 以下のオプションを参照のこと。</li>
</ol>
<h3>オプション:</h3>
<ul>
	<li>id - (<em>文字列</em>: 初期値='Swiff_' + ユニークID) SWFオブジェクトのID。</li>
	<li>width - (<em>数</em>: 初期値=1) SWFオブジェクトの幅。</li>
	<li>height - (<em>数</em>: 初期値=1) SWFオブジェクトの高さ。</li>
	<li>container - (<em>要素</em>) SWFオブジェクトが挿入されるコンテナ。</li>
	<li>params - (<em>オブジェクト</em>) SWFオブジェクトに渡されるパラメータ (wmode, bgcolor, allowScriptAccess, loop, など)。
<ul>
	<li>allowScriptAccess - (<em>文字列</em>: 初期値=always) SWFオブジェクトがアクセスできるドメイン。</li>
	<li>quality - (<em>文字列</em>: 初期値='high') ムービーの描画クオリティ。</li>
	<li>swLiveConnect - (<em>真偽値</em>: 初期値=true) リモートススクリプティングを許可するためのswLiveConnectパラメータ。</li>
	<li>wMode - (<em>文字列</em>: 初期値='transparent') SWFの背景色を透明にするためのパラメータ。</li>
</ul>
</li>
	<li>properties - (<em>オブジェクト</em>) オブジェクトへの追加属性。</li>
	<li>vars - (<em>オブジェクト</em>) flashVarsのクエリ文字列を用いてSWFに変数を渡すことができます。</li>
	<li>callBacks - (<em>オブジェクト</em>) SWFから呼び出す関数。ムービー内からグローバルに参照することができ、このSWFオブジェクトにバインドされています。</li>
</ul>
<h3>戻り値:</h3>
<ul>
	<li>(<em>要素</em>) 新しいHTMLオブジェクト要素。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> obj = <span class="kw2">new</span> Swiff<span class="br0">(</span><span class="st0">'myMovie.swf'</span>, <span class="br0">{</span>

    id: <span class="st0">'myBeautifulMovie'</span>,
    width: <span class="nu0">500</span>,
    height: <span class="nu0">400</span>,
    params: <span class="br0">{</span>
        wmode: <span class="st0">'opaque'</span>,
        bgcolor: <span class="st0">'#ff3300'</span>
    <span class="br0">}</span>,
    vars: <span class="br0">{</span>

        myVariable: myJsVar,
        myVariableString: <span class="st0">'hello'</span>
    <span class="br0">}</span>,
    callBacks: <span class="br0">{</span>
        load: myOnloadFunc
    <span class="br0">}</span>
<span class="br0">}</span><span class="br0">)</span>;</pre>
<h3>注意点:</h3>
<ol>
	<li>Swiffはオブジェクトを返しますが、この要素はElementメソッドを一つも持ちません。</li>
	<li>$関数をobjectタグやembedタグに使っても、要素への参照を返すだけで、それ以上の処理を行いません。</li>
</ol>
<h2 id="Swiff:remote"><a href="#Swiff:remote">Swiff関数: remote</a></h2>
<p class="description">JavaScriptからActionScript関数を呼び出します。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> result = Swiff.<span class="me1">remote</span><span class="br0">(</span>obj, fn<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>obj - (<em>要素</em>) Swiffインスタンス(HTMLオブジェクト要素)。</li>
	<li>fn  - (<em>文字列</em>) Flashムービー内で実行したい関数の名前。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>いろいろ</em>) ActionScript関数の実行結果。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> obj = <span class="kw2">new</span> Swiff<span class="br0">(</span><span class="st0">'myMovie.swf'</span><span class="br0">)</span>;
<span class="co1">//アラート"This is from the .swf file!".</span>
<span class="kw3">alert</span><span class="br0">(</span>Swiff.<span class="me1">remote</span><span class="br0">(</span>obj, <span class="st0">'myFlashFn'</span><span class="br0">)</span><span class="br0">)</span>;</pre>
<h3>注意点:</h3>
SWFファイルはExternalInterfaceコンポーネントをコンパイルされていなければなりません。より詳しくは、Adobeドキュメンテーションの<a href="http://livedocs.adobe.com/flash/9.0/main/wwhelp/wwhimpl/common/html/wwhelp.htm?context=LiveDocs_Parts&amp;file=00001652.html">External Interface</a>を見てください。</div>
<div id="menu" class="span-2 last">
<h4 class="menu-item"><a href="#Swiff">Swiff</a></h4>
<div class="menu-item"><a href="#Swiff:remote">remote</a></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>238</wp:post_id>
		<wp:post_date><![CDATA[2008-11-02 18:16:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-11-02 09:16:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[swiff]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mootools"><![CDATA[MooTools]]></category>
		<category domain="category" nicename="utilities"><![CDATA[Utilities]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Fx</title>
		<link>https://takahashifumiki.com/web/mootools/240/</link>
		<pubDate>Sun, 02 Nov 2008 09:44:30 +0000</pubDate>
		<dc:creator><![CDATA[takahashi_fumiki]]></dc:creator>
		<guid isPermaLink="false">https://takahashifumiki.com/?p=240</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="main" class="l-border r-border span-15">
<h1 id="Fx"><a href="#Fx">Class: Fx</a></h1>
<p class="description">このクラスは単体で使われることは滅多にありませんが、すべてのカスタムFxクラスの基礎となります。
すべてのFxクラスはこれを継承します。
<h3>Implements:</h3>
<ul>
	<li> <a href="/docs/Class/Class.Extras#Chain">Chain</a>, <a href="/docs/Class/Class.Extras#Events">Events</a>, <a href="/docs/Class/Class.Extras#Options">Options</a></li>
</ul>
<h2 id="Fx:constructor"><a href="#Fx:constructor">Fxメソッド: constructor</a></h2>
<h3 class="description">構文:</h3>
<pre class="javascript"><span class="kw2">var</span> myFx = <span class="kw2">new</span> Fx<span class="br0">(</span><span class="br0">[</span>options<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>options - (<em>オブジェクト</em>, オプション) エフェクトのオプションを持つオブジェクト。以下を参照のこと。</li>
</ol>
<h3>オプション:</h3>
<ul>
	<li>fps        - (<em>数</em>: 初期値=50) アニメーションの一秒あたりのフレーム数。</li>
	<li>unit       - (<em>文字列</em>: 初期値=false) 単位(e.g. 'px', 'em', '%')。詳しくは<a href="https://takahashifumiki.com/web/mootools/226#Element:setStyle">Element:setStyle</a>を参照のこと。</li>
	<li>link       - (<em>文字列</em>: 初期値=ignore) 'ignore', 'cancel','chain'が入ります。
<ul>
	<li>'ignore' - エフェクト実行中に呼び出されたものはすべて無視されます(MooTools1.xにおける'wait': trueと同じです)。</li>
	<li>'cancel' - エフェクト実行中に呼び出されたものが最優先となり、現在のアニメーションを上書きします。新しいアニメーションがスタートし、現在実行されているものはキャンセルされます。(MooTools1.xにおける'wait': falseと同じです)。</li>
	<li>'chain'  - エフェクト実行中に呼び出されたものは連結され、現在のエフェクトが終了してから実行されます。</li>
</ul>
</li>
	<li>duration   - (<em>数</em>: 初期値=500) エフェクトの持続時間(ミリ秒)。次のいずれかも使用できます:
<ul>
	<li>'short'  - 250ミリ秒</li>
	<li>'normal' - 500ミリ秒</li>
	<li>'long'   - 1000ミリ秒</li>
</ul>
</li>
	<li>transition - (<em>関数</em>: 初期値=<a href="/docs/Fx/Fx.Transitions">'sine:in:out'</a> エフェクトを利用するための式。<a href="/docs/Fx/Fx.Transitions">Fx.Transitions</a>を参照のこと。次の形式の文字列も受け取ることができます:

transition[:in][:out] - 例: 'linear', 'quad:in', 'back:in', 'bounce:out', 'elastic:out', 'sine:in:out'</li>
</ul>
<h3>イベント:</h3>
<ul>
	<li>start         - (<em>関数</em>) エフェクトが始まったときに実行する関数。</li>
	<li>cancel        - (<em>関数</em>) エフェクトを手動で停止したときに実行する関数。</li>
	<li>complete      - (<em>関数</em>) エフェクトが完了したときに実行する関数。</li>
	<li>chainComplete - (<em>関数</em>) linkオプションに'chain' (<a href="#Fx:constructor">オプションを参照</a>)を使用しているときに実行する関数。連結されたすべてのエフェクトが終了したときに実行されます。</li>
</ul>
<h3>注意点:</h3>
<ul>
	<li>Fx.Transitions.jsをインクルードしていなければ、アニメーションを変更することはできません(自分でアニメーションを開発するなら別です)。;)</li>
	<li>Fxクラスは基本的な関数を拡張するための骨格となるだけのクラスです。</li>
</ul>
<h3>参考情報:</h3>
<ul>
	<li> <a href="/docs/Fx/Fx.Tween">Fx.Tween</a>, <a href="/docs/Fx/Fx.Morph">Fx.Morph</a>.</li>
</ul>
<h2 id="Fx:start"><a href="#Fx:start">Fxメソッド: start</a></h2>
<p class="description">アニメーションを開始するときに使われます。'start'イベントを発生させます。</p>

<h3>構文:</h3>
<pre class="javascript">myFx.<span class="me1">start</span><span class="br0">(</span>from<span class="br0">[</span>, to<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>from - (<em>いろいろ</em>) エフェクトの初期値。引数が一つだけならば、ターゲット値として使用されます。</li>
	<li>to   - (<em>いろいろ</em>, オプション) エフェクトのターゲット値。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) - このFxインスタンス。</li>
</ul>
<h3>例:</h3>
<ul>
	<li>それぞれのFxサブクラスのドキュメンテーションを参照のこと。</li>
</ul>
<h3>注意点:</h3>
<ul>
	<li>引数が一つだけの場合、第1引数はターゲット値として使われ、初期値は現在の要素の状態から算出されます。</li>
	<li>この値の書式とタイプはインプリメントの状態に強く依存します。それぞれのインプリメントの詳細を確認してください。</li>
</ul>
<h2 id="Fx:set"><a href="#Fx:set">Fxメソッド: set</a></h2>
<p class="description">setメソッドはアニメーションのすべての段階で発生します。値を指定して、エフェクトに適用することもできます。</p>

<h3>構文:</h3>
<pre class="javascript">myFx.<span class="me1">set</span><span class="br0">(</span>value<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>value - (<em>いろいろ</em>) アニメーションに適用したい値。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) - このFxインスタンス。</li>
</ul>
<h3>例:</h3>
<ul>
	<li>それぞれのFxサブクラスのドキュメンテーションを参照のこと。</li>
</ul>
<h2 id="Fx:cancel"><a href="#Fx:cancel">Fxメソッド: cancel</a></h2>
<p class="description">cancelメソッドは実行中のアニメーションをキャンセルします。'cancel'イベントが発生します。</p>

<h3>構文:</h3>
<pre class="javascript">myFx.<span class="me1">cancel</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) - このFxインスタンス。</li>
</ul>
<h2 id="Fx:pause"><a href="#Fx:pause">Fxメソッド: pause</a></h2>
<p class="description">実行中のエフェクトを一時的に停止します。</p>

<h3>構文:</h3>
<pre class="javascript">myFx.<span class="me1">pause</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) - このFxインスタンス。</li>
</ul>
<h3>注意点:</h3>
<ul>
	<li>エフェクトを停止したタイマーは<a href="#Fx:resume">Fx:resume</a>を呼び出すことで再開できます。</li>
	<li>停止したエフェクトを再開すると、タイマーは単に消去され、新しいアニメーションを開始します。</li>
</ul>
<h2 id="Fx:resume"><a href="#Fx:resume">Fxメソッド: resume</a></h2>
<p class="description">停止されたエフェクトを再開します。</p>

<h3>構文:</h3>
<pre class="javascript">myFx.<span class="me1">resume</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) - このFxインスタンス。</li>
</ul>
<h3>注意点:</h3>
<ul>
	<li>以前に一時停止されたエフェクトだけが再開できます。そうでない場合は無視されます。</li>
</ul>
</div>
<div id="menu" class="span-2 last">
<h4 class="menu-item"><a href="#Fx">Fx</a></h4>
<div class="menu-item"><a href="#Fx:constructor">constructor</a></div>
<div class="menu-item"><a href="#Fx:start">start</a></div>
<div class="menu-item"><a href="#Fx:set">set</a></div>
<div class="menu-item"><a href="#Fx:cancel">cancel</a></div>
<div class="menu-item"><a href="#Fx:pause">pause</a></div>
<div class="menu-item"><a href="#Fx:resume">resume</a></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>240</wp:post_id>
		<wp:post_date><![CDATA[2008-11-02 18:44:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-11-02 09:44:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[fx]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="fx"><![CDATA[Fx]]></category>
		<category domain="category" nicename="mootools"><![CDATA[MooTools]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Fx.CSS</title>
		<link>https://takahashifumiki.com/web/mootools/242/</link>
		<pubDate>Sun, 02 Nov 2008 09:46:34 +0000</pubDate>
		<dc:creator><![CDATA[takahashi_fumiki]]></dc:creator>
		<guid isPermaLink="false">https://takahashifumiki.com/?p=242</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="main" class="l-border r-border span-15">
<h1 id="Fx-CSS"><a href="#Fx-CSS">Class: Fx.CSS</a></h1>
<p class="description">エフェクトがCSSをパースするためのクラスです。<a href="/docs/Fx/Fx.Tween">Fx.Tween</a>、<a href="/docs/Fx/Fx.Morph">Fx.Morph</a>、<a href="/docs/Plugins/Fx.Elements">Fx.Elements</a>によって要求されます。</p>

パブリック・メソッドはありません。</div>
<div id="menu" class="span-2 last">
<h4 class="menu-item"><a href="#Fx-CSS">Fx.CSS</a></h4>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>242</wp:post_id>
		<wp:post_date><![CDATA[2008-11-02 18:46:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-11-02 09:46:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[fxcss]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="fx"><![CDATA[Fx]]></category>
		<category domain="category" nicename="mootools"><![CDATA[MooTools]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Fx.Tween</title>
		<link>https://takahashifumiki.com/web/mootools/244/</link>
		<pubDate>Sun, 02 Nov 2008 10:33:00 +0000</pubDate>
		<dc:creator><![CDATA[takahashi_fumiki]]></dc:creator>
		<guid isPermaLink="false">https://takahashifumiki.com/?p=244</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="main" class="l-border r-border span-15">
<h1 id="Fx-Tween"><a href="#Fx-Tween">Class: Fx.Tween</a></h1>
<p class="description"><a href="#Fx-Tween">Fx.Tween</a>とElementの<a href="#Element-Properties:tween">Element.tween</a>へのショートカットから成っています。</p>

<h3>継承:</h3>
<a href="/docs/Fx/Fx">Fx</a>
<h2 id="Fx-Tween:constructor"><a href="#Fx-Tween:constructor">Fx.Tweenメソッド: constructor</a></h2>
<p class="description">あらゆるCSSプロパティをある値から別の値へ遷移させるトゥイーンエフェクトです。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> myFx = <span class="kw2">new</span> Fx.<span class="me1">Tween</span><span class="br0">(</span>element, <span class="br0">[</span>, options<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>element  - (<em>いろいろ</em>) アニメーションを適用したい要素そのものか、要素のID。</li>
	<li>options  - (<em>オブジェクト</em>, オプション) <a href="/docs/Fx/Fx">Fx</a>オプションオブジェクトと、以下に挙げられるオプションです:</li>
</ol>
<h3>オプション:</h3>
<ul>
	<li>property - (<em>文字列</em>) 遷移させたいCSSプロパティ(例:'width', 'color', 'font-size', 'border',など)。オプションが省略された場合、startメソッドかsetメソッドの第1引数にプロパティを指定しなければなりません。初期値はnullです。</li>
</ul>
<h3>注意点:</h3>
<ul>
	<li>Element:setStyleで設定できるすべてのCSSプロパティはFx.Tweenによって遷移させることができます。</li>
	<li>border-styleやbackground-imageのように、プロパティが数学的に計算できないものであれば、アニメーション開始とともにすぐに変更されます。</li>
	<li>プロパティオプションを使う場合、startメソッドとsetメソッドに引数を渡してはいけません。</li>
</ul>
<h3>参考情報:</h3>
<ul>
	<li><a href="/docs/Fx/Fx">Fx</a></li>
</ul>
<h2 id="Fx-Tween:set"><a href="#Fx-Tween:set">Fx.Tweenメソッド: set</a></h2>
<p class="description">要素のCSSプロパティに対して任意の値を即座にセットします。</p>

<h3>構文:</h3>
<pre class="javascript">myFx.<span class="me1">set</span><span class="br0">(</span>property, value<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>property - (<em>文字列</em>) 値を設定したいCSSプロパティ。プロパティオプションを使用した場合は省略すること。</li>
	<li>value - (<em>いろいろ</em>) このインスタンスにセットしたいCSSプロパティの値。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) このFx.Tweenインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myFx = <span class="kw2">new</span> Fx.<span class="me1">Tween</span><span class="br0">(</span>element<span class="br0">)</span>;
<span class="co1">//背景色を即座に赤にします:</span>
myFx.<span class="me1">set</span><span class="br0">(</span><span class="st0">'background-color'</span>, <span class="st0">'#f00'</span><span class="br0">)</span>;</pre>
<h3>注意点:</h3>
プロパティオプションを使用する場合、startメソッドとsetメソッドに引数を渡してはいけません。
<h2 id="Fx-Tween:start"><a href="#Fx-Tween:start">Fx.Tweenメソッド: start</a></h2>
<p class="description">特定の値まで、CSSプロパティを遷移させます。</p>

<h3>構文:</h3>
<pre class="javascript">myFx.<span class="me1">start</span><span class="br0">(</span><span class="br0">[</span>property,<span class="br0">]</span> <span class="br0">[</span>from,<span class="br0">]</span> to<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>property - (<em>文字列</em>, オプションにない場合のみ) 遷移させたいCSSプロパティ。プロパティオプションを使用した場合は省略すること。</li>
	<li>from     - (<em>いろいろ</em>, オプション) エフェクト開始時のCSSプロパティの値。</li>
	<li>to       - (<em>いろいろ</em>) エフェクトのターゲットとなるCSSプロパティ値。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) このFx.Tweenインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myFx = <span class="kw2">new</span> Fx.<span class="me1">Tween</span><span class="br0">(</span>element<span class="br0">)</span>;

<span class="co1">//要素の背景色を黒から赤に遷移させます:</span>
myFx.<span class="me1">start</span><span class="br0">(</span><span class="st0">'background-color'</span>, <span class="st0">'#000'</span>, <span class="st0">'#f00'</span><span class="br0">)</span>;
<span class="co1">//要素の背景色を現在の色から青に遷移させます:</span>
myFx.<span class="me1">start</span><span class="br0">(</span><span class="st0">'background-color'</span>, <span class="st0">'#00f'</span><span class="br0">)</span>;</pre>
<h3>注意点:</h3>
<ul>
	<li>引数が一つしか渡されていない場合、第1引数がターゲット値として使用され、初期値は現在の状態から算出された値になります。</li>
	<li>色を使う場合、RGBカラー値か16進数カラー値が使われます。</li>
	<li>プロパティオプションを使用した場合、startメソッドとsetメソッドにプロパティを渡してはいけません。</li>
</ul>
<h1 id="Element-Properties"><a href="#Element-Properties">Hash: Element.Properties</a></h1>
<p class="description">参考:<a href="https://takahashifumiki.com/web/mootools/213#Element-Properties">Element.Properties</a></p>

<h2 id="Element-Properties:tween"><a href="#Element-Properties:tween">Elementプロパティ: tween</a></h2>
<p class="description">要素のFx.Tweenインスタンスにデフォルトオプションを設定・取得します。</p>

<h3>Set:</h3>
<h4>構文:</h4>
<pre class="javascript">el.<span class="me1">set</span><span class="br0">(</span><span class="st0">'tween'</span><span class="br0">[</span>, options<span class="br0">]</span><span class="br0">)</span>;</pre>
<h4>引数:</h4>
<ul>
	<li>options - (<em>オブジェクト</em>) Fx.Tweenオプション。</li>
</ul>
<h4>戻り値:</h4>
<ul>
	<li>(<em>要素</em>) この要素。</li>
</ul>
<h4>例:</h4>
<pre class="javascript">el.<span class="me1">set</span><span class="br0">(</span><span class="st0">'tween'</span>, <span class="br0">{</span>duration: <span class="st0">'long'</span><span class="br0">}</span><span class="br0">)</span>;
el.<span class="me1">tween</span><span class="br0">(</span><span class="st0">'color'</span>, <span class="st0">'#f00'</span><span class="br0">)</span>;</pre>
<h3>Get:</h3>
<h4>構文:</h4>
<pre class="javascript">el.<span class="me1">get</span><span class="br0">(</span><span class="st0">'tween'</span>, <span class="br0">[</span>options<span class="br0">]</span><span class="br0">)</span>;</pre>
<h4>引数:</h4>
<ol>
	<li>property - (<em>文字列</em>) Fx.Tweenプロパティの引数。</li>
	<li>options  - (<em>オブジェクト</em>) Fx.Tweenオプション。</li>
</ol>
<h4>戻り値:</h4>
<ul>
	<li>(<em>オブジェクト</em>) 要素内のFx.Tweenインスタンス。</li>
</ul>
<h4>例:</h4>
<pre class="javascript">el.<span class="me1">get</span><span class="br0">(</span><span class="st0">'tween'</span>, <span class="br0">{</span>property: <span class="st0">'opacity'</span>, duration: <span class="st0">'long'</span><span class="br0">}</span><span class="br0">)</span>.<span class="me1">start</span><span class="br0">(</span><span class="nu0">0</span><span class="br0">)</span>;</pre>
<h3>注意点:</h3>
<ul>
	<li>要素のTweenインスタンスをElement:setで初期化するときは、Tweenにプロパティを渡してはいけません。</li>
	<li>プロパティを指定するのは、実際のFx.TweenインスタンスにElement:getを行うときか、Element:tweenを呼び出すときのみです。</li>
	<li>setメソッドやgetメソッドにオプションを渡すと、新しいインスタンスが作られます。</li>
	<li>他のElementショートカットと同じく、setメソッドとgetメソッドの違いは、getがインスタンスを返す一方で、setは要素を返すという点です(連結と初期化のため)。</li>
</ul>
<h1 id="Element"><a href="#Element">Native: Element</a></h1>
<p class="description"><a href="/docs/Element/Element#dollar">$</a>関数で取得したDOM要素がすべてのメソッドを使えるようにするカスタムネイティブです。</p>

<h2 id="Element:tween"><a href="#Element:tween">Elementメソッド: tween</a></h2>
<p class="description">一つのCSSプロパティを即座に遷移させるためのElementのショートカットメソッドです。</p>

<h3>構文:</h3>
<pre class="javascript">myElement.<span class="me1">tween</span><span class="br0">(</span>property, startvalue<span class="br0">[</span>, endvalue<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>property   - (<em>文字列</em>) アニメーションさせたいCSSプロパティ。プロパティオプションをすでに設定しているときは省略すること。</li>
	<li>startvalue - (<em>いろいろ</em>) 遷移の初期値。</li>
	<li>endvalue   - (<em>いろいろ</em>) 遷移のターゲット値。これを省略した場合、startvalueがターゲット値として使われます。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>要素</em>) この要素。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="co1">//</span><span class="co1">"myElement"</span><span class="co1">の幅を現在の値から100pxに遷移させます:</span>
$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">tween</span><span class="br0">(</span><span class="st0">'width'</span>, <span class="st0">'100'</span><span class="br0">)</span>;

<span class="co1">//</span><span class="co1">"myElement"</span><span class="co1">の高さを20pxから200pxに遷移させます:</span>
$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">tween</span><span class="br0">(</span><span class="st0">'height'</span>, <span class="br0">[</span><span class="nu0">20</span>, <span class="nu0">200</span><span class="br0">]</span><span class="br0">)</span>;

<span class="co1">//</span><span class="co1">"myElement"</span><span class="co1">のボーダーを現在の値から</span><span class="co1">"6px solid blue"</span><span class="co1">へ変化させます:</span>
$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">tween</span><span class="br0">(</span><span class="st0">'border'</span>, <span class="st0">'6px solid #36f'</span><span class="br0">)</span>;</pre>
<h3>参考情報:</h3>
<ul>
	<li><a href="#Fx-Tween">Fx.Tween</a></li>
</ul>
<h2 id="Element:fade"><a href="#Element:fade">Elementメソッド: fade</a></h2>
<p class="description">透明度アニメーションのためのElementのショートカットメソッド。要素を特定の透明度までフェードイン・フェードアウトさせるのに役立ちます。</p>

<h3>構文:</h3>
<pre class="javascript">myElement.<span class="me1">fade</span><span class="br0">(</span><span class="br0">[</span>how<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>how - (<em>いろいろ</em>, オプション: 初期値='toggle') 数字か文字列による透明度の指定。次の値を使えます:
<ul>
	<li>'in'     - 要素を不透明度100%までフェードインさせます。</li>
	<li>'out'    - 要素を不透明度0%までフェードアウトさせます。</li>
	<li>'show'   - 要素の不透明度を即座に100%に設定します。</li>
	<li>'hide'   - 要素の不透明度を即座に0%に設定します。</li>
	<li>'toggle' - 要素が表示されていればフェードアウトさせ、そうでなければフェードインさせます。</li>
	<li>(<em>数</em>)  - 0から1の間の少数値。この不透明度まで要素をフェードさせます。</li>
</ul>
</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>この要素。</li>
</ul>
<h3>例:</h3>
<pre class="javascript">$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">fade</span><span class="br0">(</span><span class="st0">'out'</span><span class="br0">)</span>; <span class="co1">//"myElement"をフェードアウト。</span>
$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">fade</span><span class="br0">(</span><span class="nu0">0.7</span><span class="br0">)</span>; <span class="co1">//"myElement"を70%までフェードアウト。</span></pre>
<h2 id="Element:highlight"><a href="#Element:highlight">Elementメソッド: highlight</a></h2>
<p class="description">背景色を遷移させるためのElementショートカットメソッドです。要素の背景色を指定した色に即座に変更し、それから元の色に戻します。</p>

<h3>構文:</h3>
<pre class="javascript">myElement.<span class="me1">highlight</span><span class="br0">(</span><span class="br0">[</span>start, end<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>start - (<em>文字列</em>, オプション: 初期値='#ff8') 遷移を開始する色。</li>
	<li>end - (<em>文字列</em>, オプション: 初期値=要素に設定されていたbackground-color) ハイライトエフェクトの後に戻る色。</li>
</ol>
<h3>注意点:</h3>
要素に背景色が設定されていない、または'tranparent'に設定されている場合、初期値と終了値は白になります。
<h3>戻り値:</h3>
<ul>
	<li>(<em>要素</em>) この要素。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="co1">//背景色を即座に水色に変え、それから元の色(または白)に戻します:</span>

$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">highlight</span><span class="br0">(</span><span class="st0">'#ddf'</span><span class="br0">)</span>;

<span class="co1">//背景色を即座に水色に変え、それからグレーにフェードさせます:</span>
$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">highlight</span><span class="br0">(</span><span class="st0">'#ddf'</span>, <span class="st0">'#ccc'</span><span class="br0">)</span>;</pre>
</div>
<div id="menu" class="span-2 last">
<h4 class="menu-item"><a href="#Fx-Tween">Fx.Tween</a></h4>
<div class="menu-item"><a href="#Fx-Tween:constructor">constructor</a></div>
<div class="menu-item"><a href="#Fx-Tween:set">set</a></div>
<div class="menu-item"><a href="#Fx-Tween:start">start</a></div>
<h4 class="menu-item"><a href="#Element-Properties">Element.Properties</a></h4>
<div class="menu-item"><a href="#Element-Properties:tween">tween</a></div>
<h4 class="menu-item"><a href="#Element">Element</a></h4>
<div class="menu-item"><a href="#Element:tween">tween</a></div>
<div class="menu-item"><a href="#Element:fade">fade</a></div>
<div class="menu-item"><a href="#Element:highlight">highlight</a></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>244</wp:post_id>
		<wp:post_date><![CDATA[2008-11-02 19:33:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-11-02 10:33:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[fxtween]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="fx"><![CDATA[Fx]]></category>
		<category domain="category" nicename="mootools"><![CDATA[MooTools]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Fx.Morph</title>
		<link>https://takahashifumiki.com/web/mootools/246/</link>
		<pubDate>Sun, 02 Nov 2008 11:34:47 +0000</pubDate>
		<dc:creator><![CDATA[takahashi_fumiki]]></dc:creator>
		<guid isPermaLink="false">https://takahashifumiki.com/?p=246</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="main" class="l-border r-border span-15">
<h1 id="Fx-Morph"><a href="#Fx-Morph">Class: Fx.Morph</a></h1>
<p class="description">複数のCSSプロパティを一度にアニメーションさせることができ、CSSセレクタを使用することもできます。<a href="/docs/Fx/Fx">Fx</a>からメソッド、イベント、プロパティ、オプションを継承します。</p>

<h3>継承:</h3>
<ul>
	<li><a href="/docs/Fx/Fx">Fx</a></li>
</ul>
<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> myFx = <span class="kw2">new</span> Fx.<span class="me1">Morph</span><span class="br0">(</span>element<span class="br0">[</span>, options<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>element - (<em>いろいろ</em>) スタイルをアニメーションさせたい要素のIDか要素そのもの。</li>
	<li>options - (<em>オブジェクト</em>, オプション) <a href="https://takahashifumiki.com/web/mootools/240">Fx</a>オプションオブジェクト。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) 新しいFx.Morphインスタンス。</li>
</ul>
<h3>例:</h3>
オブジェクトを利用して、複数のスタイルに初期値・終了値を設定:
<pre class="javascript"><span class="kw2">var</span> myEffect = <span class="kw2">new</span> Fx.<span class="me1">Morph</span><span class="br0">(</span><span class="st0">'myElement'</span>, <span class="br0">{</span>duration: <span class="st0">'long'</span>, transition: Fx.<span class="me1">Transitions</span>.<span class="me1">Sine</span>.<span class="me1">easeOut</span><span class="br0">}</span><span class="br0">)</span>;

myEffect.<span class="me1">start</span><span class="br0">(</span><span class="br0">{</span>
    <span class="st0">'height'</span>: <span class="br0">[</span><span class="nu0">10</span>, <span class="nu0">100</span><span class="br0">]</span>, <span class="co1">//スタイル'height'が10pxから100pxへ変形。</span>

    <span class="st0">'width'</span>: <span class="br0">[</span><span class="nu0">900</span>, <span class="nu0">300</span><span class="br0">]</span>  <span class="co1">//スタイル'width'が900pxから300pxへ変形。</span>
<span class="br0">}</span><span class="br0">)</span>;</pre>
複数のスタイルの初期値を省略し、現在の要素のスタイルを初期値として利用:
<pre class="javascript"><span class="kw2">var</span> myEffect = <span class="kw2">new</span> Fx.<span class="me1">Morph</span><span class="br0">(</span><span class="st0">'myElement'</span>, <span class="br0">{</span>duration: <span class="st0">'short'</span>, transition: Fx.<span class="me1">Transitions</span>.<span class="me1">Sine</span>.<span class="me1">easeOut</span><span class="br0">}</span><span class="br0">)</span>;

myEffect.<span class="me1">start</span><span class="br0">(</span><span class="br0">{</span>
    <span class="st0">'height'</span>: <span class="nu0">100</span>, <span class="co1">//現在の高さから100pxまで変形。</span>
    <span class="st0">'width'</span>: <span class="nu0">300</span>   <span class="co1">//現在の幅から300pxまで変形。</span>

<span class="br0">}</span><span class="br0">)</span>;</pre>
CSSクラスにマッチする要素のCSSプロパティを変更:
<pre class="javascript"><span class="kw2">var</span> myEffect = <span class="kw2">new</span> Fx.<span class="me1">Morph</span><span class="br0">(</span><span class="st0">'myElement'</span>, <span class="br0">{</span>duration: <span class="nu0">1000</span>, transition: Fx.<span class="me1">Transitions</span>.<span class="me1">Sine</span>.<span class="me1">easeOut</span><span class="br0">}</span><span class="br0">)</span>;

<span class="co1">//myEffectのスタイル変更がターゲット要素にだけ適用されます。</span>
myEffect.<span class="me1">start</span><span class="br0">(</span><span class="st0">'.myClassName'</span><span class="br0">)</span>;</pre>
<h3>参考情報:</h3>
<ul>
	<li><a href="/docs/Fx/Fx">Fx</a></li>
</ul>
<h2 id="Fx-Morph:set"><a href="#Fx-Morph:set">Fx.Morphメソッド: set</a></h2>
<p class="description">要素のCSSプロパティを指定した値へ即座に変更します。</p>

<h3>構文:</h3>
<pre class="javascript">myFx.<span class="me1">set</span><span class="br0">(</span>to<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>properties - (<em>いろいろ</em>) 変更したいCSSプロパティのキー=値のペアを持つオブジェクトか、CSSセレクターを指定した文字列。CSSプロパティに対して一つの値しか与えられていなければ、現在の値から与えられた値へと遷移します。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) このFx.Morphインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myFx = <span class="kw2">new</span> Fx.<span class="me1">Morph</span><span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">set</span><span class="br0">(</span><span class="br0">{</span>

    <span class="st0">'height'</span>: <span class="nu0">200</span>,
    <span class="st0">'width'</span>: <span class="nu0">200</span>,
    <span class="st0">'background-color'</span>: <span class="st0">'#f00'</span>,
    <span class="st0">'opacity'</span>: <span class="nu0">0</span>

<span class="br0">}</span><span class="br0">)</span>;
<span class="kw2">var</span> myFx = <span class="kw2">new</span> Fx.<span class="me1">Morph</span><span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">set</span><span class="br0">(</span><span class="st0">'.myClass'</span><span class="br0">)</span>;</pre>
<h2 id="Fx-Morph:start"><a href="#Fx-Morph:start">Fx.Morphメソッド: start</a></h2>
<p class="description">複数のCSSプロパティを同時にアニメーションさせます。</p>

<h3>構文:</h3>
<pre class="javascript">myFx.<span class="me1">start</span><span class="br0">(</span>properties<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>properties - (<em>いろいろ</em>) 変更させたいCSSプロパティのキー＝値からなるオブジェクトか、CSSセレクタを表す文字列。
もしCSSプロパティの値が一つだけならば、現在の値から与えられた値へとアニメーションします。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) このFx.Morphインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myEffects = <span class="kw2">new</span> Fx.<span class="me1">Morph</span><span class="br0">(</span><span class="st0">'myElement'</span>, <span class="br0">{</span>duration: <span class="nu0">1000</span>, transition: Fx.<span class="me1">Transitions</span>.<span class="me1">Sine</span>.<span class="me1">easeOut</span><span class="br0">}</span><span class="br0">)</span>;

myEffects.<span class="me1">start</span><span class="br0">(</span><span class="br0">{</span>
    <span class="st0">'height'</span>: <span class="br0">[</span><span class="nu0">10</span>, <span class="nu0">100</span><span class="br0">]</span>,
    <span class="st0">'width'</span>: <span class="br0">[</span><span class="nu0">900</span>, <span class="nu0">300</span><span class="br0">]</span>,
    <span class="st0">'opacity'</span>: <span class="nu0">0</span>,
    <span class="st0">'background-color'</span>: <span class="st0">'#00f'</span>

<span class="br0">}</span><span class="br0">)</span>;</pre>
<h3>注意点:</h3>
<ul>
	<li>CSSセレクターとして文字列が与えられた場合、セレクターは一意のものでなくてはなりません。</li>
	<li>複数のセレクター(カンマ区切り)はサポートされていません。</li>
</ul>
<h1 id="Element-Properties"><a href="#Element-Properties">Hash: Element.Properties</a></h1>
<p class="description">参考:<a href="https://takahashifumiki.com/web/mootools/213#Element-Properties">Element.Properties</a></p>

<h2 id="Element-Properties:morph"><a href="#Element-Properties:morph">Element Property: morph</a></h2>
<h3 class="description">Set:</h3>
要素にデフォルトのFx.Morphインスタンスを設定します。
<h4>構文:</h4>
<pre class="javascript">el.<span class="me1">set</span><span class="br0">(</span><span class="st0">'morph'</span><span class="br0">[</span>, options<span class="br0">]</span><span class="br0">)</span>;</pre>
<h4>引数:</h4>
<ol>
	<li>options - (<em>オブジェクト</em>, オプション) Fx.Morphオプション。</li>
</ol>
<h4>戻り値:</h4>
<ul>
	<li>(<em>要素</em>) この要素。</li>
</ul>
<h4>例:</h4>
<pre class="javascript">el.<span class="me1">set</span><span class="br0">(</span><span class="st0">'morph'</span>, <span class="br0">{</span>duration: <span class="st0">'long'</span>, transition: <span class="st0">'bounce:out'</span><span class="br0">}</span><span class="br0">)</span>;
el.<span class="me1">morph</span><span class="br0">(</span><span class="br0">{</span>height: <span class="nu0">100</span>, width: <span class="nu0">100</span><span class="br0">}</span><span class="br0">)</span>;</pre>
<h3>Get:</h3>
要素のデフォルトFx.Morphインスタンスを取得します。
<h4>構文:</h4>
<pre class="javascript">el.<span class="me1">get</span><span class="br0">(</span><span class="st0">'morph'</span><span class="br0">)</span>;</pre>
<h4>引数:</h4>
<ol>
	<li>options - (<em>オブジェクト</em>, オプション) Fx.Morphオプション。これが渡されると、新しいインスタンスが生成されます。</li>
</ol>
<h4>戻り値:</h4>
<ul>
	<li>(<em>オブジェクト</em>) Fx.Morphインスタンス。</li>
</ul>
<h4>例:</h4>
<pre class="javascript">el.<span class="me1">set</span><span class="br0">(</span><span class="st0">'morph'</span>, <span class="br0">{</span>duration: <span class="st0">'long'</span>, transition: <span class="st0">'bounce:out'</span><span class="br0">}</span><span class="br0">)</span>;
el.<span class="me1">morph</span><span class="br0">(</span><span class="br0">{</span>height: <span class="nu0">100</span>, width: <span class="nu0">100</span><span class="br0">}</span><span class="br0">)</span>;
el.<span class="me1">get</span><span class="br0">(</span><span class="st0">'morph'</span><span class="br0">)</span>; <span class="co1">//Fx.Morphインスタンス。</span></pre>
<h1 id="Element"><a href="#Element">Native: Element</a></h1>
<h2 id="Element:morph" class="description"><a href="#Element:morph">Elementメソッド: morph</a></h2>
<p class="description">渡されたプロパティを元に、要素をアニメーションさせます。</p>

<h3>構文:</h3>
<pre class="javascript">myElement.<span class="me1">morph</span><span class="br0">(</span>properties<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>properties - (<em>いろいろ</em>) アニメーションさせるCSSプロパティ。CSSプロパティのオブジェクトか、CSSセレクターを表す文字列。CSSプロパティに与えられた値が1つの場合、現在のCSSプロパティ値から、与えられた値へとアニメーションさせます。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>要素</em>) この要素。</li>
</ul>
<h3>例:</h3>
オブジェクトの場合:
<pre class="javascript">$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">morph</span><span class="br0">(</span><span class="br0">{</span>height: <span class="nu0">100</span>, width: <span class="nu0">200</span><span class="br0">}</span><span class="br0">)</span>;</pre>
CSSセレクターの場合:
<pre class="javascript">$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">morph</span><span class="br0">(</span><span class="st0">'.class1'</span><span class="br0">)</span>;</pre>
<h3>参考情報:</h3>
<ul>
	<li><a href="#Fx-Morph">Fx.Morph</a></li>
</ul>
</div>
<div id="menu" class="span-2 last">
<h4 class="menu-item"><a href="#Fx-Morph">Fx.Morph</a></h4>
<div class="menu-item"><a href="#Fx-Morph:set">set</a></div>
<div class="menu-item"><a href="#Fx-Morph:start">start</a></div>
<h4 class="menu-item"><a href="#Element-Properties">Element.Properties</a></h4>
<div class="menu-item"><a href="#Element-Properties:morph">morph</a></div>
<h4 class="menu-item"><a href="#Element">Element</a></h4>
<div class="menu-item"><a href="#Element:morph">morph</a></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>246</wp:post_id>
		<wp:post_date><![CDATA[2008-11-02 20:34:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-11-02 11:34:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[fxmorph]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="fx"><![CDATA[Fx]]></category>
		<category domain="category" nicename="mootools"><![CDATA[MooTools]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Fx.Transition</title>
		<link>https://takahashifumiki.com/web/mootools/248/</link>
		<pubDate>Sun, 02 Nov 2008 12:07:31 +0000</pubDate>
		<dc:creator><![CDATA[takahashi_fumiki]]></dc:creator>
		<guid isPermaLink="false">https://takahashifumiki.com/?p=248</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="main" class="l-border r-border span-15">
<h1 id="Fx"><a href="#Fx">Class: Fx</a></h1>
<p class="description">Fx.Transitionsはベースとなる<a href="/docs/Fx/Fx">Fx</a>コンストラクタを上書きし、transitionオプションを文字列として使えるようにします。</p>

<h3>Transitionオプション:</h3>
エフェクトに用いる方程式。<a href="#Fx-Transitions">Fx.Transitions</a>を参照のこと。関数(ex: Fx.Transitions.Sine.easeIn)と文字列('sine:in', 'bounce:out' or 'quad:in:out')の両方を受け入れ、Fx.Transitions.Sine.easeIn / Fx.Transitions.Bounce.easeOut / Fx.Transitions.Quad.easeInOutへとマッピングします。
<h1 id="Fx-Transitions"><a href="#Fx-Transitions">Hash: Fx.Transitions</a></h1>
<p class="description"><a href="/docs/Fx/Fx">Fx</a>クラスに用いるアニメーション遷移のバリエーション。</p>

<h3>例:</h3>
<pre class="javascript"><span class="co1">//初期値=Elastic.easeOut:</span>
<span class="kw2">var</span> myFx = $<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">effect</span><span class="br0">(</span><span class="st0">'margin'</span>, <span class="br0">{</span>transition: Fx.<span class="me1">Transitions</span>.<span class="me1">Elastic</span>.<span class="me1">easeOut</span><span class="br0">}</span><span class="br0">)</span>;</pre>
<h3>参考情報:</h3>
<ul>
	<li><a href="http://www.robertpenner.com/easing/">Robert Penner's Easing Equations</a></li>
</ul>
<h2 id="Fx-Transitions:linear"><a href="#Fx-Transitions:linear">Fx.Transitionsメソッド: linear</a></h2>
<p class="description">一次方程式による遷移。</p>

<h2 id="Fx-Transitions:quad"><a href="#Fx-Transitions:quad">Fx.Transitionsメソッド: quad</a></h2>
<p class="description">二次方程式による遷移。Quad.easeIn、Quad.easeOut、Quad.easeInOutのいずれか。</p>

<h2 id="Fx-Transitions:cubic"><a href="#Fx-Transitions:cubic">Fx.Transitionsメソッド: cubic</a></h2>
<p class="description">三次方程式による遷移。Cubic.easeIn、Cubic.easeOut、Cubic.easeInOutのいずれか。</p>

<h2 id="Fx-Transitions:quart"><a href="#Fx-Transitions:quart">Fx.Transitionsメソッド: quart</a></h2>
<p class="description">四次方程式による遷移。Quart.easeIn、Quart.easeOut、Quart.easeInOutのいずれか。</p>

<h2 id="Fx-Transitions:quint"><a href="#Fx-Transitions:quint">Fx.Transitionsメソッド: quint</a></h2>
<p class="description">五次方程式による遷移。Quint.easeIn、Quint.easeOut、Quint.easeInOutのいずれか。</p>

<h2 id="Fx-Transitions:pow"><a href="#Fx-Transitions:pow">Fx.Transitionsメソッド: pow</a></h2>
<p class="description">Quad、Cubic、Quart、Quintを生成するために使われます。Used to generate .</p>

<h3>注意点:</h3>
<ul>
	<li>初期値は<code>p^6</code>.</li>
</ul>
<h2 id="Fx-Transitions:expo"><a href="#Fx-Transitions:expo">Fx.Transitionsメソッド: expo</a></h2>
<p class="description">幾何級数的な遷移。Expo.easeIn、Expo.easeOut、Expo.easeInOutのいずれか。</p>

<h2 id="Fx-Transitions:circ"><a href="#Fx-Transitions:circ">Fx.Transitionsメソッド: circ</a></h2>
<p class="description">余弦波による遷移。Circ.easeIn、Circ.easeOut、Circ.easeInOutのいずれか。</p>

<h2 id="Fx-Transitions:sine"><a href="#Fx-Transitions:sine">Fx.Transitionsメソッド: sine</a></h2>
<p class="description">正弦波による遷移。Sine.easeIn、Sine.easeOut、Sine.easeInOutのいずれか。</p>

<h2 id="Fx-Transitions:back"><a href="#Fx-Transitions:back">Fx.Transitionsメソッド: back</a></h2>
<p class="description">一端下がってから進みます。Back.easeIn、Back.easeOut、Back.easeInOutのいずれか。</p>

<h2 id="Fx-Transitions:bounce"><a href="#Fx-Transitions:bounce">Fx.Transitionsメソッド: bounce</a></h2>
<p class="description">バウンドしながら遷移します。Bounce.easeIn、Bounce.easeOut、Bounce.easeInOutのいずれか。</p>

<h2 id="Fx-Transitions:elastic"><a href="#Fx-Transitions:elastic">Fx.Transitionsメソッド: elastic</a></h2>
<p class="description">ゴムのようなカーブ。Elastic.easeIn、Elastic.easeOut、Elastic.easeInOutのいずれか。</p>

<h1 id="Fx-Transition"><a href="#Fx-Transition">Class: Fx.Transition</a></h1>
<p class="description">このクラスは自分でイージングの方程式を書ける数学の天才にしか役立たないでしょう。
'easeIn'、'easeOut'、'easeInOut'メソッドを持った<a href="/docs/Fx/Fx">Fx</a>関数を返します。
<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> myTransition = <span class="kw2">new</span> Fx.<span class="me1">Transition</span><span class="br0">(</span>transition<span class="br0">[</span>, params<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>transition - (<em>関数</em>) <a href="#Fx-Transitions">Fx.Transitions</a>関数か、ユーザーが作成したエージング関数。</li>
	<li>params     - (<em>いろいろ</em>, オプション) transition関数の第2引数として与えられる単一の値か、複数の値からなる配列。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>関数</em>) イージング関数。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="co1">//Elastic.easeOutの伸び具合ににユーザーが任意の値を与えます。</span>
<span class="kw2">var</span> myTransition = <span class="kw2">new</span> Fx.<span class="me1">Transition</span><span class="br0">(</span>Fx.<span class="me1">Transitions</span>.<span class="me1">Elastic</span>, <span class="nu0">3</span><span class="br0">)</span>;

<span class="kw2">var</span> myFx = $<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">effect</span><span class="br0">(</span><span class="st0">'margin'</span>, <span class="br0">{</span>transition: myTransition.<span class="me1">easeOut</span><span class="br0">}</span><span class="br0">)</span>;</pre>
<h3>参考情報:</h3>
<ul>
	<li><a href="#Fx-Transitions">Fx.Transitions</a></li>
</ul>
</div>
<div id="menu" class="span-2 last">
<h4 class="menu-item"><a href="#Fx">Fx</a></h4>
<h4 class="menu-item"><a href="#Fx-Transitions">Fx.Transitions</a></h4>
<div class="menu-item"><a href="#Fx-Transitions:linear">linear</a></div>
<div class="menu-item"><a href="#Fx-Transitions:quad">quad</a></div>
<div class="menu-item"><a href="#Fx-Transitions:cubic">cubic</a></div>
<div class="menu-item"><a href="#Fx-Transitions:quart">quart</a></div>
<div class="menu-item"><a href="#Fx-Transitions:quint">quint</a></div>
<div class="menu-item"><a href="#Fx-Transitions:pow">pow</a></div>
<div class="menu-item"><a href="#Fx-Transitions:expo">expo</a></div>
<div class="menu-item"><a href="#Fx-Transitions:circ">circ</a></div>
<div class="menu-item"><a href="#Fx-Transitions:sine">sine</a></div>
<div class="menu-item"><a href="#Fx-Transitions:back">back</a></div>
<div class="menu-item"><a href="#Fx-Transitions:bounce">bounce</a></div>
<div class="menu-item"><a href="#Fx-Transitions:elastic">elastic</a></div>
<h4 class="menu-item"><a href="#Fx-Transition">Fx.Transition</a></h4>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>248</wp:post_id>
		<wp:post_date><![CDATA[2008-11-02 21:07:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-11-02 12:07:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[fxtransition]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="fx"><![CDATA[Fx]]></category>
		<category domain="category" nicename="mootools"><![CDATA[MooTools]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Request</title>
		<link>https://takahashifumiki.com/web/mootools/250/</link>
		<pubDate>Sun, 02 Nov 2008 12:40:45 +0000</pubDate>
		<dc:creator><![CDATA[takahashi_fumiki]]></dc:creator>
		<guid isPermaLink="false">https://takahashifumiki.com/?p=250</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="main" class="l-border r-border span-15">
<h1 id="Request"><a href="#Request">Class: Request</a></h1>
<p class="description">XMLHttpRequestのラッパーです。</p>

<h3>Implements:</h3>
<a href="/docs/Class/Class.Extras#Chain">Chain</a>, <a href="/docs/Class/Class.Extras#Events">Events</a>, <a href="/docs/Class/Class.Extras#Options">Options</a>
<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> myRequest = <span class="kw2">new</span> Request<span class="br0">(</span><span class="br0">[</span>options<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>options - (<em>オブジェクト</em>, オプション) 以下を参照。</li>
</ol>
<h3>Options:</h3>
<ul>
	<li>url        - (<em>文字列</em>: 初期値=null) リクエスト先のURL。</li>
	<li>method     - (<em>文字列</em>: 初期値='post') リクエストのHTTPメソッド。'post'か'get'のどちらか。</li>
	<li>data       - (<em>文字列</em>: 初期値='') <a href="#Request:send">Request:send</a>の初期値。データが与えられなかったときに使われます。</li>
	<li>link       - (<em>文字列</em>: 初期値='ignore') 'ignore'、'cancel'、'chain'のいずれか。
<ul>
	<li>'ignore' - リクエスト実行中のリクエスト呼び出しは無視されます(MooTools1.11における'wait': trueと同じです)。</li>
	<li>'cancel' - リクエスト実行中に新たなリクエストがあった場合は、新しい方を優先し、現在のリクエストを停止します(MooTools1.11における'wait': falseと同じです)。</li>
	<li>'chain'  - リクエスト実行中に新たなリクエストがあった場合は、連結され、現在のリクエストが終了してから実行します。</li>
</ul>
</li>
	<li>async      - (<em>真偽値</em>: 初期値=true) falseにセットされた場合、リクエストは同期し、リクエストが終了するまでブラウザはフリーズします。</li>
	<li>encoding   - (<em>文字列</em>: 初期値='utf-8') リクエスト・ヘッダーに添附される文字コードです。</li>
	<li>headers    - (<em>オブジェクト</em>) リクエストヘッダーをセットするために使われるオブジェクトです。</li>
	<li>isSuccess  - (<em>関数</em>) 組み込み関数のisSuccess を上書きします。</li>
	<li>evalScripts  - (<em>真偽値</em>: 初期値=true) trueにセットされると、レスポンス内のscriptタグは評価されます。</li>
	<li>evalResponse - (<em>真偽値</em>: 初期値=false) trueにセットされると、レスポンス全体が評価されます。コンテンツ型がjavascriptの場合は自動的に評価されます。</li>
	<li>emulation  - (<em>真偽値</em>: 初期値=true) trueにセットされると、'post'と'get'以外のメソッドが加えられ、'_method'という名前のポストデータになります(Ruby On Railsで使われます)。</li>
	<li>urlEncoded - (<em>真偽値</em>: 初期値=true) trueにセットされると、content-typeヘッダーはwww-form-urlencoded + 文字コードにセットされます。</li>
</ul>
<h3>イベント:</h3>
<h4>request</h4>
リクエストを送った時に発生します。
<h5>表記:</h5>
<pre class="javascript">onRequest<span class="br0">(</span><span class="br0">)</span></pre>
<h4>complete</h4>
リクエストが完了したときに発生します。
<h5>表記:</h5>
<pre class="javascript">onComplete<span class="br0">(</span><span class="br0">)</span></pre>
<h4>cancel</h4>
リクエストがキャンセルされた時に発生します。
<h5>表記:</h5>
<pre class="javascript">onCancel<span class="br0">(</span><span class="br0">)</span></pre>
<h4>success</h4>
リクエストが終了して成功に終わると発生します。
<h5>表記:</h5>
<pre class="javascript">onSuccess<span class="br0">(</span>responseText, responseXML<span class="br0">)</span></pre>
<h5>引数:</h5>
<ol>
	<li>responseText - (<em>文字列</em>) リクエストから受け取ったテキスト。</li>
	<li>responseXML  - (<em>いろいろ</em>) リクエストから受け取ったXML。</li>
</ol>
<h4>failure</h4>
リクエストが失敗したときに発生します(エラーステータスコード)。
<h5>表記:</h5>
<pre class="javascript">onFailure<span class="br0">(</span>xhr<span class="br0">)</span></pre>
<h5>引数:</h5>
xhr - (XMLHttpRequest) transportインスタンス。
<h4>exception</h4>
リクエストのヘッダー設定に失敗すると発生します。
<h5>表記:</h5>
<pre class="javascript">onException<span class="br0">(</span>headerName, value<span class="br0">)</span></pre>
<h5>引数:</h5>
<ol>
	<li>headerName - (<em>文字列</em>) 失敗したヘッダー名。</li>
	<li>value      - (<em>文字列</em>) 失敗したヘッダーの値。</li>
</ol>
<h3>プロパティ:</h3>
<ul>
	<li>running  - (<em>真偽値</em>) trueならばリクエストを実行します。</li>
	<li>response - (<em>オブジェクト</em>) キーにテキストとXMLを持つオブジェクト。'success'イベントを通してこれにアクセスできます。</li>
</ul>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) 新しいRequestインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myRequest = <span class="kw2">new</span> Request<span class="br0">(</span><span class="br0">{</span>method: <span class="st0">'get'</span>, url: <span class="st0">'requestHandler.php'</span><span class="br0">}</span><span class="br0">)</span>;
myRequest.<span class="me1">send</span><span class="br0">(</span><span class="st0">'name=john&amp;lastname=dorian'</span><span class="br0">)</span>;</pre>
<h3>参考情報:</h3>
<ul>
	<li><a href="http://en.wikipedia.org/wiki/XMLHttpRequest">Wikipedia: XMLHttpRequest</a></li>
</ul>
<h2 id="Request:setHeader"><a href="#Request:setHeader">Requestメソッド: setHeader</a></h2>
<p class="description">リクエストのヘッダーを追加・修正します。オプションのヘッダーは上書きできません。</p>

<h3>構文:</h3>
<pre class="javascript">myRequest.<span class="me1">setHeader</span><span class="br0">(</span><span class="kw3">name</span>, value<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>name  - (<em>文字列</em>) ヘッダーの名前。</li>
	<li>value - (<em>文字列</em>) アサインする値。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) このRequestインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myRequest = <span class="kw2">new</span> Request<span class="br0">(</span><span class="br0">{</span>url: <span class="st0">'getData.php'</span>,メソッド: <span class="st0">'get'</span>, headers: <span class="br0">{</span><span class="st0">'X-Request'</span>: <span class="st0">'JSON'</span><span class="br0">}</span><span class="br0">}</span><span class="br0">)</span>;
myRequest.<span class="me1">setHeader</span><span class="br0">(</span><span class="st0">'Last-Modified'</span>,<span class="st0">'Sat, 1 Jan 2005 05:00:00 GMT'</span><span class="br0">)</span>;</pre>
<h2 id="Request:getHeader"><a href="#Request:getHeader">Requestメソッド: getHeader</a></h2>
<p class="description">与えられたレスポンスヘッダーを取得し、なければnullを返します。</p>

<h3>構文:</h3>
<pre class="javascript">myRequest.<span class="me1">getHeader</span><span class="br0">(</span><span class="kw3">name</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>name - (<em>文字列</em>) 値を取得したいヘッダーの名前。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>文字列</em>) 取得したヘッダーの値。</li>
	<li>(<em>null</em>) <code>ヘッダーがなければnull。</code></li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myRequest = <span class="kw2">new</span> Request<span class="br0">(</span>url, <span class="br0">{</span>method: <span class="st0">'get'</span>, headers: <span class="br0">{</span><span class="st0">'X-Request'</span>: <span class="st0">'JSON'</span><span class="br0">}</span><span class="br0">}</span><span class="br0">)</span>;

<span class="kw2">var</span> headers = myRequest.<span class="me1">getHeader</span><span class="br0">(</span><span class="st0">'X-Request'</span><span class="br0">)</span>; <span class="co1">//戻り値'JSON'.</span></pre>
<h2 id="Request:send"><a href="#Request:send">Requestメソッド: send</a></h2>
<p class="description">リクエストの接続を開き、指定されたオプションとともにデータを送信します。</p>

<h3>構文:</h3>
<pre class="javascript">myRequest.<span class="me1">send</span><span class="br0">(</span><span class="br0">[</span>options<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>options - (<em>オブジェクト</em>, オプション) 送られたリクエストのオプション。齟齬をきたさないために、データをクエリ文字列にして使うこともできます。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) このRequestインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myRequest = <span class="kw2">new</span> Request<span class="br0">(</span><span class="br0">{</span>url: <span class="st0">'http://localhost/some_url'</span><span class="br0">}</span><span class="br0">)</span>.<span class="me1">send</span><span class="br0">(</span><span class="st0">"save=username&amp;name=John"</span><span class="br0">)</span>;</pre>
<h2 id="Request:cancel"><a href="#Request:cancel">Requestメソッド: cancel</a></h2>
<p class="description">現在リクエストが行われていれば、それをキャンセルします。</p>

<h3>構文:</h3>
<pre class="javascript">myRequest.<span class="me1">cancel</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) このRequestインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myRequest = <span class="kw2">new</span> Request<span class="br0">(</span><span class="br0">{</span>url: <span class="st0">'mypage.html'</span>,メソッド: <span class="st0">'get'</span><span class="br0">}</span><span class="br0">)</span>.<span class="me1">send</span><span class="br0">(</span><span class="st0">'some=data'</span><span class="br0">)</span>;
myRequest.<span class="me1">cancel</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h1 id="Element-Properties"><a href="#Element-Properties">Hash: Element.Properties</a></h1>
<p class="description">参考情報:<a href="https://takahashifumiki.com/web/mootools/213#Element-Properties">Element.Properties</a></p>

<h2 id="Element-Properties:send"><a href="#Element-Properties:send">Element Property: send</a></h2>
<h3 class="description">Set</h3>
要素にデフォルトRequestインスタンスを設定します。フォームを扱うときに便利です。
<h4>構文:</h4>
<pre class="javascript">el.<span class="me1">set</span><span class="br0">(</span><span class="st0">'send'</span><span class="br0">[</span>, options<span class="br0">]</span><span class="br0">)</span>;</pre>
<h4>引数:</h4>
<ol>
	<li>options - (<em>オブジェクト</em>) リクエストオプション。</li>
</ol>
<h4>戻り値:</h4>
<ul>
	<li>(<em>要素</em>) オリジナルの要素。</li>
</ul>
<h4>例:</h4>
<pre class="javascript">myForm.<span class="me1">set</span><span class="br0">(</span><span class="st0">'send'</span>, <span class="br0">{</span>url: <span class="st0">'contact.php'</span>,メソッド: <span class="st0">'get'</span><span class="br0">}</span><span class="br0">)</span>;
myForm.<span class="me1">send</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//フォーム送信。</span></pre>
<h3>Get</h3>
以前にセットされたRequestインスタンスを取得します(もしくは、デフォルトオプションの新しいインスタンスを返します)。
<h4>構文:</h4>
<pre class="javascript">el.<span class="me1">get</span><span class="br0">(</span><span class="st0">'send'</span><span class="br0">[</span>, options<span class="br0">]</span><span class="br0">)</span>;</pre>
<h4>引数:</h4>
<ol>
	<li>options - (<em>オブジェクト</em>, オプション) リクエストオプション。渡されていれば、Requestクラスの新しいインスタンスが生成されます。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) Requestインスタンス。</li>
</ul>
<h4>例:</h4>
<pre class="javascript">el.<span class="me1">get</span><span class="br0">(</span><span class="st0">'send'</span>, <span class="br0">{</span>method: <span class="st0">'get'</span><span class="br0">}</span><span class="br0">)</span>;
el.<span class="me1">send</span><span class="br0">(</span><span class="br0">)</span>;
el.<span class="me1">get</span><span class="br0">(</span><span class="st0">'send'</span><span class="br0">)</span>; <span class="co1">//Requestインスタンスを返します。</span></pre>
<h1 id="Element"><a href="#Element">Native: Element</a></h1>
<p class="description"><a href="/docs/Element/Element/#dollar">$</a>関数で取得したDOM要素がこれらのメソッドをすべて使えるようにするカスタムネイティブです。<a href="/docs/Element/Element/#dollar"></a></p>

<h2 id="Element:send"><a href="#Element:send">Elementメソッド: send</a></h2>
<p class="description">フォーム、またはinput要素のコンテナをHTMLリクエストで送信します。</p>

<h3>構文:</h3>
<pre class="javascript">myElement.<span class="me1">send</span><span class="br0">(</span>url<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>url - (<em>文字列</em>, オプション) フォームや"inputのコンテナ"を送信したいURL。URLが省略された場合、formのaction属性が使われます。"inputのコンテナ"の場合は省略できません。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(element) この要素。</li>
</ul>
<h3>例:</h3>
<h5>HTML</h5>
<pre class="javascript">&lt;form id=<span class="st0">"myForm"</span> action=<span class="st0">"submit.php"</span>&gt;

    &lt;p&gt;
        &lt;input <span class="kw3">name</span>=<span class="st0">"email"</span> value=<span class="st0">"bob@bob.com"</span>&gt;
        &lt;input <span class="kw3">name</span>=<span class="st0">"zipCode"</span> value=<span class="st0">"90210"</span>&gt;

    &lt;/p&gt;
&lt;/form&gt;</pre>
<h5>JavaScript</h5>
<pre class="javascript">$<span class="br0">(</span><span class="st0">'myForm'</span><span class="br0">)</span>.<span class="me1">send</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>注意点:</h3>
<ul>
	<li>URLはフォームのaction属性から取られます。</li>
</ul>
</div>
<div id="menu" class="span-2 last">
<h4 class="menu-item"><a href="#Request">Request</a></h4>
<div class="menu-item"><a href="#Request:setHeader">setHeader</a></div>
<div class="menu-item"><a href="#Request:getHeader">getHeader</a></div>
<div class="menu-item"><a href="#Request:send">send</a></div>
<div class="menu-item"><a href="#Request:cancel">cancel</a></div>
<h4 class="menu-item"><a href="#Element-Properties">Element.Properties</a></h4>
<div class="menu-item"><a href="#Element-Properties:send">send</a></div>
<h4 class="menu-item"><a href="#Element">Element</a></h4>
<div class="menu-item"><a href="#Element:send">send</a></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>250</wp:post_id>
		<wp:post_date><![CDATA[2008-11-02 21:40:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-11-02 12:40:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[request]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mootools"><![CDATA[MooTools]]></category>
		<category domain="category" nicename="request"><![CDATA[Request]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Request.HTML</title>
		<link>https://takahashifumiki.com/web/mootools/254/</link>
		<pubDate>Sun, 02 Nov 2008 13:00:10 +0000</pubDate>
		<dc:creator><![CDATA[takahashi_fumiki]]></dc:creator>
		<guid isPermaLink="false">https://takahashifumiki.com/?p=254</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="main" class="l-border r-border span-15">
<h1 id="Request-HTML"><a href="#Request-HTML">Class: Request.HTML</a></h1>
<p class="description">HTMLを受け取るよう指定されたRequestです。</p>

<h3>継承:</h3>
<a href="https://takahashifumiki.com/web/mootools/250">Request</a>
<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> myHTMLRequest = <span class="kw2">new</span> Request.<span class="me1">HTML</span><span class="br0">(</span><span class="br0">[</span>options<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>options - (<em>オブジェクト</em>, オプション) 以下のオプションを参考のこと。<a href="/docs/Request/Request">Request</a>からすべてのオプションを継承します。</li>
</ol>
<h3>オプション:</h3>
<ul>
	<li>update - (<em>要素</em>: 初期値=null) リクエスト完了時にリクエストのレスポンステクストを挿入したい要素。</li>
</ul>
<h3>イベント:</h3>
<h4>success</h4>
<ul>
	<li>(<em>関数</em>) HTMLリクエストが完了したときに実行する関数。これはRequestのsuccessイベントを上書きします。</li>
</ul>
<h5>表記:</h5>
<pre class="javascript">onSuccess<span class="br0">(</span>responseTree, responseElements, responseHTML, responseJavaScript<span class="br0">)</span></pre>
<h5>引数:</h5>
<ol>
	<li>responseTree       - (<em>要素</em>) リモートレスポンスのノードリスト。</li>
	<li>responseElements   - (<em>配列</em>)   リモートレスポンスの全要素を含む配列。</li>
	<li>responseHTML       - (<em>文字列</em>)  リモートレスポンスの中身。</li>
	<li>responseJavaScript - (<em>文字列</em>)  リモートレスポンスの中のJavaScript部分。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) 新しいRequest.HTMLインスタンス。</li>
</ul>
<h3>例:</h3>
<h4>単純なGETリクエスト:</h4>
<pre class="javascript"><span class="kw2">var</span> myHTMLRequest = <span class="kw2">new</span> Request.<span class="me1">HTML</span><span class="br0">(</span><span class="br0">)</span>.<span class="me1">get</span><span class="br0">(</span><span class="st0">'myPage.html'</span><span class="br0">)</span>;</pre>
<h4>データを文字列にしたPOSTリクエスト:</h4>
<pre class="javascript"><span class="kw2">var</span> myHTMLRequest = <span class="kw2">new</span> Request.<span class="me1">HTML</span><span class="br0">(</span><span class="br0">{</span>url:<span class="st0">'myPage.html'</span><span class="br0">}</span><span class="br0">)</span>.<span class="me1">post</span><span class="br0">(</span><span class="st0">"user_id=25&amp;save=true"</span><span class="br0">)</span>;</pre>
<h4>データをオブジェクトにしてGETで渡す:</h4>
<pre class="javascript"><span class="co1">//"load/?user_id=25"を読み込み。</span>
<span class="kw2">var</span> myHTMLRequest = <span class="kw2">new</span> Request.<span class="me1">HTML</span><span class="br0">(</span><span class="br0">{</span>url:<span class="st0">'load/'</span><span class="br0">}</span><span class="br0">)</span>.<span class="me1">get</span><span class="br0">(</span><span class="br0">{</span><span class="st0">'user_id'</span>: <span class="nu0">25</span><span class="br0">}</span><span class="br0">)</span>;</pre>
<h4>要素をデータにしてPOSTで渡す:</h4>
<h5>HTML</h5>
<pre class="javascript">&lt;form action=<span class="st0">"save/"</span> method=<span class="st0">"post"</span> id=<span class="st0">"user-form"</span>&gt;

    &lt;p&gt;
        Search: &lt;input type=<span class="st0">"text"</span> <span class="kw3">name</span>=<span class="st0">"search"</span> /&gt;
        Search <span class="kw1">in</span> description: &lt;input type=<span class="st0">"checkbox"</span> <span class="kw3">name</span>=<span class="st0">"search_description"</span> value=<span class="st0">"yes"</span> /&gt;

        &lt;input type=<span class="st0">"submit"</span> /&gt;
    &lt;/p&gt;
&lt;/form&gt;</pre>
<h5>JavaScript</h5>
<pre class="javascript"><span class="co1">//submitイベントか、フォームハンドラで実行。</span>

<span class="kw2">var</span> myHTMLRequest = <span class="kw2">new</span> Request.<span class="me1">HTML</span><span class="br0">(</span><span class="br0">{</span>url:<span class="st0">'save/'</span><span class="br0">}</span><span class="br0">)</span>.<span class="me1">post</span><span class="br0">(</span>$<span class="br0">(</span><span class="st0">'user-form'</span><span class="br0">)</span><span class="br0">)</span>;</pre>
<h3>参考情報:</h3>
<a href="/docs/Request/Request">Request</a>
<h1 id="Element-Properties"><a href="#Element-Properties">Hash: Element.Properties</a></h1>
<p class="description">参考情報: <a href="https://takahashifumiki.com/web/mootools/213#Element-Properties">Element.Properties</a></p>

<h2 id="Element-Properties:load"><a href="#Element-Properties:load">Elementプロパティ: load</a></h2>
<h3 class="description">Set</h3>
要素にデフォルトのRequest.HTMLインスタンスを設定します。
<h4>構文:</h4>
<pre class="javascript">el.<span class="me1">set</span><span class="br0">(</span><span class="st0">'load'</span><span class="br0">[</span>, options<span class="br0">]</span><span class="br0">)</span>;</pre>
<h4>引数:</h4>
<ol>
	<li>options - (<em>オブジェクト</em>) リクエストオプション。</li>
</ol>
<h4>戻り値:</h4>
<ul>
	<li>(<em>要素</em>) ターゲット要素。</li>
</ul>
<h4>例:</h4>
<pre class="javascript">el.<span class="me1">set</span><span class="br0">(</span><span class="st0">'load'</span>, <span class="br0">{</span>evalScripts: <span class="kw2">true</span><span class="br0">}</span><span class="br0">)</span>;
el.<span class="me1">load</span><span class="br0">(</span><span class="st0">'some/request/uri'</span><span class="br0">)</span>;</pre>
<h3>Get</h3>
以前にセットされたRequest.HTMLインスタンスを取得するか、デフォルトオプションから新しいインスタンスを生成します。
<h4>構文:</h4>
<pre class="javascript">el.<span class="me1">get</span><span class="br0">(</span><span class="st0">'load'</span>, options<span class="br0">)</span>;</pre>
<h4>引数:</h4>
<ol>
	<li>options - (<em>オブジェクト</em>, オプション) Request.HTMLオプションです。これが渡された場合、すでにインスタンスがあったかどうかに関わらず、新しいインスタンスが生成されます。</li>
</ol>
<h4>戻り値:</h4>
<ul>
	<li>(<em>オブジェクト</em>) Requestインスタンス。</li>
</ul>
<h4>例:</h4>
<pre class="javascript">el.<span class="me1">set</span><span class="br0">(</span><span class="st0">'load'</span>, <span class="br0">{</span>method: <span class="st0">'get'</span><span class="br0">}</span><span class="br0">)</span>;
el.<span class="me1">load</span><span class="br0">(</span><span class="st0">'test.html'</span><span class="br0">)</span>;

<span class="co1">//getはRequest.HTMLを返し、クラスのメソッドを使えるようにします。</span>
el.<span class="me1">get</span><span class="br0">(</span><span class="st0">'load'</span><span class="br0">)</span>.<span class="me1">post</span><span class="br0">(</span><span class="st0">'http://localhost/script'</span><span class="br0">)</span>;</pre>
<h1 id="Element"><a href="#Element">Native: Element</a></h1>
<p class="description"><a href="/docs/Element/Element/#dollar">$</a>関数によって取得したDOM要素がこれらのメソッドをすべて使えるようにします。</p>

<h2 id="Element:load"><a href="#Element:load">Elementメソッド: load</a></h2>
<p class="description">Request.HTMLのGETメソッドを使って、コンテンツを更新します。</p>

<h3>構文:</h3>
<pre class="javascript">myElement.<span class="me1">load</span><span class="br0">(</span>url<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>url - (<em>文字列</em>) サーバサイドのファイルを指定するURLです。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>要素</em>) ターゲットとなる要素。</li>
</ul>
<h3>例:</h3>
<h5>HTML</h5>
<pre class="javascript">&lt;div id=<span class="st0">"content"</span>&gt;Loading content...&lt;/div&gt;</pre>
<h5>JavaScript</h5>
<pre class="javascript">$<span class="br0">(</span><span class="st0">'content'</span><span class="br0">)</span>.<span class="me1">load</span><span class="br0">(</span><span class="st0">'page_1.html'</span><span class="br0">)</span>;</pre>
<h3>参考情報:</h3>
<ul>
	<li><a href="/docs/Element/Element/#dollar">$</a>, <a href="https://takahashifumiki.com/web/mootools/250">Request</a></li>
</ul>
</div>
<div id="menu" class="span-2 last">
<h4 class="menu-item"><a href="#Request-HTML">Request.HTML</a></h4>
<h4 class="menu-item"><a href="#Element-Properties">Element.Properties</a></h4>
<div class="menu-item"><a href="#Element-Properties:load">load</a></div>
<h4 class="menu-item"><a href="#Element">Element</a></h4>
<div class="menu-item"><a href="#Element:load">load</a></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>254</wp:post_id>
		<wp:post_date><![CDATA[2008-11-02 22:00:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-11-02 13:00:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[requesthtml]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mootools"><![CDATA[MooTools]]></category>
		<category domain="category" nicename="request"><![CDATA[Request]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Request.JSON</title>
		<link>https://takahashifumiki.com/web/mootools/256/</link>
		<pubDate>Sun, 02 Nov 2008 14:20:51 +0000</pubDate>
		<dc:creator><![CDATA[takahashi_fumiki]]></dc:creator>
		<guid isPermaLink="false">https://takahashifumiki.com/?p=256</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="main" class="l-border r-border span-15">
<h1 id="Request-JSON"><a href="#Request-JSON">Class: Request.JSON</a></h1>
<p class="description">JSON形式でJavaScriptオブジェクトを送受信するためのリクエストラッパーです。</p>

<h3>継承:</h3>
<a href="https://takahashifumiki.com/web/mootools/250">Request</a>
<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> myJSONRemote = <span class="kw2">new</span> Request.<span class="me1">JSON</span><span class="br0">(</span><span class="br0">[</span>options<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>options - (<em>オブジェクト</em>, オプション) 以下を参照のこと。</li>
</ol>
<h3>オプション:</h3>
<ul>
	<li>secure  - (<em>真偽値</em>: 初期値=true) trueにセットされた場合、レスポンスJSONの構文をチェックします(<a href="https://takahashifumiki.com/web/mootools/234#JSON:decode">JSON.decode</a>を参照のこと)。</li>
</ul>
<h3>イベント:</h3>
<h4>success</h4>
リクエストが完了すると発生します。これはRequestのsuccesssイベントを上書きします。
<h5>表記:</h5>
<pre class="javascript">onSuccess<span class="br0">(</span>responseJSON, responseText<span class="br0">)</span></pre>
<h5>引数:</h5>
<ol>
	<li>responseJSON - (<em>オブジェクト</em>) リモートリクエストからのJSONレスポンスオブジェクト。</li>
	<li>responseText - (<em>文字列</em>) 文字列形式のJSONレスポンス。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) 新しいRequest.JSONインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="co1">//このコードはGETリクエストでデータオブジェクトを送信し、受け取ったデータをアラートします。</span>
<span class="kw2">var</span> jsonRequest = <span class="kw2">new</span> Request.<span class="me1">JSON</span><span class="br0">(</span><span class="br0">{</span>url: <span class="st0">"http://site.com/tellMeAge.php"</span>, onComplete: <span class="kw2">function</span><span class="br0">(</span>person<span class="br0">)</span><span class="br0">{</span>

    <span class="kw3">alert</span><span class="br0">(</span>person.<span class="me1">age</span><span class="br0">)</span>;    <span class="co1">//Alerts "25 years".</span>
    <span class="kw3">alert</span><span class="br0">(</span>person.<span class="me1">height</span><span class="br0">)</span>; <span class="co1">//Alerts "170 cm".</span>

    <span class="kw3">alert</span><span class="br0">(</span>person.<span class="me1">weight</span><span class="br0">)</span>; <span class="co1">//Alerts "120 kg".</span>
<span class="br0">}</span><span class="br0">}</span><span class="br0">)</span>.<span class="me1">get</span><span class="br0">(</span><span class="br0">{</span><span class="st0">'firstName'</span>: <span class="st0">'John'</span>, <span class="st0">'lastName'</span>: <span class="st0">'Doe'</span><span class="br0">}</span><span class="br0">)</span>;</pre>
</div>
<div id="menu" class="span-2 last">
<h4 class="menu-item"><a href="#Request-JSON">Request.JSON</a></h4>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>256</wp:post_id>
		<wp:post_date><![CDATA[2008-11-02 23:20:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-11-02 14:20:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[requestjson]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mootools"><![CDATA[MooTools]]></category>
		<category domain="category" nicename="request"><![CDATA[Request]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Fx.Slide</title>
		<link>https://takahashifumiki.com/web/mootools/261/</link>
		<pubDate>Mon, 03 Nov 2008 07:13:58 +0000</pubDate>
		<dc:creator><![CDATA[takahashi_fumiki]]></dc:creator>
		<guid isPermaLink="false">https://takahashifumiki.com/?p=261</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="main" class="l-border r-border span-15">
<h1 id="Fx-Slide"><a href="#Fx-Slide">Class: Fx.Slide</a></h1>
<p class="description">スライドエフェクトは要素を垂直または水平にスライドさせます。コンテンツは内側に折りたたまれます。</p>

<h3>注意点:</h3>
<ul>
	<li>Fx.Slideを使うには、ページを<a href="http://hsivonen.iki.fi/doctype/">標準準拠モード</a>で作成する必要があります。</li>
</ul>
<h3>継承:</h3>
<ul>
	<li><a href="/docs/Fx/Fx">Fx</a></li>
</ul>
<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> myFx = <span class="kw2">new</span> Fx.<span class="me1">Slide</span><span class="br0">(</span>element<span class="br0">[</span>, options<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>elements - (<em>要素</em>) スライドする要素。</li>
	<li>options  - (<em>オブジェクト</em>, オプション) すべての<a href="/docs/Fx/Fx">Fx</a>オプションと、モード・ラッパーの指定。</li>
</ol>
<h4>オプション</h4>
<ol>
	<li>mode    - (<em>文字列</em>: 初期値='vertical') スライドのタイプを指定するための文字列。'vertical'か'horizontal'。</li>
	<li>wrapper - (<em>要素</em>: 初期値=this.element) 他の要素をラッパーとして指定できます。</li>
</ol>
<h4>プロパティ:</h4>
<ol>
	<li>open    - (<em>真偽値</em>) いつスライド要素が表示されるのかを指示します。</li>
</ol>
<h3>例:</h3>
<pre class="javascript"><span class="co1">//要素を非表示にし、それからtoggleで元に戻して、最後に完了したら</span>
<span class="co1">//アラートを出します:</span>
<span class="kw2">var</span> mySlide = <span class="kw2">new</span> Fx.<span class="me1">Slide</span><span class="br0">(</span><span class="st0">'container'</span><span class="br0">)</span>.<span class="me1">hide</span><span class="br0">(</span><span class="br0">)</span>.<span class="me1">toggle</span><span class="br0">(</span><span class="br0">)</span>.<span class="me1">chain</span><span class="br0">(</span><span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>

    <span class="kw3">alert</span><span class="br0">(</span>mySlide.<span class="kw3">open</span><span class="br0">)</span>; <span class="co1">//アラート true</span>
<span class="br0">}</span><span class="br0">)</span>;</pre>
<h3>注意点:</h3>
<ul>
	<li>スライドエフェクトを作ると、要素(初期値は"div")が追加されて、与えられた要素を包みます。このラッパーには要素からのマージンが適用されます。</li>
</ul>
<h2 id="Fx-Slide:slideIn"><a href="#Fx-Slide:slideIn">Fx.Slideメソッド: slideIn</a></h2>
<p class="description">要素を水平または垂直にスライドさせて表示します。</p>

<h3>構文:</h3>
<pre class="javascript">myFx.<span class="me1">slideIn</span><span class="br0">(</span><span class="br0">[</span>mode<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>mode - (<em>文字列</em>, オプション) Fx.Slideオプションの値を'horizontal'か'vertical'に上書きします。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) このFX.Slideインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myFx = <span class="kw2">new</span> Fx.<span class="me1">Slide</span><span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">slideOut</span><span class="br0">(</span><span class="br0">)</span>.<span class="me1">chain</span><span class="br0">(</span><span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>

    <span class="kw1">this</span>.<span class="me1">show</span><span class="br0">(</span><span class="br0">)</span>.<span class="me1">slideIn</span><span class="br0">(</span><span class="st0">'horizontal'</span><span class="br0">)</span>;
<span class="br0">}</span><span class="br0">)</span>;</pre>
<h2 id="Fx-Slide:slideOut"><a href="#Fx-Slide:slideOut">Fx.Slideメソッド: slideOut</a></h2>
<p class="description">要素を水平または垂直にスライドさせて非表示にします。</p>

<h3>構文:</h3>
<pre class="javascript">myFx.<span class="me1">slideOut</span><span class="br0">(</span><span class="br0">[</span>mode<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>mode - (<em>文字列</em>, オプション) Fx.Slideオプションの値を'horizontal'か'vertical'に上書きします。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) このFX.Slideインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myFx = <span class="kw2">new</span> Fx.<span class="me1">Slide</span><span class="br0">(</span><span class="st0">'myElement'</span>, <span class="br0">{</span>

    mode: <span class="st0">'horizontal'</span>,
    <span class="co1">//継承されているため、すべての</span><span class="co1">[Fx][]</span><span class="co1">オプションが使えます。</span>
    onComplete: <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
        <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'Poof!'</span><span class="br0">)</span>;
    <span class="br0">}</span>

<span class="co1">//mode引数はセットされたオプションを上書きできます。</span>
<span class="br0">}</span><span class="br0">)</span>.<span class="me1">slideOut</span><span class="br0">(</span><span class="st0">'vertical'</span><span class="br0">)</span>;</pre>
<h2 id="Fx-Slide:toggle"><a href="#Fx-Slide:toggle">Fx.Slideメソッド: toggle</a></h2>
<p class="description">要素の現在の状態によって、スライドインさせたりスライドアウトさせたりします。</p>

<h3>構文:</h3>
<pre class="javascript">myFx.<span class="me1">toggle</span><span class="br0">(</span><span class="br0">[</span>mode<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>mode - (<em>文字列</em>, オプション) Fx.Slideオプションの値を'horizontal'か'vertical'に上書きします。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) このFX.Slideインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myFx = <span class="kw2">new</span> Fx.<span class="me1">Slide</span><span class="br0">(</span><span class="st0">'myElement'</span>, <span class="br0">{</span>
    duration: <span class="nu0">1000</span>,
    transition: Fx.<span class="me1">Transitions</span>.<span class="me1">Pow</span>.<span class="me1">easeOut</span>

<span class="br0">}</span><span class="br0">)</span>;

<span class="co1">//スライドインとスライドアウトを交互に二回トグルします:</span>
myFx.<span class="me1">toggle</span><span class="br0">(</span><span class="br0">)</span>.<span class="me1">chain</span><span class="br0">(</span>myFx.<span class="me1">toggle</span><span class="br0">)</span>;</pre>
<h2 id="Fx-Slide:hide"><a href="#Fx-Slide:hide">Fx.Slideメソッド: hide</a></h2>
<p class="description">アニメーションなしで要素を非表示にします。</p>

<h3>構文:</h3>
<pre class="javascript">myFx.<span class="me1">hide</span><span class="br0">(</span><span class="br0">[</span>mode<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>mode - (<em>文字列</em>, オプション) Fx.Slideオプションの値を'horizontal'か'vertical'に上書きします。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) このFX.Slideインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myFx = <span class="kw2">new</span> Fx.<span class="me1">Slide</span><span class="br0">(</span><span class="st0">'myElement'</span>, <span class="br0">{</span>
    duration: <span class="st0">'long'</span>,
    transition: Fx.<span class="me1">Transitions</span>.<span class="me1">Bounce</span>.<span class="me1">easeOut</span>

<span class="br0">}</span><span class="br0">)</span>;

<span class="co1">//非表示にしてから、"myElement"をスライドインさせます:</span>
myFx.<span class="me1">hide</span><span class="br0">(</span><span class="br0">)</span>.<span class="me1">slideIn</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h2 id="Fx-Slide:show"><a href="#Fx-Slide:show">Fx.Slideメソッド: show</a></h2>
<p class="description">アニメーションなしで要素を表示します。</p>

<h3>構文:</h3>
<pre class="javascript">myFx.<span class="me1">show</span><span class="br0">(</span><span class="br0">[</span>mode<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>mode - (<em>文字列</em>, オプション) Fx.Slideオプションの値を'horizontal'か'vertical'に上書きします。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) このFX.Slideインスタンス。</li>
</ul>
<h3>Examples:</h3>
<pre class="javascript"><span class="kw2">var</span> myFx = <span class="kw2">new</span> Fx.<span class="me1">Slide</span><span class="br0">(</span><span class="st0">'myElement'</span>, <span class="br0">{</span>
    duration: <span class="nu0">1000</span>,
    transition: Fx.<span class="me1">Transitions</span>.<span class="me1">Bounce</span>.<span class="me1">easeOut</span>

<span class="br0">}</span><span class="br0">)</span>;

<span class="co1">//"myElement"をスライドアウト</span>
myFx.<span class="me1">slideOut</span><span class="br0">(</span><span class="br0">)</span>.<span class="me1">chain</span><span class="br0">(</span><span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>

    <span class="co1">//1秒待ってから、アニメーションなしで要素を表示します。</span>
    <span class="kw1">this</span>.<span class="me1">show</span>.<span class="me1">delay</span><span class="br0">(</span><span class="nu0">1000</span>, <span class="kw1">this</span><span class="br0">)</span>;
<span class="br0">}</span><span class="br0">)</span>;</pre>
<h1 id="Element-Properties"><a href="#Element-Properties">Hash: Element.Properties</a></h1>
<p class="description">参考情報:<a href="https://takahashifumiki.com/web/mootools/213#Element-Properties">Element.Properties</a></p>

<h2 id="Element-Properties:slide"><a href="#Element-Properties:slide">Elementプロパティ: slide</a></h2>
<p class="description">要素にデフォルトのFx.Slideインスタンスを設定します。
以前に設定されたFx.Slideインスタンスを取得したり、デフォルトオプションから新しいインスタンスを生成したりします。
<h3>構文:</h3>
<pre class="javascript">el.<span class="me1">set</span><span class="br0">(</span><span class="st0">'slide'</span><span class="br0">[</span>, options<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>options - (<em>オブジェクト</em>) Fx.Morphオプション。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>要素</em>) この要素。</li>
</ul>
<h3>Example:</h3>
<pre class="javascript">el.<span class="me1">set</span><span class="br0">(</span><span class="st0">'slide'</span>, <span class="br0">{</span>duration: <span class="st0">'long'</span>, transition: <span class="st0">'bounce:out'</span><span class="br0">}</span><span class="br0">)</span>;
el.<span class="me1">slide</span><span class="br0">(</span><span class="st0">'in'</span><span class="br0">)</span>;</pre>
<h3>構文:</h3>
<pre class="javascript">el.<span class="me1">get</span><span class="br0">(</span><span class="st0">'slide'</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>options - (<em>オブジェクト</em>, オプション) Fx.Slideオプション。これが渡されると、新しいインスタンスが生成されます。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) Fx.Slideインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript">el.<span class="me1">set</span><span class="br0">(</span><span class="st0">'slide'</span>, <span class="br0">{</span>duration: <span class="st0">'long'</span>, transition: <span class="st0">'bounce:out'</span><span class="br0">}</span><span class="br0">)</span>;
el.<span class="me1">slide</span><span class="br0">(</span><span class="st0">'in'</span><span class="br0">)</span>;

el.<span class="me1">get</span><span class="br0">(</span><span class="st0">'slide'</span><span class="br0">)</span>; <span class="co1">//Fx.Slideインスタンス生成</span></pre>
<h1 id="Element"><a href="#Element">Native: Element</a></h1>
<p class="description"><a href="/docs/Element/Element#dollar">$</a>関数で取得したDOM要素がこれらすべてのメソッドを使えるようにするためのカスタムネイティブです。</p>

<h2 id="Element:slide"><a href="#Element:slide">Elementメソッド: slide</a></h2>
<p class="description">この要素をスライドさせて表示します。</p>

<h3>構文:</h3>
<pre class="javascript">myElement.<span class="me1">slide</span><span class="br0">(</span>how<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>how     - (<em>文字列</em>, オプション) 'in'、'out'、'toggle'、'show'、'hide'のいずれか。初期値は'toggle'。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>要素</em>) this Element.</li>
</ul>
<h3>例:</h3>
<pre class="javascript">$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">slide</span><span class="br0">(</span><span class="st0">'hide'</span><span class="br0">)</span>.<span class="me1">slide</span><span class="br0">(</span><span class="st0">'in'</span><span class="br0">)</span>;</pre>
</div>
<div id="menu" class="span-2 last">
<h4 class="menu-item"><a href="#Fx-Slide">Fx.Slide</a></h4>
<div class="menu-item"><a href="#Fx-Slide:slideIn">slideIn</a></div>
<div class="menu-item"><a href="#Fx-Slide:slideOut">slideOut</a></div>
<div class="menu-item"><a href="#Fx-Slide:toggle">toggle</a></div>
<div class="menu-item"><a href="#Fx-Slide:hide">hide</a></div>
<div class="menu-item"><a href="#Fx-Slide:show">show</a></div>
<h4 class="menu-item"><a href="#Element-Properties">Element.Properties</a></h4>
<div class="menu-item"><a href="#Element-Properties:slide">slide</a></div>
<h4 class="menu-item"><a href="#Element">Element</a></h4>
<div class="menu-item"><a href="#Element:slide">slide</a></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>261</wp:post_id>
		<wp:post_date><![CDATA[2008-11-03 16:13:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-11-03 07:13:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[fxslide]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mootools"><![CDATA[MooTools]]></category>
		<category domain="category" nicename="plugins"><![CDATA[Plugins]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Fx.Scroll</title>
		<link>https://takahashifumiki.com/web/mootools/263/</link>
		<pubDate>Mon, 03 Nov 2008 07:34:01 +0000</pubDate>
		<dc:creator><![CDATA[takahashi_fumiki]]></dc:creator>
		<guid isPermaLink="false">https://takahashifumiki.com/?p=263</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="main" class="l-border r-border span-15">
<h1 id="Fx-Scroll"><a href="#Fx-Scroll">Class: Fx.Scroll</a></h1>
<p class="description">オーバーフローをもったすべての要素をスクロールさせます。window要素も含みます。</p>

<h3>注意点:</h3>
<ul>
	<li>Fx.Scrollを使うにはページを<a href="http://hsivonen.iki.fi/doctype/">標準準拠モード</a>で作成する必要があります。</li>
</ul>
<h3>継承:</h3>
<ul>
	<li><a href="/docs/Fx/Fx">Fx</a></li>
</ul>
<h2 id="Fx-Scroll:constructor"><a href="#Fx-Scroll:constructor">Fx.Scrollメソッド: constructor</a></h2>
<h3 class="description">構文:</h3>
<pre class="javascript"><span class="kw2">var</span> myFx = <span class="kw2">new</span> Fx.<span class="kw3">Scroll</span><span class="br0">(</span>element<span class="br0">[</span>, options<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>element - (<em>いろいろ</em>) スクロールさせたい要素のidか、要素の参照。</li>
	<li>options - (<em>オブジェクト</em>, オプション) すべての<a href="/docs/Fx/Fx">Fx</a>オプションに加え、offset、overflown、wheelStopsを指定できます。</li>
</ol>
オプション:
<ol>
	<li>offset     - (<em>オブジェクト</em>: 初期値={'x': 0, 'y': 0}) 要素内でスクロールさせる距離を表すx、yプロパティを持ったオブジェクト。</li>
	<li>overflown  - (<em>配列</em>: 初期値=[]) 入れ子になったスクロールコンテナの配列。詳しくは<a href="https://takahashifumiki.com/web/mootools/228#Element:getPosition">Element:getPosition</a>を参照のこと。</li>
	<li>wheelStops - (<em>真偽値</em>: 初期値=true) falseなら、アニメーション発生以降にマウスホイールをしても止まりません。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) 新しいFx.Scrollインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myFx = <span class="kw2">new</span> Fx.<span class="kw3">Scroll</span><span class="br0">(</span><span class="st0">'myElement'</span>, <span class="br0">{</span>

    offset: <span class="br0">{</span>
        <span class="st0">'x'</span>: <span class="nu0">0</span>,
        <span class="st0">'y'</span>: <span class="nu0">100</span>
    <span class="br0">}</span>
<span class="br0">}</span><span class="br0">)</span>.<span class="me1">toTop</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>注意点:</h3>
<ul>
	<li>Fx.Scrollアニメーションは、wheelStopsオプションをfalseに設定しない限り、マウスホイールによって停止されます。これはユーザーがWeb閲覧を自分で操作できるようにするためです。</li>
	<li>Fx.Scrollはスクロールバーのない要素には役立ちません。</li>
</ul>
<h2 id="Fx-Scroll:set"><a href="#Fx-Scroll:set">Fx.Scrollメソッド: set</a></h2>
<p class="description">指定した要素を任意のx-y座標位置へ即座にスクロールさせます。</p>

<h3>構文:</h3>
<pre class="javascript">myFx.<span class="me1">set</span><span class="br0">(</span>x, y<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>x - (<em>整数</em>) 要素をスクロールさせたいx座標値。</li>
	<li>y - (<em>整数</em>) 要素をスクロールさせたいy座標値。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) このFx.Scrollインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myElement = $<span class="br0">(</span>document.<span class="me1">body</span><span class="br0">)</span>;
<span class="kw2">var</span> myFx = <span class="kw2">new</span> Fx.<span class="kw3">Scroll</span><span class="br0">(</span>myElement<span class="br0">)</span>.<span class="me1">set</span><span class="br0">(</span><span class="nu0">0</span>, <span class="nu0">0.5</span> * document.<span class="me1">body</span>.<span class="me1">offsetHeight</span><span class="br0">)</span>;</pre>
<h2 id="Fx-Scroll:start"><a href="#Fx-Scroll:start">Fx.Scrollメソッド: start</a></h2>
<p class="description">指定した要素を任意のx-y座標位置へスクロールさせます。</p>

<h3>構文:</h3>
<pre class="javascript">myFx.<span class="me1">start</span><span class="br0">(</span>x, y<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>x - (<em>整数</em>) 要素をスクロールさせたいx座標値。</li>
	<li>y - (<em>整数</em>) 要素をスクロールさせたいy座標値。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) このFx.Scrollインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myElement = $<span class="br0">(</span>document.<span class="me1">body</span><span class="br0">)</span>;

<span class="kw2">var</span> myFx = <span class="kw2">new</span> Fx.<span class="kw3">Scroll</span><span class="br0">(</span>myElement<span class="br0">)</span>.<span class="me1">start</span><span class="br0">(</span><span class="nu0">0</span>, <span class="nu0">0.5</span> * document.<span class="me1">body</span>.<span class="me1">offsetHeight</span><span class="br0">)</span>;</pre>
<h3>注意点:</h3>
<ul>
	<li>負の座標へスクロールさせることはできません。</li>
</ul>
<h2 id="Fx-Scroll:toTop"><a href="#Fx-Scroll:toTop">Fx.Scrollメソッド: toTop</a></h2>
<p class="description">任意の要素を一番上までスクロールさせます。</p>

<h3>構文:</h3>
<pre class="javascript">myFx.<span class="me1">toTop</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) このFx.Scrollインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="co1">//"myElement"を200px下にスクロールさせ、1.5秒待ってから</span>
<span class="co1">//一番上に戻します。</span>
<span class="kw2">var</span> myFx = <span class="kw2">new</span> Fx.<span class="kw3">Scroll</span><span class="br0">(</span><span class="st0">'myElement'</span>, <span class="br0">{</span>

    onComplete: <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
        <span class="kw1">this</span>.<span class="me1">toTop</span>.<span class="me1">delay</span><span class="br0">(</span><span class="nu0">1500</span>, <span class="kw1">this</span><span class="br0">)</span>;
    <span class="br0">}</span>

<span class="br0">}</span><span class="br0">)</span>.<span class="me1">scrollTo</span><span class="br0">(</span><span class="nu0">0</span>, <span class="nu0">200</span><span class="br0">)</span>.<span class="me1">chain</span><span class="br0">(</span><span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>

    <span class="kw1">this</span>.<span class="me1">scrollTo</span><span class="br0">(</span><span class="nu0">200</span>, <span class="nu0">0</span><span class="br0">)</span>;
<span class="br0">}</span><span class="br0">)</span>;</pre>
<h2 id="Fx-Scroll:toBottom"><a href="#Fx-Scroll:toBottom">Fx.Scrollメソッド: toBottom</a></h2>
<p class="description">指定した要素を一番したまでスクロールさせます。</p>

<h3>構文:</h3>
<pre class="javascript">myFx.<span class="me1">toBottom</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) このFx.Scrollインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="co1">//windowを一番下までスクロールさせ、1秒待ってから一番上に戻します。</span>
<span class="kw2">var</span> myFx = <span class="kw2">new</span> Fx.<span class="kw3">Scroll</span><span class="br0">(</span>window<span class="br0">)</span>.<span class="me1">toBottom</span><span class="br0">(</span><span class="br0">)</span>.<span class="me1">chain</span><span class="br0">(</span><span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>

    <span class="kw1">this</span>.<span class="me1">toTop</span>.<span class="me1">delay</span><span class="br0">(</span><span class="nu0">1000</span>, <span class="kw1">this</span><span class="br0">)</span>;
<span class="br0">}</span><span class="br0">)</span>;</pre>
<h2 id="Fx-Scroll:toLeft"><a href="#Fx-Scroll:toLeft">Fx.Scrollメソッド: toLeft</a></h2>
<p class="description">指定した要素を一番左までスクロールさせます。</p>

<h3>構文:</h3>
<pre class="javascript">myFx.<span class="me1">toLeft</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) このFx.Scrollインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="co1">//"myElement"を右に200pxスクロールさせてから、左に戻します。</span>
<span class="kw2">var</span> myFx = <span class="kw2">new</span> Fx.<span class="kw3">Scroll</span><span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">scrollTo</span><span class="br0">(</span><span class="nu0">200</span>, <span class="nu0">0</span><span class="br0">)</span>.<span class="me1">chain</span><span class="br0">(</span><span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>

    <span class="kw1">this</span>.<span class="me1">toLeft</span><span class="br0">(</span><span class="br0">)</span>;
<span class="br0">}</span><span class="br0">)</span>;</pre>
<h2 id="Fx-Scroll:toRight"><a href="#Fx-Scroll:toRight">Fx.Scrollメソッド: toRight</a></h2>
<p class="description">指定した要素を一番右までスクロールさせます。</p>

<h3>構文:</h3>
<pre class="javascript">myFx.<span class="me1">toRight</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) This Fx.Scroll instance.</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="co1">//"myElement"を右端までスクロールさせ、それから一番下にスクロールします。</span>
<span class="kw2">var</span> myFx = <span class="kw2">new</span> Fx.<span class="kw3">Scroll</span><span class="br0">(</span><span class="st0">'myElement'</span>, <span class="br0">{</span>

    duration: <span class="nu0">5000</span>,
    wait: <span class="kw2">false</span>
<span class="br0">}</span><span class="br0">)</span>.<span class="me1">toRight</span><span class="br0">(</span><span class="br0">)</span>;

myFx.<span class="me1">toBottom</span>.<span class="me1">delay</span><span class="br0">(</span><span class="nu0">2000</span>, myFx<span class="br0">)</span>;</pre>
<h2 id="Fx-Scroll:toElement"><a href="#Fx-Scroll:toElement">Fx.Scrollメソッド: toElement</a></h2>
<p class="description">指定した要素を、渡された要素がある位置までスクロールさせます。</p>

<h3>構文:</h3>
<pre class="javascript">myFx.<span class="me1">toElement</span><span class="br0">(</span>el<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>el - (<em>いろいろ</em>) スクロールさせたい要素のIDか、要素への参照。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) このFx.Scrollインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="co1">//"myElement"をwindowの左上隅までスクロールさせます。</span>
<span class="kw2">var</span> myFx = <span class="kw2">new</span> Fx.<span class="kw3">Scroll</span><span class="br0">(</span>window<span class="br0">)</span>.<span class="me1">toElement</span><span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>;</pre>
<h3>注意点:</h3>
<ul>
	<li>位置指定の詳細については<a href="https://takahashifumiki.com/web/mootools/228#Element:getPosition">Element:getPosition</a>を参照のこと。</li>
</ul>
</div>
<div id="menu" class="span-2 last">
<h4 class="menu-item"><a href="#Fx-Scroll">Fx.Scroll</a></h4>
<div class="menu-item"><a href="#Fx-Scroll:constructor">constructor</a></div>
<div class="menu-item"><a href="#Fx-Scroll:set">set</a></div>
<div class="menu-item"><a href="#Fx-Scroll:start">start</a></div>
<div class="menu-item"><a href="#Fx-Scroll:toTop">toTop</a></div>
<div class="menu-item"><a href="#Fx-Scroll:toBottom">toBottom</a></div>
<div class="menu-item"><a href="#Fx-Scroll:toLeft">toLeft</a></div>
<div class="menu-item"><a href="#Fx-Scroll:toRight">toRight</a></div>
<div class="menu-item"><a href="#Fx-Scroll:toElement">toElement</a></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>263</wp:post_id>
		<wp:post_date><![CDATA[2008-11-03 16:34:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-11-03 07:34:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[fxscroll]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mootools"><![CDATA[MooTools]]></category>
		<category domain="category" nicename="plugins"><![CDATA[Plugins]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Fx.Elements</title>
		<link>https://takahashifumiki.com/web/mootools/265/</link>
		<pubDate>Mon, 03 Nov 2008 07:43:14 +0000</pubDate>
		<dc:creator><![CDATA[takahashi_fumiki]]></dc:creator>
		<guid isPermaLink="false">https://takahashifumiki.com/?p=265</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="main" class="l-border r-border span-15">
<h1 id="Fx-Elements"><a href="#Fx-Elements">Class: Fx.Elements</a></h1>
<p class="description">Fx.Elementsは複数の要素に対して複数のスタイルを一括でアニメーションさせることができます。</p>

<h3>継承:</h3>
<a href="https://takahashifumiki.com/web/mootools/240">Fx</a>
<h3>構文:</h3>
<pre class="javascript"><span class="kw2">new</span> Fx.<span class="me1">Elements</span><span class="br0">(</span>elements<span class="br0">[</span>, options<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>elements - (<em>配列</em>) エフェクトを適用したい要素のコレクション。</li>
	<li>options  - (<em>オブジェクト</em>, オプション) <a href="https://takahashifumiki.com/web/mootools/240">Fx</a>オプションに同じ。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) 新しいFx.Elementsインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myFx = <span class="kw2">new</span> Fx.<span class="me1">Elements</span><span class="br0">(</span>$$<span class="br0">(</span><span class="st0">'.myElementClass'</span><span class="br0">)</span>, <span class="br0">{</span>

    onComplete: <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
        <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'complete'</span><span class="br0">)</span>;
    <span class="br0">}</span>
<span class="br0">}</span><span class="br0">)</span>.<span class="me1">start</span><span class="br0">(</span><span class="br0">{</span>

    <span class="st0">'0'</span>: <span class="br0">{</span>
        <span class="st0">'height'</span>: <span class="br0">[</span><span class="nu0">200</span>, <span class="nu0">300</span><span class="br0">]</span>,
        <span class="st0">'opacity'</span>: <span class="br0">[</span><span class="nu0">0</span>,<span class="nu0">1</span><span class="br0">]</span>

    <span class="br0">}</span>,
    <span class="st0">'1'</span>: <span class="br0">{</span>
        <span class="st0">'width'</span>: <span class="br0">[</span><span class="nu0">200</span>, <span class="nu0">300</span><span class="br0">]</span>,
        <span class="st0">'opacity'</span>: <span class="br0">[</span><span class="nu0">1</span>,<span class="nu0">0</span><span class="br0">]</span>

    <span class="br0">}</span>
<span class="br0">}</span><span class="br0">)</span>;</pre>
<h3>注意点:</h3>
<ul>
	<li>色を扱う場合は16進数表記でなくてはなりません。</li>
</ul>
<h2 id="Fx-Elements:set"><a href="#Fx-Elements:set">Fx.Elementsメソッド: set</a></h2>
<p class="description">渡されたスタイルを、それぞれのオブジェクトを命名的に適用します(例を参照)。遷移はありません。</p>

<h3>構文:</h3>
<pre class="javascript">myFx.<span class="me1">set</span><span class="br0">(</span>to<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>to - (<em>オブジェクト</em>) オブジェクトの各アイテムは数値文字列で参照されます(1つのインスタンスが"1"です)。はじめのアイテムが"0"、2番目のアイテムが"1"という具合です。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) このFx.Elementsインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myFx = <span class="kw2">new</span> Fx.<span class="me1">Elements</span><span class="br0">(</span>$$<span class="br0">(</span><span class="st0">'.myClass'</span><span class="br0">)</span><span class="br0">)</span>.<span class="me1">set</span><span class="br0">(</span><span class="br0">{</span>

    <span class="st0">'0'</span>: <span class="br0">{</span>
        <span class="st0">'height'</span>: <span class="nu0">200</span>,
        <span class="st0">'opacity'</span>: <span class="nu0">0</span>
    <span class="br0">}</span>,
    <span class="st0">'1'</span>: <span class="br0">{</span>

        <span class="st0">'width'</span>: <span class="nu0">300</span>,
        <span class="st0">'opacity'</span>: <span class="nu0">1</span>
    <span class="br0">}</span>
<span class="br0">}</span><span class="br0">)</span>;</pre>
<h2 id="Fx-Elements:start"><a href="#Fx-Elements:start">Fx.Elementsメソッド: start</a></h2>
<p class="description">渡されたスタイル遷移をそれぞれのオブジェクトに対して命名的に適用します(例を参照)。</p>

<h3>構文:</h3>
<pre class="javascript">myFx.<span class="me1">start</span><span class="br0">(</span>obj<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>obj - (<em>オブジェクト</em>) オブジェクトの各アイテムは数値文字列で参照されます(1つのインスタンスが"1"です)。はじめのアイテムが"0"、2番目のアイテムが"1"という具合です。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) このFx.Elementsインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myElementsEffects = <span class="kw2">new</span> Fx.<span class="me1">Elements</span><span class="br0">(</span>$$<span class="br0">(</span><span class="st0">'a'</span><span class="br0">)</span><span class="br0">)</span>;
myElementsEffects.<span class="me1">start</span><span class="br0">(</span><span class="br0">{</span>

    <span class="st0">'0'</span>: <span class="br0">{</span> <span class="co1">//最初の要素の不透明度と幅を変えましょう。</span>
        <span class="st0">'opacity'</span>: <span class="br0">[</span><span class="nu0">0</span>,<span class="nu0">1</span><span class="br0">]</span>,
        <span class="st0">'width'</span>: <span class="br0">[</span><span class="nu0">100</span>,<span class="nu0">200</span><span class="br0">]</span>

    <span class="br0">}</span>,
    <span class="st0">'4'</span>: <span class="br0">{</span> <span class="co1">//そして、5番目の要素の不透明度を変えます。</span>
        <span class="st0">'opacity'</span>: <span class="br0">[</span><span class="nu0">0.2</span>, <span class="nu0">0.5</span><span class="br0">]</span>

    <span class="br0">}</span>
<span class="br0">}</span><span class="br0">)</span>;</pre>
</div>
<div id="menu" class="span-2 last">
<h4 class="menu-item"><a href="#Fx-Elements">Fx.Elements</a></h4>
<div class="menu-item"><a href="#Fx-Elements:set">set</a></div>
<div class="menu-item"><a href="#Fx-Elements:start">start</a></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>265</wp:post_id>
		<wp:post_date><![CDATA[2008-11-03 16:43:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-11-03 07:43:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[fxelements]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mootools"><![CDATA[MooTools]]></category>
		<category domain="category" nicename="plugins"><![CDATA[Plugins]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Drag</title>
		<link>https://takahashifumiki.com/web/mootools/267/</link>
		<pubDate>Mon, 03 Nov 2008 08:14:24 +0000</pubDate>
		<dc:creator><![CDATA[takahashi_fumiki]]></dc:creator>
		<guid isPermaLink="false">https://takahashifumiki.com/?p=267</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="main" class="l-border r-border span-15">
<h1 id="Drag"><a href="#Drag">Class: Drag</a></h1>
<p class="description">マウスボタンが押されている間、要素の二つのCSSプロパティをマウスカーソルの位置に応じて変更できるようにします。</p>

<h3>Implements:</h3>
<a href="/docs/Class/Class.Extras#Events">Events</a>, <a href="/docs/Class/Class.Extras#Options">Chain</a>
<h2 id="Drag:constructor"><a href="#Drag:constructor">Dragメソッド: constructor</a></h2>
<h3 class="description">構文:</h3>
<pre class="javascript"><span class="kw2">var</span> myDragInstance = <span class="kw2">new</span> Drag<span class="br0">(</span>el<span class="br0">[</span>, options<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>el      - (<em>要素</em>) ドラッグしたい要素。</li>
	<li>options - (<em>オブジェクト</em>, オプション) オプションオブジェクト。</li>
</ol>
<h3>オプション:</h3>
<ul>
	<li>grid      - (<em>整数</em>: 初期値=false) ドラッグ中にグリッドにスナップする距離。</li>
	<li>handle    - (<em>要素</em>: 初期値=渡された要素) ドラッグできる要素のハンドラーになる要素。</li>
	<li>invert    - (<em>真偽値</em>: 初期値=false) ドラッグ開始時にリポートされる値を逆にするかどうか。</li>
	<li>limit     - (<em>オブジェクト</em>: 初期値=false) 要素の動く範囲を制限するための、x、yプロパティを持ったオブジェクト。</li>
	<li>modifiers - (<em>オブジェクト</em>: 初期値={'x': 'left', 'y': 'top'}) CSS修正のための基点(i.e. 'left')となるx、yプロパティを持つオブジェクト。</li>
	<li>snap      - (<em>整数</em>: 初期値=6) 要素がドラッグに反応を開始するために動かす距離。</li>
	<li>style     - (<em>真偽値</em>: 初期値=true) 要素のCSSプロパティとして、モディフィアーを設定するか否か。</li>
	<li>unit      - (<em>文字列</em>: 初期値='px') CSSの単位として適用される文字列。</li>
</ul>
<h3>イベント:</h3>
<ul>
	<li>beforeStart - Dragインスタンスがイベントを添附する前に発生します。ドラッグされる要素を引数として受け取ります。</li>
	<li>start       - ユーザーがドラッグを開始したとき(マウスダウン時)に発生します。ドラッグされた要素を引数として受け取ります。</li>
	<li>snap        - snapオプションに設定された値を超えてドラッグすると発生します。ドラッグされた要素を引数として受け取ります。</li>
	<li>drag        - ドラッグのすべてのステップで発生します。引数としてドラッグされた要素を受け取ります。</li>
	<li>complete    - ユーザーがドラッグを完了すると発生します。ドラッグされた要素を引数として受け取ります。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myDrag = <span class="kw2">new</span> Drag<span class="br0">(</span><span class="st0">'myDraggable'</span>, <span class="br0">{</span>
    snap: <span class="nu0">0</span>,
    onSnap: <span class="kw2">function</span><span class="br0">(</span>el<span class="br0">)</span><span class="br0">{</span>

        el.<span class="me1">addClass</span><span class="br0">(</span><span class="st0">'dragging'</span><span class="br0">)</span>;
    <span class="br0">}</span>,
    onComplete: <span class="kw2">function</span><span class="br0">(</span>el<span class="br0">)</span><span class="br0">{</span>
        el.<span class="me1">removeClass</span><span class="br0">(</span><span class="st0">'dragging'</span><span class="br0">)</span>;
    <span class="br0">}</span>

<span class="br0">}</span><span class="br0">)</span>;

<span class="co1">//Adobeリーダー風のドラッグ&amp;スクロールを作ります。</span>
<span class="kw2">var</span> myDragScroller = <span class="kw2">new</span> Drag<span class="br0">(</span><span class="st0">'myContainer'</span>, <span class="br0">{</span>

    style: <span class="kw2">false</span>,
    invert: <span class="kw2">true</span>,
    modifiers: <span class="br0">{</span>x: <span class="st0">'scrollLeft'</span>, y: <span class="st0">'scrollTop'</span><span class="br0">}</span>
<span class="br0">}</span><span class="br0">)</span>;</pre>
<h3>注意点:</h3>
<ul>
	<li>Dragを使うにはページを<a href="http://hsivonen.iki.fi/doctype/">標準準拠モード</a>で作成する必要があります。</li>
</ul>
<h3>参考情報:</h3>
<ul>
	<li><a href="http://www.w3schools.com/css/css_units.asp">W3Schools: CSS Units</a></li>
</ul>
<h2 id="Drag:attach"><a href="#Drag:attach">Dragメソッド: attach</a></h2>
<p class="description">ハンドラーにマウスリスナーを添附し、要素をドラッグできるようにします。</p>

<h3>構文:</h3>
<pre class="javascript">myDrag.<span class="me1">attach</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) Dragインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myDrag = <span class="kw2">new</span> Drag<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">detach</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//要素はまだドラッグできません。</span>

$<span class="br0">(</span><span class="st0">'myActivator'</span><span class="br0">)</span>.<span class="me1">addEvent</span><span class="br0">(</span><span class="st0">'click'</span>, <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
    <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'Ok, now you can drag.'</span><span class="br0">)</span>;
    myDrag.<span class="me1">attach</span><span class="br0">(</span><span class="br0">)</span>;

<span class="br0">}</span><span class="br0">)</span>;</pre>
<h3>参考情報:</h3>
<ul>
	<li> <a href="/docs/Element/Element/#dollar">$</a>, <a href="/docs/Drag/Drag.Move/#Element:makeDraggable">Element:makeDraggable</a>, <a href="#Drag:detach">Drag:detach</a>, <a href="/docs/Element/Element.Event/#Element:addEvent">Element:addEvent</a></li>
</ul>
<h2 id="Drag:detach"><a href="#Drag:detach">Dragメソッド: detach</a></h2>
<p class="description">ハンドルからマウスリスナーを削除し、要素をドラッグできないようにします。</p>

<h3>構文:</h3>
<pre class="javascript">myDrag.<span class="me1">detach</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) このDragインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myDrag = <span class="kw2">new</span> Drag<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>;
$<span class="br0">(</span><span class="st0">'myDeactivator'</span><span class="br0">)</span>.<span class="me1">addEvent</span><span class="br0">(</span><span class="st0">'click'</span>, <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>

    <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'No more dragging for you, Mister.'</span><span class="br0">)</span>;
    myDrag.<span class="me1">detach</span><span class="br0">(</span><span class="br0">)</span>;
<span class="br0">}</span><span class="br0">)</span>;</pre>
<h3>参考情報:</h3>
<ul>
	<li> <a href="/docs/Element/Element/#dollar">$</a>, <a href="/docs/Drag/Drag.Move/#Element:makeDraggable">Element:makeDraggable</a>, <a href="/docs/Element/Element.Event/#Element:addEvent">Element:addEvent</a></li>
</ul>
<h2 id="Drag:stop"><a href="#Drag:stop">Dragメソッド: stop</a></h2>
<p class="description">Dragインスタンスからすべてのイベントを停止(削除)し、'complete'イベントを発生させます。</p>

<h3>構文:</h3>
<pre class="javascript">myDrag.<span class="kw3">stop</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myDrag = <span class="kw2">new</span> Drag<span class="br0">(</span><span class="st0">'myElement'</span>, <span class="br0">{</span>

    onSnap: <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
        <span class="kw1">this</span>.<span class="me1">moved</span> = <span class="kw1">this</span>.<span class="me1">moved</span> || <span class="nu0">0</span>;
        <span class="kw1">this</span>.<span class="me1">moved</span>++;
        <span class="kw1">if</span><span class="br0">(</span><span class="kw1">this</span>.<span class="me1">moved</span> &gt; <span class="nu0">100</span><span class="br0">)</span> <span class="br0">{</span>

            <span class="kw1">this</span>.<span class="kw3">stop</span><span class="br0">(</span><span class="br0">)</span>;
            <span class="kw3">alert</span><span class="br0">(</span><span class="st0">"Stop! You'll make the Element angry."</span><span class="br0">)</span>;
        <span class="br0">}</span>
    <span class="br0">}</span>

<span class="br0">}</span><span class="br0">)</span>;</pre>
<h1 id="Element"><a href="#Element">Native: Element</a></h1>
<p class="description"><a href="/docs/Element/Element/#dollar">$</a>関数で取得したDOM要素がこれらすべてのメソッドを使えるようにするカスタムネイティブです。</p>

<h2 id="Element:makeResizable"><a href="#Element:makeResizable">Elementメソッド: makeResizable</a></h2>
<p class="description">オプションを適用して、要素をドラッグ&amp;リサイズできるようにします。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> myResize = myElement.<span class="me1">makeResizable</span><span class="br0">(</span><span class="br0">[</span>options<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>options - (<em>オブジェクト</em>, オプション) 受け入れられるオプションは<a href="#Drag:constructor">Drag</a>を参照のこと。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) 生成されたDragインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myResize = $<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">makeResizable</span><span class="br0">(</span><span class="br0">{</span>
    onComplete: <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>

        <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'Done resizing.'</span><span class="br0">)</span>;
    <span class="br0">}</span>
<span class="br0">}</span><span class="br0">)</span>;</pre>
<h3>参考情報:</h3>
<ul>
	<li><a href="#Drag">Drag</a></li>
</ul>
</div>
<div id="menu" class="span-2 last">
<h4 class="menu-item"><a href="#Drag">Drag</a></h4>
<div class="menu-item"><a href="#Drag:constructor">constructor</a></div>
<div class="menu-item"><a href="#Drag:attach">attach</a></div>
<div class="menu-item"><a href="#Drag:detach">detach</a></div>
<div class="menu-item"><a href="#Drag:stop">stop</a></div>
<h4 class="menu-item"><a href="#Element">Element</a></h4>
<div class="menu-item"><a href="#Element:makeResizable">makeResizable</a></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>267</wp:post_id>
		<wp:post_date><![CDATA[2008-11-03 17:14:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-11-03 08:14:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[drag]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mootools"><![CDATA[MooTools]]></category>
		<category domain="category" nicename="plugins"><![CDATA[Plugins]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Drag.Move</title>
		<link>https://takahashifumiki.com/web/mootools/270/</link>
		<pubDate>Mon, 03 Nov 2008 08:38:31 +0000</pubDate>
		<dc:creator><![CDATA[takahashi_fumiki]]></dc:creator>
		<guid isPermaLink="false">https://takahashifumiki.com/?p=270</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="main" class="l-border r-border span-15">
<h1 id="Drag-Move"><a href="#Drag-Move">Class: Drag.Move</a></h1>
<p class="description">要素をドラッグするために、Dragクラスをベースに関数を追加し、拡張したもの。スナップとドロップをサポートしています。
<a href="https://takahashifumiki.com/web/mootools/267#Drag">Drag</a>からメソッド、プロパティ、オプション、イベントを継承します。
<h3>注意点:</h3>
Drag.Moveを使うには、<a href="http://hsivonen.iki.fi/doctype/">標準準拠モード</a>でページを作成する必要があります。
<h2 id="Drag-Move:constructor"><a href="#Drag-Move:constructor">Drag.Moveメソッド: constructor</a></h2>
<h3 class="description">構文:</h3>
<pre class="javascript"><span class="kw2">var</span> myMove = <span class="kw2">new</span> Drag.<span class="me1">Move</span><span class="br0">(</span>myElement<span class="br0">[</span>, options<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>el      - (<em>要素</em>) ドラッグを適用する要素。</li>
	<li>options - (<em>オブジェクト</em>, オプション) オプションオブジェクト。以下を参照のこと。</li>
</ol>
<h3>オプション:</h3>
すべてのベースとなるDragオプションに以下を追加したもの:
<ul>
	<li>container  - (<em>要素</em>) 要素が渡されると、ドラッグできる範囲はこの要素の位置とサイズによって制限されます。</li>
	<li>droppables - (<em>配列</em>) ドラッグしている要素をドロップできる要素。この要素のいずれかに働きかけると、クラスの持つdrop、enter、leaveイベントが発生します。</li>
</ul>
<h3>イベント:</h3>
<ul>
	<li>drop - 要素がドロップされると発生します。ドラッグされていた要素と、ドロップされた要素の2つが引数として渡ります。もし何もない場所にドロップした場合第2引数はnullになります。</li>
	<li>leave - ドラッグしている要素がdroppable要素の領域内から去ったときに発生します。</li>
	<li>enter - ドラッグしている要素がdroppable要素の領域内に入ったときに発生します。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myDrag = <span class="kw2">new</span> Drag.<span class="me1">Move</span><span class="br0">(</span><span class="st0">'draggable'</span>, <span class="br0">{</span>

    droppables: <span class="st0">'.droppable'</span>,

    onDrop: <span class="kw2">function</span><span class="br0">(</span>element, droppable<span class="br0">)</span><span class="br0">{</span>
        <span class="kw1">if</span> <span class="br0">(</span>!droppable<span class="br0">)</span> console.<span class="me1">log</span><span class="br0">(</span>element, <span class="st0">' dropped on nothing'</span><span class="br0">)</span>;
        <span class="kw1">else</span> console.<span class="me1">log</span><span class="br0">(</span>element, <span class="st0">'dropped on'</span>, droppable<span class="br0">)</span>;
    <span class="br0">}</span>,

    onEnter: <span class="kw2">function</span><span class="br0">(</span>element, droppable<span class="br0">)</span><span class="br0">{</span>
        console.<span class="me1">log</span><span class="br0">(</span>element, <span class="st0">'entered'</span>, droppable<span class="br0">)</span>;
    <span class="br0">}</span>,

    onLeave: <span class="kw2">function</span><span class="br0">(</span>element, droppable<span class="br0">)</span><span class="br0">{</span>
        console.<span class="me1">log</span><span class="br0">(</span>element, <span class="st0">'left'</span>, droppable<span class="br0">)</span>;
    <span class="br0">}</span>

<span class="br0">}</span><span class="br0">)</span>;</pre>
<h3>注意点:</h3>
<ul>
	<li>Drag.Moveを使うには<a href="http://hsivonen.iki.fi/doctype/">標準準拠モード</a>でページを作成する必要があります。</li>
	<li>Drag.MoveはCSSのposition指定absoluteとrelativeをサポートしています。positionが指定されていない場合、absoluteがセットされます。</li>
</ul>
<h3>デモ:</h3>
<ul>
	<li>Drag.Cart - <a href="http://demos.mootools.net/Drag.Cart">http://demos.mootools.net/Drag.Cart</a></li>
	<li>Drag.Absolutely - <a href="http://demos.mootools.net/Drag.Absolutely">http://demos.mootools.net/Drag.Absolutely</a></li>
	<li>DragDrop - <a href="http://demos.mootools.net/DragDrop">http://demos.mootools.net/DragDrop</a></li>
</ul>
<h3>参考情報:</h3>
<ul>
	<li><a href="https://takahashifumiki.com/web/mootools/267#Drag">Drag</a></li>
</ul>
<h2 id="Drag-Move:stop"><a href="#Drag-Move:stop">Drag.Moveメソッド: stop</a></h2>
<p class="description">要素がdroppable要素の上にあるかをチェックして、該当すればdropイベントを発生させます。そうでなければ、この要素に添附されている'emptydrop'イベントを発生させます。最終的にDragクラスのstopメソッドを実行します。</p>

<h3>構文:</h3>
<pre class="javascript">myMove.<span class="kw3">stop</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myElement = $<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">addEvent</span><span class="br0">(</span><span class="st0">'emptydrop'</span>, <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>

    <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'no drop occurred'</span><span class="br0">)</span>;
<span class="br0">}</span><span class="br0">)</span>;

<span class="kw2">var</span> myMove = <span class="kw2">new</span> Drag.<span class="me1">Move</span><span class="br0">(</span>myElement, <span class="br0">{</span>

    onSnap: <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span> <span class="co1">//MooToolの継承ルールにより、すべてのDragイベントを使うことができます。</span>
        <span class="kw1">this</span>.<span class="me1">moved</span> = <span class="kw1">this</span>.<span class="me1">moved</span> || <span class="nu0">0</span>;
        <span class="kw1">this</span>.<span class="me1">moved</span>++;
        <span class="kw1">if</span><span class="br0">(</span><span class="kw1">this</span>.<span class="me1">moved</span> &gt; <span class="nu0">1000</span><span class="br0">)</span><span class="br0">{</span>

            <span class="kw3">alert</span><span class="br0">(</span><span class="st0">"You've gone far enough."</span><span class="br0">)</span>;
            <span class="kw1">this</span>.<span class="kw3">stop</span><span class="br0">(</span><span class="br0">)</span>;
        <span class="br0">}</span>
    <span class="br0">}</span>

<span class="br0">}</span><span class="br0">)</span>;</pre>
<h3>参考情報:</h3>
<ul>
	<li><a href="https://takahashifumiki.com/web/mootools/267#Drag:stop">Drag:stop</a></li>
</ul>
<h1 id="Element"><a href="#Element">Native: Element</a></h1>
<p class="description"><a href="/docs/Element/Element/#dollar">$</a>関数で取得したDOM要素がこれらのすべてのメソッドを使えるようにするカスタムネイティブです。</p>

<h2 id="Element:makeDraggable"><a href="#Element:makeDraggable">Elementメソッド: makeDraggable</a></h2>
<p class="description">提供されたオプションを使って、要素にドラッグ&amp;ムーブの機能を付け加えます。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> myDrag = myElement.<span class="me1">makeDraggable</span><span class="br0">(</span><span class="br0">[</span>options<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>options - (<em>オブジェクト</em>, オプション) 受け付けるオプションは<a href="https://takahashifumiki.com/web/mootools/267#Drag">Drag</a>と<a href="#Drag-Move">Drag.Move</a>を参照のこと。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) 生成されたDrag.Moveインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myDrag = $<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">makeDraggable</span><span class="br0">(</span><span class="br0">{</span>

    onComplete: <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
        <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'done dragging'</span><span class="br0">)</span>;
    <span class="br0">}</span>
<span class="br0">}</span><span class="br0">)</span>;</pre>
<h3>参考情報:</h3>
<ul>
	<li> <a href="/docs/Drag/Drag/#Drag">Drag</a>, <a href="#Drag-Move">Drag.Move</a></li>
</ul>
</div>
<div id="menu" class="span-2 last">
<h4 class="menu-item"><a href="#Drag-Move">Drag.Move</a></h4>
<div class="menu-item"><a href="#Drag-Move:constructor">constructor</a></div>
<div class="menu-item"><a href="#Drag-Move:stop">stop</a></div>
<h4 class="menu-item"><a href="#Element">Element</a></h4>
<div class="menu-item"><a href="#Element:makeDraggable">makeDraggable</a></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>270</wp:post_id>
		<wp:post_date><![CDATA[2008-11-03 17:38:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-11-03 08:38:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[dragmove]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mootools"><![CDATA[MooTools]]></category>
		<category domain="category" nicename="plugins"><![CDATA[Plugins]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Color</title>
		<link>https://takahashifumiki.com/web/mootools/272/</link>
		<pubDate>Mon, 03 Nov 2008 08:50:19 +0000</pubDate>
		<dc:creator><![CDATA[takahashi_fumiki]]></dc:creator>
		<guid isPermaLink="false">https://takahashifumiki.com/?p=272</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="main" class="l-border r-border span-15">
<h1 id="Color"><a href="#Color">Class: Color</a></h1>
<p class="description">新しいColorクラスを生成します。カラーを指定するメソッドを持った配列です。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> myColor = <span class="kw2">new</span> Color<span class="br0">(</span>color<span class="br0">[</span>, type<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>color - (<em>いろいろ</em>) 色を表現する文字列か配列。</li>
	<li>type  - (<em>文字列</em>, オプション) 作りたい色のタイプを表す文字列。</li>
</ol>
<h3>Color:</h3>
カラー値には3つの典型的な形式があります:文字列、RGB、HSBです。文字列の表記に関しては、<a href="https://takahashifumiki.com/web/mootools/226#Element:setStyles">Element:setStyle</a>を見てください。
<h3>例:</h3>
<h5>文字列による表記:</h5>
<pre class="javascript"><span class="st0">'#fff'</span></pre>
<h5>RGBとHSBの表記:</h5>
<pre class="javascript"><span class="br0">[</span><span class="nu0">255</span>, <span class="nu0">255</span>, <span class="nu0">255</span><span class="br0">]</span>
<span class="co1">//または:</span>
<span class="br0">[</span><span class="nu0">255</span>, <span class="nu0">255</span>, <span class="nu0">255</span>, <span class="nu0">1</span><span class="br0">]</span> <span class="co1">//(不透明度)</span></pre>
<h3>戻り値:</h3>
<ul>
	<li>(<em>配列</em>) 新しいColorインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> black = <span class="kw2">new</span> Color<span class="br0">(</span><span class="st0">'#000'</span><span class="br0">)</span>;

<span class="kw2">var</span> purple = <span class="kw2">new</span> Color<span class="br0">(</span><span class="br0">[</span><span class="nu0">255</span>,<span class="nu0">0</span>,<span class="nu0">255</span><span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>注意点:</h3>
<ul>
	<li>HSBカラー値を使うには、第2引数を指定する必要があります。</li>
</ul>
<h2 id="Color:mix"><a href="#Color:mix">Colorメソッド: mix</a></h2>
<p class="description">Colorを使って2色以上を混ぜ合わせます。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> myMix = myColor.<span class="me1">mix</span><span class="br0">(</span>color<span class="br0">[</span>, color2<span class="br0">[</span>, color3<span class="br0">[</span>, ...<span class="br0">]</span><span class="br0">[</span>, alpha<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>color - (<em>いろいろ</em>) Colorを使って混ぜたい色を1色以上。16進数かRGB表記にすること。</li>
	<li>alpha - (<em>数</em>, オプション) 最後の引数がリテラル数ならば、混ぜる色の総量として扱われます。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>配列</em>) 新しいColorインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="co1">// 黒に白10%、紫10%を混ぜます。</span>
<span class="kw2">var</span> darkpurple = <span class="kw2">new</span> Color<span class="br0">(</span><span class="st0">'#000'</span><span class="br0">)</span>.<span class="me1">mix</span><span class="br0">(</span><span class="st0">'#fff'</span>, <span class="br0">[</span><span class="nu0">255</span>, <span class="nu0">0</span>, <span class="nu0">255</span><span class="br0">]</span>, <span class="nu0">10</span><span class="br0">)</span>;

$<span class="br0">(</span><span class="st0">'myDiv'</span><span class="br0">)</span>.<span class="me1">setStyle</span><span class="br0">(</span><span class="st0">'background-color'</span>, darkpurple<span class="br0">)</span>;</pre>
<h2 id="Color:Invert"><a href="#Color:Invert">Colorメソッド: invert</a></h2>
<p class="description">色を反転させます。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> myInvert = myColor.<span class="me1">invert</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(<em>配列</em>) 新しいColorインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> white = <span class="kw2">new</span> Color<span class="br0">(</span><span class="st0">'#fff'</span><span class="br0">)</span>;

<span class="kw2">var</span> black = white.<span class="me1">invert</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h2 id="Color:setHue"><a href="#Color:setHue">Colorメソッド: setHue</a></h2>
<p class="description">Colorの色相を修正して、新しいインスタンスを返します。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> hue = myColor.<span class="me1">setHue</span><span class="br0">(</span>value<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>value - (<em>数</em>) セットする色相。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>配列</em>) 新しいColorインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myColor = <span class="kw2">new</span> Color<span class="br0">(</span><span class="st0">'#f00'</span><span class="br0">)</span>;

<span class="kw2">var</span> myElement = $<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>;

<span class="br0">(</span><span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
    myElement.<span class="me1">setStyle</span><span class="br0">(</span><span class="st0">'color'</span>, myColor.<span class="me1">setHue</span><span class="br0">(</span>myColor.<span class="me1">hsb</span><span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span>++<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>;

<span class="br0">}</span><span class="br0">)</span>.<span class="me1">periodical</span><span class="br0">(</span><span class="nu0">250</span><span class="br0">)</span>;</pre>
<h2 id="Color:setSaturation"><a href="#Color:setSaturation">Colorメソッド: setSaturation</a></h2>
<p class="description">Colorの彩度を変更して、新しいインスタンスを返します。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> saturate = myColor.<span class="me1">setSaturation</span><span class="br0">(</span>percent<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>percent - (<em>数</em>) セットする彩度のパーセンテージ。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>配列</em>) 新しいColorインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myColor = <span class="kw2">new</span> Color<span class="br0">(</span><span class="st0">'#f00'</span><span class="br0">)</span>;
$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">addEvent</span><span class="br0">(</span><span class="st0">'mouseenter'</span>, <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>

    <span class="kw1">this</span>.<span class="me1">setStyle</span><span class="br0">(</span><span class="st0">'background-color'</span>, myColor.<span class="me1">setSaturation</span><span class="br0">(</span>myColor.<span class="me1">hsb</span><span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span>++<span class="br0">)</span><span class="br0">)</span>;

<span class="br0">}</span><span class="br0">)</span>;</pre>
<h2 id="Color:setBrightness"><a href="#Color:setBrightness">Colorメソッド: setBrightness</a></h2>
<p class="description">Colorの明度を変更して、新しいインスタンスを返します。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> brighten = myColor.<span class="me1">setBrightness</span><span class="br0">(</span>percent<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>percent - (<em>数</em>) セットする明度のパーセンテージ。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>配列</em>) 当たらしColorインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myColor = <span class="kw2">new</span> Color<span class="br0">(</span><span class="st0">'#000'</span><span class="br0">)</span>;
$<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>.<span class="me1">addEvent</span><span class="br0">(</span><span class="st0">'mouseenter'</span>, <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>

    <span class="kw1">this</span>.<span class="me1">setStyle</span><span class="br0">(</span><span class="st0">'background-color'</span>, myColor.<span class="me1">setBrightness</span><span class="br0">(</span>myColor.<span class="me1">hsb</span><span class="br0">[</span><span class="nu0">2</span><span class="br0">]</span>++<span class="br0">)</span><span class="br0">)</span>;

<span class="br0">}</span><span class="br0">)</span>;</pre>
<h2 id="RGB"><a href="#RGB">Function: $RGB</a></h2>
<p class="description">新しいRGBカラーを生成するショートハンド関数。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> myColor = $RGB<span class="br0">(</span>r, g, b<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>r - (<em>数</em>) 0から255の赤の値。</li>
	<li>g - (<em>数</em>) 0から255の緑の値。</li>
	<li>b - (<em>数</em>) 0から255の青の値。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>配列</em>) 新しいColorインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myColor = $RGB<span class="br0">(</span>$random<span class="br0">(</span><span class="nu0">0</span>,<span class="nu0">255</span><span class="br0">)</span>, $random<span class="br0">(</span><span class="nu0">0</span>,<span class="nu0">255</span><span class="br0">)</span>, $random<span class="br0">(</span><span class="nu0">0</span>,<span class="nu0">255</span><span class="br0">)</span><span class="br0">)</span>;</pre>
<h2 id="HSB"><a href="#HSB">Function: $HSB</a></h2>
<p class="description">新しいHSBカラーを生成するショートハンド関数。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> myColor = $HSB<span class="br0">(</span>h, s, b<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>h - (<em>数</em>) 0から359の色相。</li>
	<li>s - (<em>数</em>) 0から100の彩度。</li>
	<li>b - (<em>数</em>) 0から100の明度。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>配列</em>) 新しいColorインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myColor = $HSB<span class="br0">(</span><span class="nu0">50</span>, <span class="nu0">50</span>, <span class="nu0">100</span><span class="br0">)</span>;</pre>
<h1 id="Array"><a href="#Array">Native: Array</a></h1>
<p class="description">Arrayのプロパティを含みます。</p>

<h3>参考情報:</h3>
<ul>
	<li><a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array">MDC Array</a></li>
</ul>
<h2 id="Array:rgbToHsb"><a href="#Array:rgbToHsb">Arrayメソッド: rgbToHsb</a></h2>
<p class="description">RGB配列をHSB配列に変換します。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> myHSB = myRGBArray.<span class="me1">rgbToHsb</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(<em>配列</em>) HSB値を持つ配列。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myHSB = <span class="br0">[</span><span class="nu0">255</span>, <span class="nu0">0</span>, <span class="nu0">0</span><span class="br0">]</span>.<span class="me1">rgbToHsb</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//戻り値 [0, 100, 100].</span></pre>
<h2 id="Array:hsbToRgb"><a href="#Array:hsbToRgb">Arrayメソッド: hsbToRgb</a></h2>
<p class="description">HSB配列をRGB配列に変換します。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> myHSB = myRGBArray.<span class="me1">hsbToRgb</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(<em>配列</em>) RGB値を持つ配列。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myRGB = <span class="br0">[</span><span class="nu0">0</span>, <span class="nu0">100</span>, <span class="nu0">100</span><span class="br0">]</span>.<span class="me1">hsbToRgb</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//myRGB = [255, 0, 0]</span></pre>
</div>
<div id="menu" class="span-2 last">
<h4 class="menu-item"><a href="#Color">Color</a></h4>
<div class="menu-item"><a href="#Color:mix">mix</a></div>
<div class="menu-item"><a href="#Color:Invert">Invert</a></div>
<div class="menu-item"><a href="#Color:setHue">setHue</a></div>
<div class="menu-item"><a href="#Color:setSaturation">setSaturation</a></div>
<div class="menu-item"><a href="#Color:setBrightness">setBrightness</a></div>
<div class="menu-item"><a href="#RGB">RGB</a></div>
<div class="menu-item"><a href="#HSB">HSB</a></div>
<h4 class="menu-item"><a href="#Array">Array</a></h4>
<div class="menu-item"><a href="#Array:rgbToHsb">rgbToHsb</a></div>
<div class="menu-item"><a href="#Array:hsbToRgb">hsbToRgb</a></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>272</wp:post_id>
		<wp:post_date><![CDATA[2008-11-03 17:50:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-11-03 08:50:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[color]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mootools"><![CDATA[MooTools]]></category>
		<category domain="category" nicename="plugins"><![CDATA[Plugins]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Group</title>
		<link>https://takahashifumiki.com/web/mootools/274/</link>
		<pubDate>Mon, 03 Nov 2008 09:00:08 +0000</pubDate>
		<dc:creator><![CDATA[takahashi_fumiki]]></dc:creator>
		<guid isPermaLink="false">https://takahashifumiki.com/?p=274</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="main" class="l-border r-border span-15">
<h1 id="Group"><a href="#Group">Class: Group</a></h1>
<p class="description">このクラスはクラスやイベントをグループ化するためのものです。Groupに添附されたイベント、はグループの要素に添附されたイベントがすべて発生したときに発生します。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> myGroup = <span class="kw2">new</span> Group<span class="br0">(</span><span class="kw2">class</span><span class="br0">[</span>, arrays<span class="br0">[</span>, class2<span class="br0">[</span>, ... <span class="br0">]</span><span class="br0">]</span><span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
クラスインスタンスや、クラスインスタンスを含む配列などを幾つでも。
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) 新しいGroupインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> xhr1 = <span class="kw2">new</span> Ajax<span class="br0">(</span><span class="st0">'data.js'</span>, <span class="br0">{</span>evalScript: <span class="kw2">true</span><span class="br0">}</span><span class="br0">)</span>;

<span class="kw2">var</span> xhr2 = <span class="kw2">new</span> Ajax<span class="br0">(</span><span class="st0">'abstraction.js'</span>, <span class="br0">{</span>evalScript: <span class="kw2">true</span><span class="br0">}</span><span class="br0">)</span>;
<span class="kw2">var</span> xhr3 = <span class="kw2">new</span> Ajax<span class="br0">(</span><span class="st0">'template.js'</span>, <span class="br0">{</span>evalScript: <span class="kw2">true</span><span class="br0">}</span><span class="br0">)</span>;

<span class="kw2">var</span> group = <span class="kw2">new</span> Group<span class="br0">(</span>xhr1, xhr2, xhr3<span class="br0">)</span>;
group.<span class="me1">addEvent</span><span class="br0">(</span><span class="st0">'complete'</span>, <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>

    <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'All Scripts loaded'</span><span class="br0">)</span>;
<span class="br0">}</span><span class="br0">)</span>;

xhr1.<span class="me1">request</span><span class="br0">(</span><span class="br0">)</span>;
xhr2.<span class="me1">request</span><span class="br0">(</span><span class="br0">)</span>;
xhr3.<span class="me1">request</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h2 id="Group:addEvent"><a href="#Group:addEvent">Groupメソッド: addEvent</a></h2>
<p class="description">クラスインスタンスのイベント集合に対してイベントを添附します。</p>

<h3>構文:</h3>
<pre class="javascript">myGroup.<span class="me1">addEvent</span><span class="br0">(</span>type, fn<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>type - (<em>文字列</em>) 添附するイベント名(e.g. 'complete')。</li>
	<li>fn   - (<em>関数</em>) 全てのインスタンスのイベントが発生したときに実行するコールバック関数。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) このGroupインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myElements = $<span class="br0">(</span><span class="st0">'myForm'</span><span class="br0">)</span>.<span class="me1">getElements</span><span class="br0">(</span><span class="st0">'input, textarea, select'</span><span class="br0">)</span>;
myElements.<span class="me1">addEvent</span><span class="br0">(</span><span class="st0">'click'</span>, <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>

    <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'an individual click'</span><span class="br0">)</span>;
<span class="br0">}</span><span class="br0">)</span>;

<span class="kw2">var</span> myGroup = <span class="kw2">new</span> Group<span class="br0">(</span>myElements<span class="br0">)</span>;
myGroup.<span class="me1">addEvent</span><span class="br0">(</span><span class="st0">'click'</span>, <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>

    <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'all form elements clicked'</span><span class="br0">)</span>;
<span class="br0">}</span><span class="br0">)</span>;</pre>
<h3>参考情報:</h3>
</div>
<div id="menu" class="span-2 last">
<h4 class="menu-item"><a href="#Group">Group</a></h4>
<div class="menu-item"><a href="#Group:addEvent">addEvent</a></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>274</wp:post_id>
		<wp:post_date><![CDATA[2008-11-03 18:00:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-11-03 09:00:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[group]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mootools"><![CDATA[MooTools]]></category>
		<category domain="category" nicename="plugins"><![CDATA[Plugins]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hash.Cookie</title>
		<link>https://takahashifumiki.com/web/mootools/276/</link>
		<pubDate>Mon, 03 Nov 2008 09:11:58 +0000</pubDate>
		<dc:creator><![CDATA[takahashi_fumiki]]></dc:creator>
		<guid isPermaLink="false">https://takahashifumiki.com/?p=276</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="main" class="l-border r-border span-15">
<h1 id="Hash-Cookie"><a href="#Hash-Cookie">Class: Hash.Cookie</a></h1>
<p class="description">JSON形式を利用して、ハッシュをクッキーとして保存・読み取りできます。</p>

<h3>継承:</h3>
<ul>
	<li><a href="https://takahashifumiki.com/web/mootools/198#Hash">Hash</a></li>
</ul>
<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> myHashCookie = <span class="kw2">new</span> Hash.<span class="me1">Cookie</span><span class="br0">(</span><span class="kw3">name</span><span class="br0">[</span>, options<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>name    - (<em>文字列</em>) クッキーのキー(名前)。</li>
	<li>options - (<em>オブジェクト</em>) すべての<a href="https://takahashifumiki.com/web/mootools/236">Cookie</a>オプションに加え、autoSaveオプションを指定できます。</li>
</ol>
<h4>オプション:</h4>
<ol>
	<li>autoSave - (<em>真偽値</em>: 初期値=true) すべての操作時にクッキーを保存するかを決めるオプション。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) 新しいHash.Cookieインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> fruits = <span class="kw2">new</span> Hash.<span class="me1">Cookie</span><span class="br0">(</span><span class="st0">'myCookieName'</span>, <span class="br0">{</span>duration: <span class="nu0">3600</span><span class="br0">}</span><span class="br0">)</span>;
fruits.<span class="me1">extend</span><span class="br0">(</span><span class="br0">{</span>

    <span class="st0">'lemon'</span>: <span class="st0">'yellow'</span>,
    <span class="st0">'apple'</span>: <span class="st0">'red'</span>
<span class="br0">}</span><span class="br0">)</span>;
fruits.<span class="me1">set</span><span class="br0">(</span><span class="st0">'melon'</span>, <span class="st0">'green'</span><span class="br0">)</span>;
fruits.<span class="me1">get</span><span class="br0">(</span><span class="st0">'lemon'</span><span class="br0">)</span>; <span class="co1">// yellow</span>

<span class="co1">// ... 別のページにて。 ... 値が自動的に読み込まれます。</span>

<span class="kw2">var</span> fruits = <span class="kw2">new</span> Hash.<span class="me1">Cookie</span><span class="br0">(</span><span class="st0">'myCookieName'</span>, <span class="br0">{</span>duration: <span class="nu0">365</span><span class="br0">}</span><span class="br0">)</span>;
fruits.<span class="me1">get</span><span class="br0">(</span><span class="st0">'melon'</span><span class="br0">)</span>; <span class="co1">// green</span>

fruits.<span class="me1">erase</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">// クッキー削除</span></pre>
<h3>注意点:</h3>
<ul>
	<li>Hash.Cookieインスタンスでは、すべてのHashメソッドを使うことができます。もしautoSaveオプションがセットされていれば、すべてのメソッドは保存されたクッキーの中に出力されます。</li>
	<li>クッキーには4kb(4096バイト)という制限があります。したがって、Hashのサイズには充分に注意してください。</li>
	<li>Hash.Cookieで行われたすべてのHashメソッドは、Cookieのサイズを超えない限り、Hashメソッドの戻り値を保存します。超えてしまった場合は、falseを返します。</li>
	<li>大きいサイズのクッキーを使う予定があるならば、autoSaveをオフにすることを検討してください。そして、save()のステータスに都度留意するようにしてください。</li>
	<li>新しいインスタンスを生成すると、自動的にクッキーからデータを読み取ってHashに変換します。フーッ、クールでしょう？</li>
</ul>
<h3>参考情報:</h3>
<ul>
	<li><a href="https://takahashifumiki.com/web/mootools/198#Hash">Hash</a></li>
</ul>
<h2 id="Hash-Cookie:save"><a href="#Hash-Cookie:save">Hash.Cookieメソッド: save</a></h2>
<p class="description">クッキーにハッシュを保存します。ハッシュが空ならば、クッキーを削除します。</p>

<h3>構文:</h3>
<pre class="javascript">myHashCookie.<span class="me1">save</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(<em>真偽値</em>) JSON文字列が長すぎる(4kb以上)場合は、falseを返します。それ以外はtrueです。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> login = <span class="kw2">new</span> Hash.<span class="me1">Cookie</span><span class="br0">(</span><span class="st0">'userstatus'</span>, <span class="br0">{</span>autoSave: <span class="kw2">false</span><span class="br0">}</span><span class="br0">)</span>;

login.<span class="me1">extend</span><span class="br0">(</span><span class="br0">{</span>
    <span class="st0">'username'</span>: <span class="st0">'John'</span>,
    <span class="st0">'credentials'</span>: <span class="br0">[</span><span class="nu0">4</span>, <span class="nu0">7</span>, <span class="nu0">9</span><span class="br0">]</span>

<span class="br0">}</span><span class="br0">)</span>;
login.<span class="me1">set</span><span class="br0">(</span><span class="st0">'last_message'</span>, <span class="st0">'User logged in!'</span><span class="br0">)</span>;

login.<span class="me1">save</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">// 最後にHashを保存。</span></pre>
<h2 id="Hash-Cookie:load"><a href="#Hash-Cookie:load">Hash.Cookieメソッド: load</a></h2>
<p class="description">クッキーを読み取り、Hashに変換します。</p>

<h3>構文:</h3>
<pre class="javascript">myHashCookie.<span class="me1">load</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) このHash.Cookieインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myHashCookie = <span class="kw2">new</span> Hash.<span class="me1">Cookie</span><span class="br0">(</span><span class="st0">'myCookie'</span><span class="br0">)</span>;

<span class="br0">(</span><span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
    myHashCookie.<span class="me1">load</span><span class="br0">(</span><span class="br0">)</span>;
    <span class="kw1">if</span><span class="br0">(</span>!myHashCookie.<span class="me1">length</span><span class="br0">)</span> <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'Cookie Monster must of eaten it!'</span><span class="br0">)</span>;

<span class="br0">}</span><span class="br0">)</span>.<span class="me1">periodical</span><span class="br0">(</span><span class="nu0">5000</span><span class="br0">)</span>;</pre>
<h3>注意点:</h3>
<ul>
	<li>投票などに役立ちます。</li>
</ul>
</div>
<div id="menu" class="span-2 last">
<h4 class="menu-item"><a href="#Hash-Cookie">Hash.Cookie</a></h4>
<div class="menu-item"><a href="#Hash-Cookie:save">save</a></div>
<div class="menu-item"><a href="#Hash-Cookie:load">load</a></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>276</wp:post_id>
		<wp:post_date><![CDATA[2008-11-03 18:11:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-11-03 09:11:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[hashcookie]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mootools"><![CDATA[MooTools]]></category>
		<category domain="category" nicename="plugins"><![CDATA[Plugins]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sortables</title>
		<link>https://takahashifumiki.com/web/mootools/278/</link>
		<pubDate>Mon, 03 Nov 2008 09:52:56 +0000</pubDate>
		<dc:creator><![CDATA[takahashi_fumiki]]></dc:creator>
		<guid isPermaLink="false">https://takahashifumiki.com/?p=278</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="main" class="l-border r-border span-15">
<h1 id="Sortables"><a href="#Sortables">Class: Sortables</a></h1>
<p class="description">リストをドラッグ&amp;ドロップでソートできるインターフェイスを生成します。</p>

<h3>引数:</h3>
<ol>
	<li>list - (<em>いろいろ</em>) 必須です。ソートできるようにしたいリスト。
<ul>
	<li>この引数は<a href="https://takahashifumiki.com/web/mootools/213">Element</a>か<a href="https://takahashifumiki.com/web/mootools/213#Elements">Elements</a>、セレクターです。単一のリスト(またはID)が渡された場合、リストはその中でのみソートできます。</li>
	<li>複数のリスト間でソートを可能にするには、配列に複数のリストかリストのIDを渡す、あるいは、セレクターを使用してください。以下の例を参照のこと。</li>
</ul>
</li>
	<li>options - (<em>オブジェクト</em>) 下のオプションとイベントを参照のこと。</li>
</ol>
<h4>オプション:</h4>
<ul>
	<li>constrain - (<em>真偽値</em>: 初期値=false) 親要素に対してのドラッグを制限するかいなか。</li>
	<li>clone     - (<em>いろいろ</em>: 初期値=false) ドラッグしている間に要素のコピーをマウスカーソルの下に表示するか否か。コピーとして使われる要素を返す関数としても使えます。関数はmousedownイベント、要素、リストを引数として受け取ります。</li>
	<li>handle    - (<em>文字列</em>: 初期値=false) それぞれのソートアイテムをソートするためのハンドラを指定するためのセレクター。なにも見つからなければ、ソートアイテム自身が自分のハンドラとなります。</li>
	<li>opacity   - (<em>整数</em>: 初期値=1) ソートアイテムを内包している要素の透明度。</li>
	<li>revert    - (<em>いろいろ</em>: 初期値=false) ソートした後、最後に収まった場所にスライドエフェクトを適用するか否か。オブジェクトを渡した場合、それはrevertエフェクトの追加オプションとして使われます。</li>
	<li>snap      - (<em>整数</em>: 初期値=4) ソートをはじめるために、ソートアイテムをドラッグしなくてはならないピクセル数。</li>
</ul>
<h3>イベント:</h3>
<ul>
	<li>start    - ソートが開始されたときに発生します。</li>
	<li>sort     - ソートアイテムがリストの新しい場所に挿入されたときに発生します。</li>
	<li>complete - ソートアイテムのドラッグが終了したときに発生します。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> mySortables = <span class="kw2">new</span> Sortables<span class="br0">(</span><span class="st0">'list-1'</span>, <span class="br0">{</span>

    revert: <span class="br0">{</span> duration: <span class="nu0">500</span>, transition: <span class="st0">'elastic:out'</span> <span class="br0">}</span>
<span class="br0">}</span><span class="br0">)</span>;
<span class="co1">//新しいSortableインスタンスをID'list-1'に作成し、revertエフェクトオプションを設定します。</span>

<span class="kw2">var</span> mySortables = <span class="kw2">new</span> Sortables<span class="br0">(</span><span class="st0">'#list-1, #list-2'</span>, <span class="br0">{</span>
    constrain: <span class="kw2">true</span>,
    clone: <span class="kw2">false</span>,
    revert: <span class="kw2">true</span>

<span class="br0">}</span><span class="br0">)</span>;
<span class="co1">//新しいSortableインスタンスを'list-1'と'list-2'に生成し、constrainオプションをtrueにセットします。</span>
<span class="co1">//これで、ソートアイテムを別のリストにドラッグすることはできません。</span>

<span class="kw2">var</span> mySortables = <span class="kw2">new</span> Sortables<span class="br0">(</span><span class="st0">'#list-1, #list-2, #list-3'</span><span class="br0">)</span>;

<span class="co1">//新しいSortableインスタンスをID'list-1'とID'list-2'と'list-3'に生成します。</span>
<span class="br0">(</span>end<span class="br0">)</span></pre>
<h2 id="Sortables:attach"><a href="#Sortables:attach">Sortablesメソッド: attach</a></h2>
<p class="description">ソートを可能にするハンドラにマウスイベントリスナーを添附します。</p>

<h3>構文:</h3>
<pre class="javascript">mySortables.<span class="me1">attach</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) このSortablesインスタンス。</li>
</ul>
<h2 id="Sortables:detach"><a href="#Sortables:detach">Sortablesメソッド: detach</a></h2>
<p class="description">ハンドラからマウスリスナーイベントを削除し、ソートできなくします。</p>

<h3>構文:</h3>
<pre class="javascript">mySortables.<span class="me1">detach</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) このSortablesインスタンス。</li>
</ul>
<h2 id="Sortables:addItems"><a href="#Sortables:addItems">Sortablesメソッド: addItems</a></h2>
<p class="description">すでに存在するSortablesインスタンスにアイテムを追加します。</p>

<h3>構文:</h3>
<pre class="javascript">mySortables.<span class="me1">addItems</span><span class="br0">(</span>item1<span class="br0">[</span>, item2<span class="br0">[</span>, item3<span class="br0">[</span>, ...<span class="br0">]</span><span class="br0">]</span><span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>items - (<em>いろいろ</em>) Array.flattenが引数に適用されるので、単一の要素、複数の要素、要素の配列、さらにそれらをいくらでも組み合わせたものを、このメソッドに渡せます。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) このSortablesインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> mySortables = <span class="kw2">new</span> Sortables<span class="br0">(</span><span class="st0">'#list1, #list2'</span><span class="br0">)</span>;

<span class="kw2">var</span> element1 = <span class="kw2">new</span> Element<span class="br0">(</span><span class="st0">'div'</span><span class="br0">)</span>;

<span class="kw2">var</span> element2 = <span class="kw2">new</span> Element<span class="br0">(</span><span class="st0">'div'</span><span class="br0">)</span>;
<span class="kw2">var</span> element3 = <span class="kw2">new</span> Element<span class="br0">(</span><span class="st0">'div'</span><span class="br0">)</span>;

$<span class="br0">(</span><span class="st0">'list1'</span><span class="br0">)</span>.<span class="me1">adopt</span><span class="br0">(</span>element1<span class="br0">)</span>;
$<span class="br0">(</span><span class="st0">'list2'</span><span class="br0">)</span>.<span class="me1">adopt</span><span class="br0">(</span>element2, element3<span class="br0">)</span>;
mySortables.<span class="me1">addItems</span><span class="br0">(</span>element1, element2, element3<span class="br0">)</span>;</pre>
<h3>注意点:</h3>
<ul>
	<li>Sortablesインスタンスが複数のリストを持っているとき、ソートアイテムはリストに自動的に挿入されません。</li>
	<li>まず適切なリストに対して要素を挿入し、それからaddItemsメソッドを呼び出してください。</li>
</ul>
<h3>参考情報:</h3>
<ul>
	<li> <a href="#Sortables:removeItems">Sortables:removeItems</a>, <a href="#Sortables:addLists">Sortables:addLists</a></li>
</ul>
<h2 id="Sortables:removeItems"><a href="#Sortables:removeItems">Sortablesメソッド: removeItems</a></h2>
<p class="description">Sortablesインスタンスから1つ以上のアイテムを削除します。</p>

<h3>構文:</h3>
<pre class="javascript">mySortables.<span class="me1">removeItems</span><span class="br0">(</span>item1<span class="br0">[</span>, item2<span class="br0">[</span>, item3<span class="br0">[</span>, ...<span class="br0">]</span><span class="br0">]</span><span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>items - (<em>いろいろ</em>) Array.flattenが引数に適用されるので、単一の要素、複数の要素、要素の配列、さらにそれらをいくらでも組み合わせたものを、このメソッドに渡せます。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>要素</em>) 削除された要素からなる要素コレクション。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> mySortables = <span class="kw2">new</span> Sortables<span class="br0">(</span><span class="st0">'#list1, #list2'</span><span class="br0">)</span>;

<span class="kw2">var</span> element1 = $<span class="br0">(</span><span class="st0">'list1'</span><span class="br0">)</span>.<span class="me1">getFirst</span><span class="br0">(</span><span class="br0">)</span>;

<span class="kw2">var</span> element2 = $<span class="br0">(</span><span class="st0">'list2'</span><span class="br0">)</span>.<span class="me1">getLast</span><span class="br0">(</span><span class="br0">)</span>;

mySortables.<span class="me1">removeItems</span><span class="br0">(</span>element1, element2<span class="br0">)</span>.<span class="me1">destroy</span><span class="br0">(</span><span class="br0">)</span>; <span class="co1">//要素はリストから取り除かれ、削除されました。</span></pre>
<h3>注意点:</h3>
<ul>
	<li>ソートアイテムはリストから自動的に削除されず、単にソートができなくなるだけです。</li>
	<li>はじめにソートアイテムに対してremoveItemsを適用し、次にリストコンテナから削除してください。</li>
</ul>
<h3>参考情報:</h3>
<ul>
	<li> <a href="#Sortables:addItems">Sortables:addItems</a>, <a href="#Sortables:removeLists">Sortables:removeLists</a></li>
</ul>
<h2 id="Sortables:addLists"><a href="#Sortables:addLists">Sortablesメソッド: addLists</a></h2>
<p class="description">すでに存在するSortablesインスタンスにアイテムを追加し、新しいリストと古いリストの間でソートができるようにします。</p>

<h3>構文:</h3>
<pre class="javascript">mySortables.<span class="me1">addLists</span><span class="br0">(</span>list1<span class="br0">[</span>, list2<span class="br0">[</span>, list3<span class="br0">[</span>, ...<span class="br0">]</span><span class="br0">]</span><span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>lists - (<em>いろいろ</em>) Array.flattenが引数に適用されるので、単一の要素、複数の要素、要素の配列、さらにそれらをいくらでも組み合わせたものを、このメソッドに渡せます。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) このSortablesインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> mySortables = <span class="kw2">new</span> Sortables<span class="br0">(</span><span class="st0">'list1'</span><span class="br0">)</span>;
mySortables.<span class="me1">addLists</span><span class="br0">(</span>$<span class="br0">(</span><span class="st0">'list2'</span><span class="br0">)</span><span class="br0">)</span>;</pre>
<h3>注意点:</h3>
<ul>
	<li>このメソッドをより高度に使えば、1方向ソートのようなことが行えます。</li>
</ul>
<h3>参考情報:</h3>
<ul>
	<li> <a href="#Sortables:removeLists">Sortables:removeLists</a>, <a href="#Sortables:addItems">Sortables:addItems</a></li>
</ul>
<h2 id="Sortables:removeLists"><a href="#Sortables:removeLists">Sortablesメソッド: removeLists</a></h2>
<p class="description">リスト全体をSortablesインスタンスから取り除き、リスト間でのソートをできなくします。</p>

<h3>構文:</h3>
<pre class="javascript">mySortables.<span class="me1">removeLists</span><span class="br0">(</span>list1<span class="br0">[</span>, list2<span class="br0">[</span>, list3<span class="br0">[</span>, ...<span class="br0">]</span><span class="br0">]</span><span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>lists - (<em>いろいろ</em>) Array.flattenが引数に適用されるので、単一の要素、複数の要素、要素の配列、さらにそれらをいくらでも組み合わせたものを、このメソッドに渡せます。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>要素</em>) 削除されたリストからなる要素コレクション。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> mySortables = <span class="kw2">new</span> Sortables<span class="br0">(</span><span class="st0">'#list1, #list2'</span><span class="br0">)</span>;
mySortables.<span class="me1">removeLists</span><span class="br0">(</span>$<span class="br0">(</span><span class="st0">'list2'</span><span class="br0">)</span><span class="br0">)</span>;</pre>
<h3>参考情報:</h3>
<ul>
	<li> <a href="#Sortables:addLists">Sortables:addLists</a>, <a href="#Sortables:removeItems">Sortables:removeItems</a></li>
</ul>
<h2 id="Sortables:serialize"><a href="#Sortables:serialize">Sortablesメソッド: serialize</a></h2>
<p class="description">Sortablesインスタンス内のリストアイテムの順番を取得します。
リスト一つに対し、要素の順番を含んだ配列を返します。
複数のリストがある場合、それぞれのリストの順番を配列にまとめて返します。
<h3>引数:</h3>
<ol>
	<li>index    - (<em>いろいろ</em>, オプション) 真偽値falseか整数(シリアライズするリストのインデックス)。すべてのリストをシリアライズする場合は、省略するか、falseを渡します。</li>
	<li>modifier - (<em>関数</em>, オプション) Sortablesのデフォルトの出力を上書きする関数。詳しくは以下を参照のこと。</li>
</ol>
<h3>例:</h3>
<pre class="javascript">mySortables.<span class="me1">serialize</span><span class="br0">(</span><span class="nu0">1</span><span class="br0">)</span>;
<span class="co1">//2番目のリストをシリアライズして返します(配列は0ベースだということに注意...);</span>
<span class="co1">//['item_1-1', 'item_1-2', 'item_1-3']</span>

mySortables.<span class="me1">serialize</span><span class="br0">(</span><span class="br0">)</span>;
<span class="co1">//すべてのリストをシリアライズして、入れ子の配列にして返します。一つしかない場合は、そのリストの順番だけを返します。</span>

<span class="coMULTI">/*[['item_1-1', 'item_1-2', 'item_1-3'],
  ['item_2-1', 'item_2-2', 'item_2-3'],
  ['item_3-1', 'item_3-2', 'item_3-3']]*/</span>

mySortables.<span class="me1">serialize</span><span class="br0">(</span><span class="nu0">2</span>, <span class="kw2">function</span><span class="br0">(</span>element, index<span class="br0">)</span><span class="br0">{</span>
    <span class="kw1">return</span> element.<span class="me1">getProperty</span><span class="br0">(</span><span class="st0">'id'</span><span class="br0">)</span>.<span class="me1">replace</span><span class="br0">(</span><span class="st0">'item_'</span>,<span class="st0">''</span><span class="br0">)</span> + <span class="st0">'='</span> + index;

<span class="br0">}</span><span class="br0">)</span>.<span class="me1">join</span><span class="br0">(</span><span class="st0">'&amp;'</span><span class="br0">)</span>;
<span class="co1">//配列を'&amp;'で結合して、リスト3の要素のIDとその位置を結合した文字列を返します。</span>
<span class="co1">//'3-0=0&amp;3-1=1&amp;3-2=2'</span></pre>
</div>
<div id="menu" class="span-2 last">
<h4 class="menu-item"><a href="#Sortables">Sortables</a></h4>
<div class="menu-item"><a href="#Sortables:attach">attach</a></div>
<div class="menu-item"><a href="#Sortables:detach">detach</a></div>
<div class="menu-item"><a href="#Sortables:addItems">addItems</a></div>
<div class="menu-item"><a href="#Sortables:removeItems">removeItems</a></div>
<div class="menu-item"><a href="#Sortables:addLists">addLists</a></div>
<div class="menu-item"><a href="#Sortables:removeLists">removeLists</a></div>
<div class="menu-item"><a href="#Sortables:serialize">serialize</a></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>278</wp:post_id>
		<wp:post_date><![CDATA[2008-11-03 18:52:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-11-03 09:52:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sortables]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mootools"><![CDATA[MooTools]]></category>
		<category domain="category" nicename="plugins"><![CDATA[Plugins]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Tips</title>
		<link>https://takahashifumiki.com/web/mootools/280/</link>
		<pubDate>Mon, 03 Nov 2008 10:38:37 +0000</pubDate>
		<dc:creator><![CDATA[takahashi_fumiki]]></dc:creator>
		<guid isPermaLink="false">https://takahashifumiki.com/?p=280</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="main" class="l-border r-border span-15">
<h1 id="Tips"><a href="#Tips">Class: Tips</a></h1>
<p class="description">title属性とhref属性をツールチップとして表示します。</p>

<h3>クレジット:</h3>
<ul>
	<li>Tip.jsのアイデアは<a href="http://web-graphics.com/mtarchive/001717.php">Bubble Tooltips</a>と<a href="http://web-graphics.com/">Alessandro Fulcitiniti</a>に因っています。</li>
</ul>
<h3>注意点:</h3>
<ul>
	<li>Tipsを使うには、<a href="http://hsivonen.iki.fi/doctype/">標準準拠モード</a>でページを作成する必要があります。</li>
</ul>
<h3>Implements:</h3>
<ul>
	<li> <a href="/docs/Class/Class.Extras#Events">Events</a>, <a href="/docs/Class/Class.Extras#Options">Options</a></li>
</ul>
<h2 id="Tips:constructor"><a href="#Tips:constructor">Tipsメソッド: constructor</a></h2>
<h3 class="description">引数:</h3>
<ul>
	<li>elements - (<em>いろいろ</em>: オプション) ツールチップを適用したい要素のコレクション、セレクター、単一の要素。</li>
	<li>options  - (<em>オブジェクト</em>) Tipsインスタンスをカスタマイズするためのオプション。</li>
</ul>
<h3>オプション:</h3>
<ul>
	<li>showDelay     - (<em>数</em>: 初期値=100) showイベントが発生するまでの待ち時間。</li>
	<li>hideDelay     - (<em>数</em>: 初期値=100) hideイベントが発生するまでの待ち時間。</li>
	<li>className     - (<em>文字列</em>: 初期値=null) ツールチップコンテナが持つクラス名。スタイリングに役立ちます。
<ul>
	<li>上記のツールチップコンテナ内に入っているツールチップ要素はクラス名として'tip'を持ちます。</li>
	<li>タイトルのクラス名: tip-title</li>
	<li>テキストのクラス名: tip-text</li>
</ul>
</li>
	<li>offsets       - (<em>オブジェクト</em>: 初期値= {'x': 16, 'y': 16}) ツールチップのマウスからの距離。</li>
	<li>fixed         - (<em>真偽値</em>: 初期値=false) trueにセットされていると、ツールチップはマウスに追従しません。</li>
</ul>
<h3>イベント:</h3>
<ul>
	<li>show: ツールチップが表示されたときに発生します。</li>
	<li>hide: ツールチップが隠れるときに発生します。</li>
</ul>
<h3>例:</h3>
<h4>HTML:</h4>
<pre class="javascript">&lt;a href=<span class="st0">"http://mootools.net"</span> title=<span class="st0">"mootools homepage"</span> <span class="kw2">class</span>=<span class="st0">"thisisatooltip"</span> /&gt;</pre>
<h4>JavaScript</h4>
<pre class="javascript"><span class="kw2">var</span> myTips = <span class="kw2">new</span> Tips<span class="br0">(</span><span class="st0">'.thisisatooltip'</span><span class="br0">)</span>;</pre>
<h2 id="Tips:show"><a href="#Tips:show">Tipsイベント: show</a></h2>
<ul class="description">
	<li>(<em>関数</em>) ツールチップが表示するときに発生し、デフォルトではツールチップを表示させます。</li>
</ul>
<h3>表記:</h3>
<pre class="javascript">onShow<span class="br0">(</span>tip<span class="br0">)</span></pre>
<h3>引数:</h3>
<ol>
	<li>tip - (<em>要素</em>) ツールチップ要素。エフェクトを適用したいときに役立ちます。</li>
</ol>
<h3>例:</h3>
<pre class="javascript">myTips.<span class="me1">addEvent</span><span class="br0">(</span><span class="st0">'show'</span>, <span class="kw2">function</span><span class="br0">(</span>tip<span class="br0">)</span><span class="br0">{</span>

    tip.<span class="me1">fade</span><span class="br0">(</span><span class="st0">'in'</span><span class="br0">)</span>;
<span class="br0">}</span><span class="br0">)</span>;</pre>
<h2 id="Tips:hide"><a href="#Tips:hide">Tipsイベント: hide</a></h2>
<ul class="description">
	<li>(<em>関数</em>) ツールチップが隠れる時に発生し、デフォルトではツールチップを非表示にします。</li>
</ul>
<h3>表記:</h3>
<pre class="javascript">onHide<span class="br0">(</span>tip<span class="br0">)</span></pre>
<h3>引数:</h3>
<ol>
	<li>tip - (<em>要素</em>) ツールチップ要素。エフェクトを適用するのに役立ちます。</li>
</ol>
<h3>例:</h3>
<pre class="javascript">myTips.<span class="me1">addEvent</span><span class="br0">(</span><span class="st0">'hide'</span>, <span class="kw2">function</span><span class="br0">(</span>tip<span class="br0">)</span><span class="br0">{</span>
    tip.<span class="me1">fade</span><span class="br0">(</span><span class="st0">'out'</span><span class="br0">)</span>;

<span class="br0">}</span><span class="br0">)</span>;</pre>
<h2 id="Tips:attach"><a href="#Tips:attach">Tipsメソッド: attach</a></h2>
<p class="description">要素にツールチップを添附します。Tipsインスタンスにたくさんの要素を加えたいときに役立ちます。</p>

<h3>構文:</h3>
<pre class="javascript">myTips.<span class="me1">attach</span><span class="br0">(</span>elements<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>elements - (<em>いろいろ</em>) ツールチップを適用したい要素コレクション、セレクター、単一の要素。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) Tipsインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript">myTips.<span class="me1">attach</span><span class="br0">(</span><span class="st0">'a.thisisatip'</span><span class="br0">)</span>;</pre>
<h2 id="Tips:detach"><a href="#Tips:detach">Tipsメソッド: detach</a></h2>
<p class="description">要素からツールチップを削除します。Tipsインスタンスから要素を削除したいときに役立ちます。</p>

<h3>構文:</h3>
<pre class="javascript">myTips.<span class="me1">detach</span><span class="br0">(</span>elements<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>elements - (<em>いろいろ</em>) ツールチップを適用したい要素コレクション、セレクター、単一の要素。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) このTipsインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript">myTips.<span class="me1">detach</span><span class="br0">(</span><span class="st0">'a.thisisatip'</span><span class="br0">)</span>;</pre>
<h2 id="Tips:HTML"><a href="#Tips:HTML">ツールチップのHTML構造</a></h2>
<pre class="javascript">&lt;div <span class="kw2">class</span>=<span class="st0">"options.className"</span>&gt; <span class="co1">//オプションに渡したclassNameがここに適用されています。</span>
    &lt;div <span class="kw2">class</span>=<span class="st0">"tip-top"</span>&gt;&lt;/div&gt; <span class="co1">//スタイリングに役立つでしょう。</span>

    &lt;div <span class="kw2">class</span>=<span class="st0">"tip"</span>&gt;

        &lt;div <span class="kw2">class</span>=<span class="st0">"tip-title"</span>&gt;&lt;/div&gt;

        &lt;div <span class="kw2">class</span>=<span class="st0">"tip-text"</span>&gt;&lt;/div&gt;

    &lt;/div&gt;

    &lt;div <span class="kw2">class</span>=<span class="st0">"tip-bottom"</span>&gt;&lt;/div&gt; <span class="co1">//ここもスタイリングに役立ちます。</span>
&lt;/div&gt;</pre>
<h2 id="Tips:Storage"><a href="#Tips:Storage">ストレージを利用したツールチップ</a></h2>
<p class="description"><a href="https://takahashifumiki.com/web/mootools/213#Element:store">Element.Storage</a>を使えばツールチップのタイトルと本文をアサインできます。</p>

<h3>例:</h3>
<h4>HTML:</h4>
<pre class="javascript">&lt;a id=<span class="st0">"tip1"</span> href=<span class="st0">"http://mootools.net"</span> title=<span class="st0">"mootools homepage"</span> <span class="kw2">class</span>=<span class="st0">"thisisatooltip"</span> /&gt;</pre>
<h4>JavaScript</h4>
<pre class="javascript">$<span class="br0">(</span><span class="st0">'tip1'</span><span class="br0">)</span>.<span class="me1">store</span><span class="br0">(</span><span class="st0">'tip:title'</span>, <span class="st0">'custom title for tip 1'</span><span class="br0">)</span>;

$<span class="br0">(</span><span class="st0">'tip1'</span><span class="br0">)</span>.<span class="me1">store</span><span class="br0">(</span><span class="st0">'tip:text'</span>, <span class="st0">'custom text for tip 1'</span><span class="br0">)</span>;</pre>
<h3>注意点:</h3>
ストレージを利用すれば、ツールチップのタイトルや本文に要素やhtmlを入れることができます。</div>
<div id="menu" class="span-2 last">
<h4 class="menu-item"><a href="#Tips">Tips</a></h4>
<div class="menu-item"><a href="#Tips:constructor">constructor</a></div>
<div class="menu-item"><a href="#Tips:show">show</a></div>
<div class="menu-item"><a href="#Tips:hide">hide</a></div>
<div class="menu-item"><a href="#Tips:attach">attach</a></div>
<div class="menu-item"><a href="#Tips:detach">detach</a></div>
<div class="menu-item"><a href="#Tips:HTML">HTML</a></div>
<div class="menu-item"><a href="#Tips:Storage">Storage</a></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>280</wp:post_id>
		<wp:post_date><![CDATA[2008-11-03 19:38:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-11-03 10:38:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[tips]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mootools"><![CDATA[MooTools]]></category>
		<category domain="category" nicename="plugins"><![CDATA[Plugins]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SmoothScroll</title>
		<link>https://takahashifumiki.com/web/mootools/282/</link>
		<pubDate>Mon, 03 Nov 2008 10:40:01 +0000</pubDate>
		<dc:creator><![CDATA[takahashi_fumiki]]></dc:creator>
		<guid isPermaLink="false">https://takahashifumiki.com/?p=282</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="main" class="l-border r-border span-15">
<h1 id="SmoothScroll"><a href="#SmoothScroll">Class: SmoothScroll</a></h1>
<p class="description">すべてのページ内アンカーに自動的にターゲットし、クリックしたときにスムース・スクロールエフェクトを表示します。</p>

<h3>注意点:</h3>
<ul>
	<li>SmoothScrollを使うにはページを<a href="http://hsivonen.iki.fi/doctype/">標準準拠モード</a>で作成する必要があります。</li>
</ul>
<h3>継承:</h3>
<a href="/docs/Fx/Fx.Scroll">Fx.Scroll</a>
<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> mySmoothScroll = <span class="kw2">new</span> SmoothScroll<span class="br0">(</span><span class="br0">[</span>options<span class="br0">[</span>, win<span class="br0">]</span><span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>options - (<em>オブジェクト</em>, オプション) すべてのオプションに加え、SmoothScrollはあらかじめ定義してあるリンクコレクションを受け付けるリンクオプションを持っています。</li>
	<li>win     - (<em>オブジェクト</em>, オプション) SmoothScrollのコンテクスト。</li>
</ol>
<h4>オプション:</h4>
<ul>
	<li>links - (<em>いろいろ</em>) SmoothScrollが使用する要素や要素への参照。</li>
</ul>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) 新しいSmoothScrollインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> mySmoothScroll = <span class="kw2">new</span> SmoothScroll<span class="br0">(</span><span class="br0">{</span>

    links: <span class="st0">'.smoothAnchors'</span>,
    wheelStops: <span class="kw2">false</span>
<span class="br0">}</span><span class="br0">)</span>;</pre>
<h3>参考情報:</h3>
<ul>
	<li><a href="/docs/Fx/Fx.Scroll">Fx.Scroll</a></li>
</ul>
</div>
<div id="menu" class="span-2 last">
<h4 class="menu-item"><a href="#SmoothScroll">SmoothScroll</a></h4>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>282</wp:post_id>
		<wp:post_date><![CDATA[2008-11-03 19:40:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-11-03 10:40:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[smoothscroll]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mootools"><![CDATA[MooTools]]></category>
		<category domain="category" nicename="plugins"><![CDATA[Plugins]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Slider</title>
		<link>https://takahashifumiki.com/web/mootools/284/</link>
		<pubDate>Mon, 03 Nov 2008 10:52:20 +0000</pubDate>
		<dc:creator><![CDATA[takahashi_fumiki]]></dc:creator>
		<guid isPermaLink="false">https://takahashifumiki.com/?p=284</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="main" class="l-border r-border span-15">
<h1 id="Slider"><a href="#Slider">Class: Slider</a></h1>
<p class="description"><strong>2つの要素(ノブとコンテナ)からスライダーを生成します。</strong></p>

<h3>注意点:</h3>
<ul>
	<li>Sliderを使うには、<a href="http://hsivonen.iki.fi/doctype/">標準準拠モード</a>でページを作成する必要があります。</li>
</ul>
<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> mySlider = <span class="kw2">new</span> Slider<span class="br0">(</span>element, knob<span class="br0">[</span>, options<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>element - (<em>要素</em>) スライドさせる要素。</li>
	<li>knob    - (<em>要素</em>) スライドのハンドラとなるノブ要素。</li>
	<li>options - (<em>オブジェクト</em>) Sliderをカスタマイズするオプションオブジェクト。</li>
</ol>
<h4>オプション:</h4>
<ol>
	<li>snap   - (<em>真偽値</em>: 初期値=false) ノブを一番近い値にスナップさせたい場合にはtrueに設定。</li>
	<li>offset - (<em>数</em>: 初期値=0) スライド開始時点のノブの相対的なオフセット。</li>
	<li>range  - (<em>いろいろ</em>: 初期値=false) 数の配列か、false。スライダーが使用する最大値と最小値。</li>
	<li>wheel  - (<em>真偽値</em>: 初期値=false) マウスホイールでノブを動かしたい場合はtrue。</li>
	<li>steps  - (<em>数</em>: 初期値=100) スライダーが動く時のステップ数。</li>
	<li>mode   - (<em>文字列</em>: 初期値=horizontal) スライドのタイプ。'horizontal'か'vertical'。</li>
</ol>
<h3>注意点:</h3>
<ul>
	<li>Rangeオプションは数の配列だけを受け付けます。正負の数を使用できます。</li>
</ul>
<h2 id="Slider:change"><a href="#Slider:change">Sliderイベント: change</a></h2>
<ul class="description">
	<li>(<em>関数</em>) スライダーの値が代わったときに発生します。</li>
</ul>
<h3>表記:</h3>
<pre class="javascript">onChange<span class="br0">(</span>step<span class="br0">)</span></pre>
<h3>引数:</h3>
<ol>
	<li>step - (<em>数</em>) スライダーの現在値。</li>
</ol>
<h2 id="Slider:complete"><a href="#Slider:complete">Sliderイベント: onComplete</a></h2>
<ul class="description">
	<li>(<em>関数</em>) ドラッグを終了したときに発生します。</li>
</ul>
<h3>表記:</h3>
<pre class="javascript">onComplete<span class="br0">(</span>step<span class="br0">)</span></pre>
<h3>引数:</h3>
<ol>
	<li>step - (<em>文字列</em>) スライダーの現在値を示す文字列。</li>
</ol>
<h2 id="Slider:tick"><a href="#Slider:tick">Sliderイベント: tick</a></h2>
<ul class="description">
	<li>(<em>関数</em>) ノブをドラッグしたときに発生します。このイベントはtickの挙動を上書きできます。</li>
</ul>
<h3>表記:</h3>
<pre class="javascript">onTick<span class="br0">(</span>pos<span class="br0">)</span></pre>
<h3>引数:</h3>
<ol>
	<li>pos - (<em>数</em>) スライダーの現在値。</li>
</ol>
<h3>注意点:</h3>
<ul>
	<li>スライダーはノブの場所をスタイリングするときに'tick'イベントを使うようになっています。</li>
</ul>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) 新しいSliderインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> mySlider = <span class="kw2">new</span> Slider<span class="br0">(</span><span class="st0">'myElement'</span>, <span class="st0">'myKnob'</span>, <span class="br0">{</span>

    range: <span class="br0">[</span><span class="nu0">-50</span>, <span class="nu0">50</span><span class="br0">]</span>,
    wheel: <span class="kw2">true</span>,
    snap: <span class="kw2">true</span>,
    onStart: <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>

        <span class="kw1">this</span>.<span class="me1">borderFx</span> = <span class="kw1">this</span>.<span class="me1">borderFx</span> || <span class="kw1">this</span>.<span class="me1">element</span>.<span class="me1">tween</span><span class="br0">(</span><span class="st0">'border'</span><span class="br0">)</span>.<span class="me1">start</span><span class="br0">(</span><span class="st0">'#ccc'</span><span class="br0">)</span>;
    <span class="br0">}</span>,
    onTick: <span class="kw2">function</span><span class="br0">(</span>pos<span class="br0">)</span><span class="br0">{</span>

        <span class="kw1">this</span>.<span class="me1">element</span>.<span class="me1">setStyle</span><span class="br0">(</span><span class="st0">'border-color'</span>, <span class="st0">'#f00'</span><span class="br0">)</span>;
        <span class="kw1">this</span>.<span class="me1">knob</span>.<span class="me1">setStyle</span><span class="br0">(</span><span class="kw1">this</span>.<span class="me1">property</span>, pos<span class="br0">)</span>;
    <span class="br0">}</span>,
    onComplete: <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>

        <span class="kw1">this</span>.<span class="me1">element</span>.<span class="me1">tween</span><span class="br0">(</span><span class="st0">'border'</span><span class="br0">)</span>.<span class="me1">start</span><span class="br0">(</span><span class="st0">'#000'</span><span class="br0">)</span>;
    <span class="br0">}</span>

<span class="br0">}</span><span class="br0">)</span>;</pre>
<h2 id="Slider:set"><a href="#Slider:set">Sliderメソッド: set</a></h2>
<p class="description"><strong>スライダーを指定した位置に動かします。</strong></p>

<h3>構文:</h3>
<pre class="javascript">mySlider.<span class="me1">set</span><span class="br0">(</span>step<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>step - (<em>数</em>) スライダーの移動する位置。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) このSliderインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> mySlider = <span class="kw2">new</span> Slider<span class="br0">(</span><span class="st0">'myElement'</span>, <span class="st0">'myKnob'</span><span class="br0">)</span>;
mySlider.<span class="me1">set</span><span class="br0">(</span><span class="nu0">0</span><span class="br0">)</span>;

<span class="kw2">var</span> myPeriodical = <span class="br0">(</span><span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
    <span class="kw1">if</span><span class="br0">(</span><span class="kw1">this</span>.<span class="me1">step</span> == <span class="kw1">this</span>.<span class="me1">options</span>.<span class="me1">steps</span><span class="br0">)</span> $clear<span class="br0">(</span>myPeriodical<span class="br0">)</span>;
        <span class="kw1">this</span>.<span class="me1">set</span><span class="br0">(</span><span class="kw1">this</span>.<span class="me1">step</span>++<span class="br0">)</span>;

<span class="br0">}</span><span class="br0">)</span>.<span class="me1">periodical</span><span class="br0">(</span><span class="nu0">1000</span>, mySlider<span class="br0">)</span>;</pre>
<h3>注意点:</h3>
<ul>
	<li>Stepは自動的に0からstepsオプションの値の間に制限されます。</li>
</ul>
</div>
<div id="menu" class="span-2 last">
<h4 class="menu-item"><a href="#Slider">Slider</a></h4>
<div class="menu-item"><a href="#Slider:change">change</a></div>
<div class="menu-item"><a href="#Slider:complete">complete</a></div>
<div class="menu-item"><a href="#Slider:tick">tick</a></div>
<div class="menu-item"><a href="#Slider:set">set</a></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>284</wp:post_id>
		<wp:post_date><![CDATA[2008-11-03 19:52:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-11-03 10:52:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[slider]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mootools"><![CDATA[MooTools]]></category>
		<category domain="category" nicename="plugins"><![CDATA[Plugins]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Scroller</title>
		<link>https://takahashifumiki.com/web/mootools/286/</link>
		<pubDate>Mon, 03 Nov 2008 11:02:08 +0000</pubDate>
		<dc:creator><![CDATA[takahashi_fumiki]]></dc:creator>
		<guid isPermaLink="false">https://takahashifumiki.com/?p=286</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="main" class="l-border r-border span-15">
<h1 id="Scroller"><a href="#Scroller">Class: Scroller</a></h1>
<p class="description"><strong>Scrollerはオーバーフローを持ったあらゆる要素(windowを含みます)をスクロールさせるクラスです。マウスカーソルがその要素の指定した領域に達したときに発動します。</strong></p>

<strong>マウスの動きを検知するために、startメソッドを呼び出す必要があります。</strong>
<h3>注意点:</h3>
<ul>
	<li>Scrollerを使用するには、<a href="http://hsivonen.iki.fi/doctype/">標準準拠モード</a>でページを作成する必要があります。</li>
</ul>
<h3>構文:</h3>
<pre class="javascript"><span class="kw2">new</span> Scroller<span class="br0">(</span>element<span class="br0">[</span>, options<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>Implements:</h3>
<a href="https://takahashifumiki.com/web/mootools/208#Events">Events</a>, <a href="https://takahashifumiki.com/web/mootools/208#Options">Options</a>
<h3>引数:</h3>
<ol>
	<li>element - (<em>要素</em>) スクロールさせる要素。</li>
	<li>options - (<em>オブジェクト</em>, オプション) Scrollerインスタンスのオプションオブジェクト。</li>
</ol>
<h4>オプション:</h4>
<ul>
	<li>area     - (<em>数</em>: 初期値=20) 要素をスクロールさせるのに必要な境界線。</li>
	<li>velocity - (<em>数</em>: 初期値=1) Windowスクロールのスピードを調整します。</li>
</ul>
<h3>イベント:</h3>
<ul>
	<li>change - (<em>関数</em>) マウスが境界線に到達したら発生します。スクロールオフセットに他の値を設定することができます。</li>
</ul>
<h4>表記:</h4>
<pre class="javascript">onChange<span class="br0">(</span>x, y<span class="br0">)</span>;</pre>
<h4>引数:</h4>
<ol>
	<li>x - (<em>数</em>) 現在のマウスのx座標。</li>
	<li>y - (<em>数</em>) 現在のマウスのy座標。</li>
</ol>
<h4>例:</h4>
<pre class="javascript"><span class="kw2">var</span> myScroller = <span class="kw2">new</span> Scroller<span class="br0">(</span>window, <span class="br0">{</span>
    area: Math.<span class="me1">round</span><span class="br0">(</span>window.<span class="me1">getWidth</span><span class="br0">(</span><span class="br0">)</span> / <span class="nu0">5</span><span class="br0">)</span>

<span class="br0">}</span><span class="br0">)</span>;

<span class="br0">(</span><span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
    <span class="kw1">this</span>.<span class="kw3">stop</span><span class="br0">(</span><span class="br0">)</span>;
    <span class="kw1">this</span>.<span class="me1">start</span><span class="br0">(</span><span class="br0">)</span>;

<span class="br0">}</span><span class="br0">)</span>.<span class="me1">periodical</span><span class="br0">(</span><span class="nu0">1000</span>, myScroller<span class="br0">)</span>;</pre>
<h2 id="Scroller:start"><a href="#Scroller:start">Scrollerメソッド: start</a></h2>
<p class="description"><strong>Scrollerインスタンスがマウスの動きを検知しはじめます。</strong></p>

<h3>構文:</h3>
<pre class="javascript">myScroller.<span class="me1">start</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myScroller = <span class="kw2">new</span> Scroller<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>;
myScroller.<span class="me1">start</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h2 id="Scroller:stop"><a href="#Scroller:stop">Scrollerメソッド: stop</a></h2>
<p class="description"><strong>Scrollerインスタンスがマウスの動作を検知するのをやめさせます。</strong></p>

<h3>構文:</h3>
<pre class="javascript">myScroller.<span class="me1">start</span><span class="br0">(</span><span class="br0">)</span>;</pre>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myElement = $<span class="br0">(</span><span class="st0">'myElement'</span><span class="br0">)</span>;
<span class="kw2">var</span> myScroller = <span class="kw2">new</span> Scroller<span class="br0">(</span>myElement<span class="br0">)</span>;
myScroller.<span class="me1">start</span><span class="br0">(</span><span class="br0">)</span>;

myElement.<span class="me1">addEvent</span><span class="br0">(</span><span class="st0">'click'</span>, myScroller.<span class="kw3">stop</span>.<span class="me1">bind</span><span class="br0">(</span>myScroller<span class="br0">)</span><span class="br0">)</span>; <span class="co1">//ユーザーがクリックしたら、スクロールを停止します。</span></pre>
</div>
<div id="menu" class="span-2 last">
<h4 class="menu-item"><a href="#Scroller">Scroller</a></h4>
<div class="menu-item"><a href="#Scroller:start">start</a></div>
<div class="menu-item"><a href="#Scroller:stop">stop</a></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>286</wp:post_id>
		<wp:post_date><![CDATA[2008-11-03 20:02:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-11-03 11:02:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[scroller]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mootools"><![CDATA[MooTools]]></category>
		<category domain="category" nicename="plugins"><![CDATA[Plugins]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Assets</title>
		<link>https://takahashifumiki.com/web/mootools/288/</link>
		<pubDate>Mon, 03 Nov 2008 11:14:23 +0000</pubDate>
		<dc:creator><![CDATA[takahashi_fumiki]]></dc:creator>
		<guid isPermaLink="false">https://takahashifumiki.com/?p=288</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="main" class="l-border r-border span-15">
<h1 id="Assets"><a href="#Assets">Hash: Assets</a></h1>
<p class="description">JavaScript、CSS、画像などを動的に読み込み・管理するためのメソッドを提供します。</p>

<h2 id="Assets:javascript"><a href="#Assets:javascript">Assetsメソッド: javascript</a></h2>
<p class="description">documentのheadにscriptタグを挿入し、srcを指定できます。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> myScript = Asset.<span class="me1">javascript</span><span class="br0">(</span>source<span class="br0">[</span>, properties<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>source     - (<em>文字列</em>) 読み込むJavaScriptファイルの場所。</li>
	<li>properties - (<em>オブジェクト</em>, オプション) インクルードされるscript要素に適用される追加の属性。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>要素</em>) 新しいscript要素。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myScript = <span class="kw2">new</span> Asset.<span class="me1">javascript</span><span class="br0">(</span><span class="st0">'/scripts/myScript.js'</span>, <span class="br0">{</span>id: <span class="st0">'myScript'</span><span class="br0">}</span><span class="br0">)</span>;</pre>
<h2 id="Assets:css"><a href="#Assets:css">Assetsメソッド: css</a></h2>
<p class="description">ページにCSSファイルを挿入します。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> myCSS = <span class="kw2">new</span> Asset.<span class="me1">css</span><span class="br0">(</span>source<span class="br0">[</span>, properties<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>source     - (<em>文字列</em>) CSSファイルへのパス。</li>
	<li>properties - (<em>オブジェクト</em>) link要素に追加したい属性。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>要素</em>) 新しいlink要素。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myCSS = <span class="kw2">new</span> Asset.<span class="me1">css</span><span class="br0">(</span><span class="st0">'/css/myStyle.css'</span>, <span class="br0">{</span>id: <span class="st0">'myStyle'</span>, title: <span class="st0">'myStyle'</span><span class="br0">}</span><span class="br0">)</span>;</pre>
<h2 id="Assets:image"><a href="#Assets:image">Assetsメソッド: image</a></h2>
<p class="description">画像を読み込んでから、img要素を返します。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> myImage = <span class="kw2">new</span> Asset.<span class="me1">image</span><span class="br0">(</span>source<span class="br0">[</span>, properties<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>source     - (<em>文字列</em>) 画像ファイルまでのパス。</li>
	<li>properties - (<em>オブジェクト</em>) img要素に追加したい属性。onload、onerror、onabortイベントも指定できます。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>要素</em>) 新しいHTML img要素。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myImage = <span class="kw2">new</span> Asset.<span class="me1">image</span><span class="br0">(</span><span class="st0">'/images/myImage.png'</span>, <span class="br0">{</span>id: <span class="st0">'myImage'</span>, title: <span class="st0">'myImage'</span>, <span class="kw3">onload</span>: myFunction<span class="br0">}</span><span class="br0">)</span>;</pre>
<h3>注意点:</h3>
<ul>
	<li>ページに画像は挿入されません。</li>
	<li>警告: 返される要素のload・error・abortにaddEventを使わないで下さい。イベントを添附する場合は、propertiesオプションのonload・onerror・onabortに添附してください。</li>
</ul>
<h2 id="Assets:images"><a href="#Assets:images">Assetsメソッド: images</a></h2>
<p class="description">複数の画像を配列(文字列として)をあらかじめ読み込んでから、img要素の配列を返します。ページに挿入はされません。</p>

<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> myImages = <span class="kw2">new</span> Asset.<span class="me1">images</span><span class="br0">(</span>source<span class="br0">[</span>, options<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>sources - (<em>いろいろ</em>) 画像ファイルへのパスからなる配列。</li>
	<li>options - (<em>オブジェクト</em>, オプション) 以下を参照のこと。</li>
</ol>
<h2><a href="#">オプション:</a></h2>
<h3 class="description">onComplete</h3>
<ul>
	<li>(<em>関数</em>) すべての画像ファイルが読み込まれてから発生します。</li>
</ul>
<h4>表記:</h4>
<pre class="javascript">onComplete<span class="br0">(</span><span class="br0">)</span></pre>
<h3>onProgress</h3>
<ul>
	<li>(<em>関数</em>) 一つの画像が読み込まれると発生します。</li>
</ul>
<h4>表記:</h4>
<pre class="javascript">onProgress<span class="br0">(</span>counter, index<span class="br0">)</span></pre>
<h4>引数:</h4>
<ol>
	<li>counter - (<em>数</em>) 読み込まれた画像の数。</li>
	<li>index   - (<em>数</em>) 読み込まれた画像のインデックス。</li>
</ol>
<h4>戻り値:</h4>
<ul>
	<li>(<em>配列</em>) <a href="https://takahashifumiki.com/web/mootools/213#Elements">Elements</a>コレクション。</li>
</ul>
<h4>例:</h4>
<pre class="javascript"><span class="kw2">var</span> myImages = <span class="kw2">new</span> Asset.<span class="me1">images</span><span class="br0">(</span><span class="br0">[</span><span class="st0">'/images/myImage.png'</span>, <span class="st0">'/images/myImage2.gif'</span><span class="br0">]</span>, <span class="br0">{</span>

    onComplete: <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>
        <span class="kw3">alert</span><span class="br0">(</span><span class="st0">'All images loaded!'</span><span class="br0">)</span>;
    <span class="br0">}</span>
<span class="br0">}</span><span class="br0">)</span>;</pre>
</div>
<div id="menu" class="span-2 last">
<h4 class="menu-item"><a href="#Assets">Assets</a></h4>
<div class="menu-item"><a href="#Assets:javascript">javascript</a></div>
<div class="menu-item"><a href="#Assets:css">css</a></div>
<div class="menu-item"><a href="#Assets:image">image</a></div>
<div class="menu-item"><a href="#Assets:images">images</a></div>
<div class="menu-item"><a href="#"></a></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>288</wp:post_id>
		<wp:post_date><![CDATA[2008-11-03 20:14:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-11-03 11:14:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[assets]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mootools"><![CDATA[MooTools]]></category>
		<category domain="category" nicename="plugins"><![CDATA[Plugins]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Accordion</title>
		<link>https://takahashifumiki.com/web/mootools/290/</link>
		<pubDate>Mon, 03 Nov 2008 11:35:10 +0000</pubDate>
		<dc:creator><![CDATA[takahashi_fumiki]]></dc:creator>
		<guid isPermaLink="false">https://takahashifumiki.com/?p=290</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="main" class="l-border r-border span-15">
<h1 id="Accordion"><a href="#Accordion">Class: Accordion</a></h1>
<p class="description">Accordionクラスはハンドラがクリックされた時にトグルされる要素のグループを作ります。一つの要素がトグルされて表示されると、別の要素もすべてトグルされて非表示になります。</p>

<h3>注意点:</h3>
<ul>
	<li>Accordionを使うには、<a href="http://hsivonen.iki.fi/doctype/">標準準拠モード</a>でページを作成する必要があります。</li>
	<li>Accordion要素は、アニメーションを正しく表示するために、パディングとボーダーを取り除かれます。一番よい練習方法は、要素のコンテナとしてアコーディオンを使い、好きなようにスタイリングしてみることです。</li>
</ul>
<h3>Extends:</h3>
<a href="https://takahashifumiki.com/web/mootools/265">Fx.Elements</a>
<h3>構文:</h3>
<pre class="javascript"><span class="kw2">var</span> myAccordion = <span class="kw2">new</span> Accordion<span class="br0">(</span>togglers, elements<span class="br0">[</span>, options<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>togglers - (<em>配列</em>) 要素の配列。これをクリックすることでトリガーとなり、アコーディオン内の特定のセクションが開きます。</li>
	<li>elements - (<em>配列</em>) アニメーションが適用される要素の配列。</li>
	<li>options  - (<em>オブジェクト</em>, オプション) すべての<a href="https://takahashifumiki.com/web/mootools/240">Fx</a>オプションに加え、以下のものが指定できます。</li>
</ol>
<h4>オプション:</h4>
<ul>
	<li>display     - (<em>整数</em>: 初期値=0) はじめに表示されている要素のインデックス(アニメーションあり)。</li>
	<li>show        - (<em>整数</em>: 初期値=0) はじめから表示されている要素のインデックス(アニメーションなし)。</li>
	<li>height      - (<em>真偽値</em>: 初期値=true) trueにセットされていれば、表示される要素が切り替わるときに高さ変更のアニメーションが加わります。</li>
	<li>width       - (<em>真偽値</em>: 初期値=false) trueにセットされていれば、表示される要素が切り替わるときに幅変更のアニメーションが加わります。</li>
	<li>opacity     - (<em>真偽値</em>: 初期値=true) trueにセットされていれば、表示される要素が切り替わるときに透明度変更エフェクトが加わります。</li>
	<li>fixedHeight - (<em>真偽値</em>: 初期値=false) trueにセットされると、表示されている要素は固定の高さを持ちます。</li>
	<li>fixedWidth  - (<em>真偽値</em>: 初期値=false) trueにセットされると、表示されている要素は固定の幅を持ちます。</li>
	<li>alwaysHide  - (<em>真偽値</em>: 初期値=false) trueにセットされると、すべての要素を閉じることができるようになります。falseならば、必ず1つは開いたままになります。</li>
	<li>width       - (<em>真偽値</em>: 初期値=false) trueにセットされると、アコーディオンに幅変更のエフェクトが加わります。警告:これを動かすには、CSSマスターである必要があります！</li>
</ul>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) 新しいAccordionインスタンス。</li>
</ul>
<h2><a href="#">イベント:</a></h2>
<h3 class="description">active</h3>
<ul>
	<li>(<em>関数</em>) 要素が表示されるときに発生します。</li>
</ul>
<h4>表記:</h4>
<pre class="javascript">onActive<span class="br0">(</span>toggler, element<span class="br0">)</span></pre>
<h4>引数:</h4>
<ol>
	<li>toggler - (<em>要素</em>) 表示された要素のトグラー。</li>
	<li>element - (<em>要素</em>) 表示された要素。</li>
</ol>
<h3>background</h3>
<ul>
	<li>(<em>関数</em>) 要素が非表示になるときに発生します。</li>
</ul>
<h4>Signature:</h4>
<pre class="javascript">onBackground<span class="br0">(</span>toggler, element<span class="br0">)</span></pre>
<h4>引数:</h4>
<ol>
	<li> toggler - (<em>要素</em>) 表示されていた要素のトグラー。</li>
	<li> element - (<em>要素</em>) 表示されていた要素。</li>
</ol>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myAccordion = <span class="kw2">new</span> Accordion<span class="br0">(</span>$$<span class="br0">(</span><span class="st0">'.togglers'</span><span class="br0">)</span>, $$<span class="br0">(</span><span class="st0">'.elements'</span><span class="br0">)</span>, <span class="br0">{</span>

    display: <span class="nu0">2</span>,
    alwaysHide: <span class="kw2">true</span>
<span class="br0">}</span><span class="br0">)</span>;</pre>
<h3>デモ:</h3>
<ul>
	<li>Accordion - <a href="http://demos.mootools.net/Accordion">http://demos.mootools.net/Accordion</a></li>
</ul>
<h2 id="Accordion:addSection"><a href="#Accordion:addSection">Accordionメソッド: addSection</a></h2>
<p class="description">Accordionインスタンスの指定した位置に、新しいセクションを動的に追加します。</p>

<h3>構文:</h3>
<pre class="javascript">myAccordion.<span class="me1">addSection</span><span class="br0">(</span>toggler, element<span class="br0">[</span>, pos<span class="br0">]</span><span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>toggler - (<em>要素</em>) アコーディオンのセクションを開くトグラーとなる要素。</li>
	<li>element - (<em>要素</em>) トグラーがクリックされたときに開く要素。</li>
	<li>pos     - (<em>整数</em>, オプション) アコーディオン内にセクションが挿入される位置(初期値は最後)</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) このAccordionインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="kw2">var</span> myAccordion = <span class="kw2">new</span> Accordion<span class="br0">(</span>$$<span class="br0">(</span><span class="st0">'.togglers'</span><span class="br0">)</span>, $$<span class="br0">(</span><span class="st0">'.elements'</span><span class="br0">)</span><span class="br0">)</span>;
myAccordion.<span class="me1">addSection</span><span class="br0">(</span><span class="st0">'myToggler1'</span>, <span class="st0">'myElement1'</span><span class="br0">)</span>; <span class="co1">// 最後の部分にセクションを追加します。</span>

myAccordion.<span class="me1">addSection</span><span class="br0">(</span><span class="st0">'myToggler2'</span>, <span class="st0">'myElement2'</span>, <span class="nu0">0</span><span class="br0">)</span>; <span class="co1">//先頭にセクションを追加します。</span></pre>
<h2 id="Accordion:display"><a href="#Accordion:display">Accordionメソッド: display</a></h2>
<p class="description">指定したセクションを開き、他を非表示にします。外部からアコーディオンを操作するのに役立ちます。</p>

<h3>構文:</h3>
<pre class="javascript">myAccordion.<span class="me1">display</span><span class="br0">(</span>index<span class="br0">)</span>;</pre>
<h3>引数:</h3>
<ol>
	<li>index - (<em>いろいろ</em>) 表示したいセクションのインデックス。または、要素そのもの。</li>
</ol>
<h3>戻り値:</h3>
<ul>
	<li>(<em>オブジェクト</em>) このAccordionインスタンス。</li>
</ul>
<h3>例:</h3>
<pre class="javascript"><span class="co1">// ティッカー風のアコーディオン。子供は家でやらないように。</span>
<span class="kw2">var</span> myAccordion = <span class="kw2">new</span> Accordion<span class="br0">(</span><span class="st0">'.togglers'</span>, <span class="st0">'.elements'</span>, <span class="br0">{</span>
    onComplete: <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span><span class="br0">{</span>

        <span class="kw1">this</span>.<span class="me1">display</span>.<span class="me1">delay</span><span class="br0">(</span><span class="nu0">2500</span>, <span class="kw1">this</span>, <span class="br0">(</span><span class="kw1">this</span>.<span class="me1">previous</span> + <span class="nu0">1</span><span class="br0">)</span> % <span class="kw1">this</span>.<span class="me1">togglers</span>.<span class="me1">length</span><span class="br0">)</span>;
    <span class="br0">}</span>

<span class="br0">}</span><span class="br0">)</span>;</pre>
</div>
<div id="menu" class="span-2 last">
<h4 class="menu-item"><a href="#Accordion">Accordion</a></h4>
<div class="menu-item"><a href="#"></a></div>
<div class="menu-item"><a href="#Accordion:addSection">addSection</a></div>
<div class="menu-item"><a href="#Accordion:display">display</a></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>290</wp:post_id>
		<wp:post_date><![CDATA[2008-11-03 20:35:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-11-03 11:35:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[accordion]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mootools"><![CDATA[MooTools]]></category>
		<category domain="category" nicename="plugins"><![CDATA[Plugins]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>MooTools1.2.1のダウンロード</title>
		<link>https://takahashifumiki.com/web/mootools/294/</link>
		<pubDate>Thu, 02 Oct 2008 16:23:38 +0000</pubDate>
		<dc:creator><![CDATA[takahashi_fumiki]]></dc:creator>
		<guid isPermaLink="false">https://takahashifumiki.com/?p=294</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="description">このページからMooTools Coreのフルパッケージをダウンロードできます。プラグインは含まれていません。</div>
<div class="description">

もっと沢山の機能が必要ならば、<a href="http://mootools.net/more">More Builder</a>へ行ってください。必要な機能を選択してダウンロードできます。</div>
<table id="download-full" border="0" cellspacing="0">
<tbody>
<tr>
<th class="name">ダウンロード</th>
<th class="compression">圧縮タイプ</th>
<th class="last size">サイズ</th>
</tr>
<tr>
<td><a href="http://mootools.net/download/get/mootools-1.2.1-core-yc.js">MooTools 1.2.1</a></td>
<td><a href="http://www.julienlecomte.net/yuicompressor/">YUIコンプレッサー</a></td>
<td class="last size">63 kb</td>
</tr>
<tr>
<td><a href="http://mootools.net/download/get/mootools-1.2.1-core-jm.js">MooTools 1.2.1</a></td>
<td><a href="http://javascript.crockford.com/jsmin.html">JSMin</a></td>
<td class="last size">75 kb</td>
</tr>
<tr class="last">
<td><a href="http://mootools.net/download/get/mootools-1.2.1-core-nc.js">MooTools 1.2.1</a></td>
<td>圧縮なし</td>
<td class="last size">95 kb</td>
</tr>
</tbody></table>
<div class="description">

MooToolsをGZipに圧縮したものは、は<em>わずか18kbです</em>。一番軽くするには、MooToolsのYUIコンプレッサーをGZipに圧縮するとよいでしょう。</div>
<h3 class="red">上級者向けダウンロード</h3>
必要ならば、<a href="http://mootools.net/core">自分専用のMooTools Coreを作ることができます</a>。EffectsやRequestといった、自分が使わないコンポーネントを不要だと考えているかもしれませんし、ブラウザ以外の環境(例えば、<a href="http://www.mozilla.org/rhino/">Rhino</a>)でMooToolsを使うのかもしれません。どちらにせよ、このフルバージョンは<a href="http://mootools.net/core">core builder</a>に挙げられているすべてのコンポーネントを含んでいます。
<h3 class="red">開発バージョン</h3>
テストと開発に関わりたければ、<a href="http://mootools.net/download/get/mootools-core-edge.js">最新バージョンのMooTools Coreをダウンロードできます</a>。 このバージョンはgitレポジトリで日々開発されており、<a href="http://mootools.lighthouseapp.com/">チケットを切れば</a>、開発に携わることができます。!

<hr />
<h3 class="purple">翻訳者による追記</h3>
MooToolsのファイルは二つに分かれています。とりあえずツールチップとかアコーディオンを使いたいという方は、<a href="http://mootools.net/download/get/mootools-1.2.1-core-yc.js">MooTools Core</a>をダウンロードし、<a href="http://mootools.net/more">MooTools More</a>のすべてにチェックを入れるといいでしょう。重いといっても、大した重さではありません。

また、開発チームの一人（多分）であるAaron Newtonによって運営されている<a href="http://www.clientcide.com/">Clientside</a>というサイトに、MooToolsのプラグインが山ほどあります。
MooTools1.11への後方互換や、<a href="http://mochaui.com/demo/">Mocha UI</a>のようなユーザインターフェース構築用パーツ、iPhone向けUI、フォームバリデイターなど、ほとんどのものが存在します。

英語が得意で、プラグイン開発や自分のソースのクラスパッケージ化を考えている方は、利用されるといいでしょう。プラグインのダウンロードは<a href="http://www.clientcide.com/js">こちら</a>から。MooTools本体も一緒に落とすことができます。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>294</wp:post_id>
		<wp:post_date><![CDATA[2008-10-03 01:23:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-10-02 16:23:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mootools121%e3%81%ae%e3%83%80%e3%82%a6%e3%83%b3%e3%83%ad%e3%83%bc%e3%83%89]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mootools"><![CDATA[MooTools]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
